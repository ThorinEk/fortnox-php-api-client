<?php
/**
 * SupplierInvoicePaymentsResourceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  FortnoxApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [Guides & Good to Know section](https://www.fortnox.se/developer/guides-and-good-to-know/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit per access-token is 25 requests per 5 seconds. This equals to 300 requests per minute.  [Read more about this here.](https://www.fortnox.se/developer/guides-and-good-to-know/rate-limits-for-fortnox-api/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://www.fortnox.se/developer/guides-and-good-to-know/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FortnoxApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FortnoxApi\ApiException;
use FortnoxApi\Configuration;
use FortnoxApi\HeaderSelector;
use FortnoxApi\ObjectSerializer;

/**
 * SupplierInvoicePaymentsResourceApi Class Doc Comment
 *
 * @category Class
 * @package  FortnoxApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SupplierInvoicePaymentsResourceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'bookkeepSupplierInvoicePaymentsResource' => [
            'application/json',
        ],
        'createSupplierInvoicePaymentsResource' => [
            'application/json',
        ],
        'getSupplierInvoicePaymentsResource' => [
            'application/json',
        ],
        'listSupplierInvoicePaymentsResource' => [
            'application/json',
        ],
        'removeSupplierInvoicePaymentsResource' => [
            'application/json',
        ],
        'updateSupplierInvoicePaymentsResource' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bookkeepSupplierInvoicePaymentsResource
     *
     * Bookkeep a supplier invoice payment
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookkeepSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\SupplierInvoicePaymentWrap
     */
    public function bookkeepSupplierInvoicePaymentsResource($number, string $contentType = self::contentTypes['bookkeepSupplierInvoicePaymentsResource'][0])
    {
        list($response) = $this->bookkeepSupplierInvoicePaymentsResourceWithHttpInfo($number, $contentType);
        return $response;
    }

    /**
     * Operation bookkeepSupplierInvoicePaymentsResourceWithHttpInfo
     *
     * Bookkeep a supplier invoice payment
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookkeepSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\SupplierInvoicePaymentWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function bookkeepSupplierInvoicePaymentsResourceWithHttpInfo($number, string $contentType = self::contentTypes['bookkeepSupplierInvoicePaymentsResource'][0])
    {
        $request = $this->bookkeepSupplierInvoicePaymentsResourceRequest($number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\SupplierInvoicePaymentWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\SupplierInvoicePaymentWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\SupplierInvoicePaymentWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\SupplierInvoicePaymentWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\SupplierInvoicePaymentWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bookkeepSupplierInvoicePaymentsResourceAsync
     *
     * Bookkeep a supplier invoice payment
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookkeepSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookkeepSupplierInvoicePaymentsResourceAsync($number, string $contentType = self::contentTypes['bookkeepSupplierInvoicePaymentsResource'][0])
    {
        return $this->bookkeepSupplierInvoicePaymentsResourceAsyncWithHttpInfo($number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookkeepSupplierInvoicePaymentsResourceAsyncWithHttpInfo
     *
     * Bookkeep a supplier invoice payment
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookkeepSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookkeepSupplierInvoicePaymentsResourceAsyncWithHttpInfo($number, string $contentType = self::contentTypes['bookkeepSupplierInvoicePaymentsResource'][0])
    {
        $returnType = '\FortnoxApi\Model\SupplierInvoicePaymentWrap';
        $request = $this->bookkeepSupplierInvoicePaymentsResourceRequest($number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bookkeepSupplierInvoicePaymentsResource'
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookkeepSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bookkeepSupplierInvoicePaymentsResourceRequest($number, string $contentType = self::contentTypes['bookkeepSupplierInvoicePaymentsResource'][0])
    {

        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling bookkeepSupplierInvoicePaymentsResource'
            );
        }


        $resourcePath = '/3/supplierinvoicepayments/{Number}/bookkeep';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'Number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSupplierInvoicePaymentsResource
     *
     * Create a supplier invoice payment
     *
     * @param  \FortnoxApi\Model\SupplierInvoicePaymentWrap $supplier_invoice_payment to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\SupplierInvoicePaymentWrap
     */
    public function createSupplierInvoicePaymentsResource($supplier_invoice_payment = null, string $contentType = self::contentTypes['createSupplierInvoicePaymentsResource'][0])
    {
        list($response) = $this->createSupplierInvoicePaymentsResourceWithHttpInfo($supplier_invoice_payment, $contentType);
        return $response;
    }

    /**
     * Operation createSupplierInvoicePaymentsResourceWithHttpInfo
     *
     * Create a supplier invoice payment
     *
     * @param  \FortnoxApi\Model\SupplierInvoicePaymentWrap $supplier_invoice_payment to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\SupplierInvoicePaymentWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSupplierInvoicePaymentsResourceWithHttpInfo($supplier_invoice_payment = null, string $contentType = self::contentTypes['createSupplierInvoicePaymentsResource'][0])
    {
        $request = $this->createSupplierInvoicePaymentsResourceRequest($supplier_invoice_payment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\SupplierInvoicePaymentWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\SupplierInvoicePaymentWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\SupplierInvoicePaymentWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\SupplierInvoicePaymentWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\SupplierInvoicePaymentWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSupplierInvoicePaymentsResourceAsync
     *
     * Create a supplier invoice payment
     *
     * @param  \FortnoxApi\Model\SupplierInvoicePaymentWrap $supplier_invoice_payment to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSupplierInvoicePaymentsResourceAsync($supplier_invoice_payment = null, string $contentType = self::contentTypes['createSupplierInvoicePaymentsResource'][0])
    {
        return $this->createSupplierInvoicePaymentsResourceAsyncWithHttpInfo($supplier_invoice_payment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSupplierInvoicePaymentsResourceAsyncWithHttpInfo
     *
     * Create a supplier invoice payment
     *
     * @param  \FortnoxApi\Model\SupplierInvoicePaymentWrap $supplier_invoice_payment to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSupplierInvoicePaymentsResourceAsyncWithHttpInfo($supplier_invoice_payment = null, string $contentType = self::contentTypes['createSupplierInvoicePaymentsResource'][0])
    {
        $returnType = '\FortnoxApi\Model\SupplierInvoicePaymentWrap';
        $request = $this->createSupplierInvoicePaymentsResourceRequest($supplier_invoice_payment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSupplierInvoicePaymentsResource'
     *
     * @param  \FortnoxApi\Model\SupplierInvoicePaymentWrap $supplier_invoice_payment to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSupplierInvoicePaymentsResourceRequest($supplier_invoice_payment = null, string $contentType = self::contentTypes['createSupplierInvoicePaymentsResource'][0])
    {



        $resourcePath = '/3/supplierinvoicepayments/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($supplier_invoice_payment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($supplier_invoice_payment));
            } else {
                $httpBody = $supplier_invoice_payment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSupplierInvoicePaymentsResource
     *
     * Retrieve a single supplier invoice payment
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\SupplierInvoicePaymentWrap
     */
    public function getSupplierInvoicePaymentsResource($number, string $contentType = self::contentTypes['getSupplierInvoicePaymentsResource'][0])
    {
        list($response) = $this->getSupplierInvoicePaymentsResourceWithHttpInfo($number, $contentType);
        return $response;
    }

    /**
     * Operation getSupplierInvoicePaymentsResourceWithHttpInfo
     *
     * Retrieve a single supplier invoice payment
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\SupplierInvoicePaymentWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSupplierInvoicePaymentsResourceWithHttpInfo($number, string $contentType = self::contentTypes['getSupplierInvoicePaymentsResource'][0])
    {
        $request = $this->getSupplierInvoicePaymentsResourceRequest($number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\SupplierInvoicePaymentWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\SupplierInvoicePaymentWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\SupplierInvoicePaymentWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\SupplierInvoicePaymentWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\SupplierInvoicePaymentWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSupplierInvoicePaymentsResourceAsync
     *
     * Retrieve a single supplier invoice payment
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplierInvoicePaymentsResourceAsync($number, string $contentType = self::contentTypes['getSupplierInvoicePaymentsResource'][0])
    {
        return $this->getSupplierInvoicePaymentsResourceAsyncWithHttpInfo($number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSupplierInvoicePaymentsResourceAsyncWithHttpInfo
     *
     * Retrieve a single supplier invoice payment
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplierInvoicePaymentsResourceAsyncWithHttpInfo($number, string $contentType = self::contentTypes['getSupplierInvoicePaymentsResource'][0])
    {
        $returnType = '\FortnoxApi\Model\SupplierInvoicePaymentWrap';
        $request = $this->getSupplierInvoicePaymentsResourceRequest($number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSupplierInvoicePaymentsResource'
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSupplierInvoicePaymentsResourceRequest($number, string $contentType = self::contentTypes['getSupplierInvoicePaymentsResource'][0])
    {

        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling getSupplierInvoicePaymentsResource'
            );
        }


        $resourcePath = '/3/supplierinvoicepayments/{Number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'Number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSupplierInvoicePaymentsResource
     *
     * Retrieve a list of supplier invoice payments
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\SupplierInvoicePaymentListItemList
     */
    public function listSupplierInvoicePaymentsResource(string $contentType = self::contentTypes['listSupplierInvoicePaymentsResource'][0])
    {
        list($response) = $this->listSupplierInvoicePaymentsResourceWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation listSupplierInvoicePaymentsResourceWithHttpInfo
     *
     * Retrieve a list of supplier invoice payments
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\SupplierInvoicePaymentListItemList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSupplierInvoicePaymentsResourceWithHttpInfo(string $contentType = self::contentTypes['listSupplierInvoicePaymentsResource'][0])
    {
        $request = $this->listSupplierInvoicePaymentsResourceRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\SupplierInvoicePaymentListItemList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\SupplierInvoicePaymentListItemList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\SupplierInvoicePaymentListItemList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\SupplierInvoicePaymentListItemList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\SupplierInvoicePaymentListItemList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listSupplierInvoicePaymentsResourceAsync
     *
     * Retrieve a list of supplier invoice payments
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSupplierInvoicePaymentsResourceAsync(string $contentType = self::contentTypes['listSupplierInvoicePaymentsResource'][0])
    {
        return $this->listSupplierInvoicePaymentsResourceAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSupplierInvoicePaymentsResourceAsyncWithHttpInfo
     *
     * Retrieve a list of supplier invoice payments
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSupplierInvoicePaymentsResourceAsyncWithHttpInfo(string $contentType = self::contentTypes['listSupplierInvoicePaymentsResource'][0])
    {
        $returnType = '\FortnoxApi\Model\SupplierInvoicePaymentListItemList';
        $request = $this->listSupplierInvoicePaymentsResourceRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSupplierInvoicePaymentsResource'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSupplierInvoicePaymentsResourceRequest(string $contentType = self::contentTypes['listSupplierInvoicePaymentsResource'][0])
    {


        $resourcePath = '/3/supplierinvoicepayments/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeSupplierInvoicePaymentsResource
     *
     * Remove a supplier invoice payment
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeSupplierInvoicePaymentsResource($number, string $contentType = self::contentTypes['removeSupplierInvoicePaymentsResource'][0])
    {
        $this->removeSupplierInvoicePaymentsResourceWithHttpInfo($number, $contentType);
    }

    /**
     * Operation removeSupplierInvoicePaymentsResourceWithHttpInfo
     *
     * Remove a supplier invoice payment
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeSupplierInvoicePaymentsResourceWithHttpInfo($number, string $contentType = self::contentTypes['removeSupplierInvoicePaymentsResource'][0])
    {
        $request = $this->removeSupplierInvoicePaymentsResourceRequest($number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeSupplierInvoicePaymentsResourceAsync
     *
     * Remove a supplier invoice payment
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeSupplierInvoicePaymentsResourceAsync($number, string $contentType = self::contentTypes['removeSupplierInvoicePaymentsResource'][0])
    {
        return $this->removeSupplierInvoicePaymentsResourceAsyncWithHttpInfo($number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeSupplierInvoicePaymentsResourceAsyncWithHttpInfo
     *
     * Remove a supplier invoice payment
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeSupplierInvoicePaymentsResourceAsyncWithHttpInfo($number, string $contentType = self::contentTypes['removeSupplierInvoicePaymentsResource'][0])
    {
        $returnType = '';
        $request = $this->removeSupplierInvoicePaymentsResourceRequest($number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeSupplierInvoicePaymentsResource'
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeSupplierInvoicePaymentsResourceRequest($number, string $contentType = self::contentTypes['removeSupplierInvoicePaymentsResource'][0])
    {

        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling removeSupplierInvoicePaymentsResource'
            );
        }


        $resourcePath = '/3/supplierinvoicepayments/{Number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'Number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSupplierInvoicePaymentsResource
     *
     * Update a supplier invoice payment
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  \FortnoxApi\Model\SupplierInvoicePaymentWrap $supplier_invoice_payment to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\SupplierInvoicePaymentWrap
     */
    public function updateSupplierInvoicePaymentsResource($number, $supplier_invoice_payment = null, string $contentType = self::contentTypes['updateSupplierInvoicePaymentsResource'][0])
    {
        list($response) = $this->updateSupplierInvoicePaymentsResourceWithHttpInfo($number, $supplier_invoice_payment, $contentType);
        return $response;
    }

    /**
     * Operation updateSupplierInvoicePaymentsResourceWithHttpInfo
     *
     * Update a supplier invoice payment
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  \FortnoxApi\Model\SupplierInvoicePaymentWrap $supplier_invoice_payment to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\SupplierInvoicePaymentWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSupplierInvoicePaymentsResourceWithHttpInfo($number, $supplier_invoice_payment = null, string $contentType = self::contentTypes['updateSupplierInvoicePaymentsResource'][0])
    {
        $request = $this->updateSupplierInvoicePaymentsResourceRequest($number, $supplier_invoice_payment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\SupplierInvoicePaymentWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\SupplierInvoicePaymentWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\SupplierInvoicePaymentWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\SupplierInvoicePaymentWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\SupplierInvoicePaymentWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSupplierInvoicePaymentsResourceAsync
     *
     * Update a supplier invoice payment
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  \FortnoxApi\Model\SupplierInvoicePaymentWrap $supplier_invoice_payment to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSupplierInvoicePaymentsResourceAsync($number, $supplier_invoice_payment = null, string $contentType = self::contentTypes['updateSupplierInvoicePaymentsResource'][0])
    {
        return $this->updateSupplierInvoicePaymentsResourceAsyncWithHttpInfo($number, $supplier_invoice_payment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSupplierInvoicePaymentsResourceAsyncWithHttpInfo
     *
     * Update a supplier invoice payment
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  \FortnoxApi\Model\SupplierInvoicePaymentWrap $supplier_invoice_payment to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSupplierInvoicePaymentsResourceAsyncWithHttpInfo($number, $supplier_invoice_payment = null, string $contentType = self::contentTypes['updateSupplierInvoicePaymentsResource'][0])
    {
        $returnType = '\FortnoxApi\Model\SupplierInvoicePaymentWrap';
        $request = $this->updateSupplierInvoicePaymentsResourceRequest($number, $supplier_invoice_payment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSupplierInvoicePaymentsResource'
     *
     * @param  int $number identifies the supplier invoice payment (required)
     * @param  \FortnoxApi\Model\SupplierInvoicePaymentWrap $supplier_invoice_payment to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSupplierInvoicePaymentsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSupplierInvoicePaymentsResourceRequest($number, $supplier_invoice_payment = null, string $contentType = self::contentTypes['updateSupplierInvoicePaymentsResource'][0])
    {

        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling updateSupplierInvoicePaymentsResource'
            );
        }



        $resourcePath = '/3/supplierinvoicepayments/{Number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'Number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($supplier_invoice_payment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($supplier_invoice_payment));
            } else {
                $httpBody = $supplier_invoice_payment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
