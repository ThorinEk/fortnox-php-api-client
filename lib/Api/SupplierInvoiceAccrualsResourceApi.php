<?php
/**
 * SupplierInvoiceAccrualsResourceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [Guides & Good to Know section](https://www.fortnox.se/developer/guides-and-good-to-know/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit per access-token is 25 requests per 5 seconds. This equals to 300 requests per minute.  [Read more about this here.](https://www.fortnox.se/developer/guides-and-good-to-know/rate-limits-for-fortnox-api/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://www.fortnox.se/developer/guides-and-good-to-know/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * SupplierInvoiceAccrualsResourceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SupplierInvoiceAccrualsResourceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createSupplierInvoiceAccrualsResource' => [
            'application/json',
        ],
        'getSupplierInvoiceAccrualsResource' => [
            'application/json',
        ],
        'listSupplierInvoiceAccrualsResource' => [
            'application/json',
        ],
        'removeSupplierInvoiceAccrualsResource' => [
            'application/json',
        ],
        'updateSupplierInvoiceAccrualsResource' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createSupplierInvoiceAccrualsResource
     *
     * Create a supplier invoice accrual
     *
     * @param  \OpenAPI\Client\Model\SupplierInvoiceAccrualWrap $supplier_invoice_accrual to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SupplierInvoiceAccrualWrap
     */
    public function createSupplierInvoiceAccrualsResource($supplier_invoice_accrual = null, string $contentType = self::contentTypes['createSupplierInvoiceAccrualsResource'][0])
    {
        list($response) = $this->createSupplierInvoiceAccrualsResourceWithHttpInfo($supplier_invoice_accrual, $contentType);
        return $response;
    }

    /**
     * Operation createSupplierInvoiceAccrualsResourceWithHttpInfo
     *
     * Create a supplier invoice accrual
     *
     * @param  \OpenAPI\Client\Model\SupplierInvoiceAccrualWrap $supplier_invoice_accrual to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SupplierInvoiceAccrualWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSupplierInvoiceAccrualsResourceWithHttpInfo($supplier_invoice_accrual = null, string $contentType = self::contentTypes['createSupplierInvoiceAccrualsResource'][0])
    {
        $request = $this->createSupplierInvoiceAccrualsResourceRequest($supplier_invoice_accrual, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SupplierInvoiceAccrualWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SupplierInvoiceAccrualWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SupplierInvoiceAccrualWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SupplierInvoiceAccrualWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SupplierInvoiceAccrualWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSupplierInvoiceAccrualsResourceAsync
     *
     * Create a supplier invoice accrual
     *
     * @param  \OpenAPI\Client\Model\SupplierInvoiceAccrualWrap $supplier_invoice_accrual to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSupplierInvoiceAccrualsResourceAsync($supplier_invoice_accrual = null, string $contentType = self::contentTypes['createSupplierInvoiceAccrualsResource'][0])
    {
        return $this->createSupplierInvoiceAccrualsResourceAsyncWithHttpInfo($supplier_invoice_accrual, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSupplierInvoiceAccrualsResourceAsyncWithHttpInfo
     *
     * Create a supplier invoice accrual
     *
     * @param  \OpenAPI\Client\Model\SupplierInvoiceAccrualWrap $supplier_invoice_accrual to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSupplierInvoiceAccrualsResourceAsyncWithHttpInfo($supplier_invoice_accrual = null, string $contentType = self::contentTypes['createSupplierInvoiceAccrualsResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SupplierInvoiceAccrualWrap';
        $request = $this->createSupplierInvoiceAccrualsResourceRequest($supplier_invoice_accrual, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSupplierInvoiceAccrualsResource'
     *
     * @param  \OpenAPI\Client\Model\SupplierInvoiceAccrualWrap $supplier_invoice_accrual to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSupplierInvoiceAccrualsResourceRequest($supplier_invoice_accrual = null, string $contentType = self::contentTypes['createSupplierInvoiceAccrualsResource'][0])
    {



        $resourcePath = '/3/supplierinvoiceaccruals/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($supplier_invoice_accrual)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($supplier_invoice_accrual));
            } else {
                $httpBody = $supplier_invoice_accrual;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSupplierInvoiceAccrualsResource
     *
     * Retrieve a single supplier invoice accrual
     *
     * @param  int $supplier_invoice_number identifies the supplier invoice accrual (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SupplierInvoiceAccrualWrap
     */
    public function getSupplierInvoiceAccrualsResource($supplier_invoice_number, string $contentType = self::contentTypes['getSupplierInvoiceAccrualsResource'][0])
    {
        list($response) = $this->getSupplierInvoiceAccrualsResourceWithHttpInfo($supplier_invoice_number, $contentType);
        return $response;
    }

    /**
     * Operation getSupplierInvoiceAccrualsResourceWithHttpInfo
     *
     * Retrieve a single supplier invoice accrual
     *
     * @param  int $supplier_invoice_number identifies the supplier invoice accrual (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SupplierInvoiceAccrualWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSupplierInvoiceAccrualsResourceWithHttpInfo($supplier_invoice_number, string $contentType = self::contentTypes['getSupplierInvoiceAccrualsResource'][0])
    {
        $request = $this->getSupplierInvoiceAccrualsResourceRequest($supplier_invoice_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SupplierInvoiceAccrualWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SupplierInvoiceAccrualWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SupplierInvoiceAccrualWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SupplierInvoiceAccrualWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SupplierInvoiceAccrualWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSupplierInvoiceAccrualsResourceAsync
     *
     * Retrieve a single supplier invoice accrual
     *
     * @param  int $supplier_invoice_number identifies the supplier invoice accrual (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplierInvoiceAccrualsResourceAsync($supplier_invoice_number, string $contentType = self::contentTypes['getSupplierInvoiceAccrualsResource'][0])
    {
        return $this->getSupplierInvoiceAccrualsResourceAsyncWithHttpInfo($supplier_invoice_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSupplierInvoiceAccrualsResourceAsyncWithHttpInfo
     *
     * Retrieve a single supplier invoice accrual
     *
     * @param  int $supplier_invoice_number identifies the supplier invoice accrual (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplierInvoiceAccrualsResourceAsyncWithHttpInfo($supplier_invoice_number, string $contentType = self::contentTypes['getSupplierInvoiceAccrualsResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SupplierInvoiceAccrualWrap';
        $request = $this->getSupplierInvoiceAccrualsResourceRequest($supplier_invoice_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSupplierInvoiceAccrualsResource'
     *
     * @param  int $supplier_invoice_number identifies the supplier invoice accrual (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSupplierInvoiceAccrualsResourceRequest($supplier_invoice_number, string $contentType = self::contentTypes['getSupplierInvoiceAccrualsResource'][0])
    {

        // verify the required parameter 'supplier_invoice_number' is set
        if ($supplier_invoice_number === null || (is_array($supplier_invoice_number) && count($supplier_invoice_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_invoice_number when calling getSupplierInvoiceAccrualsResource'
            );
        }


        $resourcePath = '/3/supplierinvoiceaccruals/{SupplierInvoiceNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($supplier_invoice_number !== null) {
            $resourcePath = str_replace(
                '{' . 'SupplierInvoiceNumber' . '}',
                ObjectSerializer::toPathValue($supplier_invoice_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSupplierInvoiceAccrualsResource
     *
     * Retrieve a list of supplier invoice accruals
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SupplierInvoiceAccrualListItemList
     */
    public function listSupplierInvoiceAccrualsResource(string $contentType = self::contentTypes['listSupplierInvoiceAccrualsResource'][0])
    {
        list($response) = $this->listSupplierInvoiceAccrualsResourceWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation listSupplierInvoiceAccrualsResourceWithHttpInfo
     *
     * Retrieve a list of supplier invoice accruals
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SupplierInvoiceAccrualListItemList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSupplierInvoiceAccrualsResourceWithHttpInfo(string $contentType = self::contentTypes['listSupplierInvoiceAccrualsResource'][0])
    {
        $request = $this->listSupplierInvoiceAccrualsResourceRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SupplierInvoiceAccrualListItemList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SupplierInvoiceAccrualListItemList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SupplierInvoiceAccrualListItemList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SupplierInvoiceAccrualListItemList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SupplierInvoiceAccrualListItemList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listSupplierInvoiceAccrualsResourceAsync
     *
     * Retrieve a list of supplier invoice accruals
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSupplierInvoiceAccrualsResourceAsync(string $contentType = self::contentTypes['listSupplierInvoiceAccrualsResource'][0])
    {
        return $this->listSupplierInvoiceAccrualsResourceAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSupplierInvoiceAccrualsResourceAsyncWithHttpInfo
     *
     * Retrieve a list of supplier invoice accruals
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSupplierInvoiceAccrualsResourceAsyncWithHttpInfo(string $contentType = self::contentTypes['listSupplierInvoiceAccrualsResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SupplierInvoiceAccrualListItemList';
        $request = $this->listSupplierInvoiceAccrualsResourceRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSupplierInvoiceAccrualsResource'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSupplierInvoiceAccrualsResourceRequest(string $contentType = self::contentTypes['listSupplierInvoiceAccrualsResource'][0])
    {


        $resourcePath = '/3/supplierinvoiceaccruals/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeSupplierInvoiceAccrualsResource
     *
     * Remove a supplier invoice accrual
     *
     * @param  int $supplier_invoice_number identifies the supplier invoice accrual (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeSupplierInvoiceAccrualsResource($supplier_invoice_number, string $contentType = self::contentTypes['removeSupplierInvoiceAccrualsResource'][0])
    {
        $this->removeSupplierInvoiceAccrualsResourceWithHttpInfo($supplier_invoice_number, $contentType);
    }

    /**
     * Operation removeSupplierInvoiceAccrualsResourceWithHttpInfo
     *
     * Remove a supplier invoice accrual
     *
     * @param  int $supplier_invoice_number identifies the supplier invoice accrual (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeSupplierInvoiceAccrualsResourceWithHttpInfo($supplier_invoice_number, string $contentType = self::contentTypes['removeSupplierInvoiceAccrualsResource'][0])
    {
        $request = $this->removeSupplierInvoiceAccrualsResourceRequest($supplier_invoice_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeSupplierInvoiceAccrualsResourceAsync
     *
     * Remove a supplier invoice accrual
     *
     * @param  int $supplier_invoice_number identifies the supplier invoice accrual (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeSupplierInvoiceAccrualsResourceAsync($supplier_invoice_number, string $contentType = self::contentTypes['removeSupplierInvoiceAccrualsResource'][0])
    {
        return $this->removeSupplierInvoiceAccrualsResourceAsyncWithHttpInfo($supplier_invoice_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeSupplierInvoiceAccrualsResourceAsyncWithHttpInfo
     *
     * Remove a supplier invoice accrual
     *
     * @param  int $supplier_invoice_number identifies the supplier invoice accrual (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeSupplierInvoiceAccrualsResourceAsyncWithHttpInfo($supplier_invoice_number, string $contentType = self::contentTypes['removeSupplierInvoiceAccrualsResource'][0])
    {
        $returnType = '';
        $request = $this->removeSupplierInvoiceAccrualsResourceRequest($supplier_invoice_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeSupplierInvoiceAccrualsResource'
     *
     * @param  int $supplier_invoice_number identifies the supplier invoice accrual (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeSupplierInvoiceAccrualsResourceRequest($supplier_invoice_number, string $contentType = self::contentTypes['removeSupplierInvoiceAccrualsResource'][0])
    {

        // verify the required parameter 'supplier_invoice_number' is set
        if ($supplier_invoice_number === null || (is_array($supplier_invoice_number) && count($supplier_invoice_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_invoice_number when calling removeSupplierInvoiceAccrualsResource'
            );
        }


        $resourcePath = '/3/supplierinvoiceaccruals/{SupplierInvoiceNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($supplier_invoice_number !== null) {
            $resourcePath = str_replace(
                '{' . 'SupplierInvoiceNumber' . '}',
                ObjectSerializer::toPathValue($supplier_invoice_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSupplierInvoiceAccrualsResource
     *
     * Update a supplier invoice accrual
     *
     * @param  int $supplier_invoice_number identifies the supplier invoice accrual (required)
     * @param  \OpenAPI\Client\Model\SupplierInvoiceAccrualWrap $supplier_invoice_accrual to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SupplierInvoiceAccrualWrap
     */
    public function updateSupplierInvoiceAccrualsResource($supplier_invoice_number, $supplier_invoice_accrual = null, string $contentType = self::contentTypes['updateSupplierInvoiceAccrualsResource'][0])
    {
        list($response) = $this->updateSupplierInvoiceAccrualsResourceWithHttpInfo($supplier_invoice_number, $supplier_invoice_accrual, $contentType);
        return $response;
    }

    /**
     * Operation updateSupplierInvoiceAccrualsResourceWithHttpInfo
     *
     * Update a supplier invoice accrual
     *
     * @param  int $supplier_invoice_number identifies the supplier invoice accrual (required)
     * @param  \OpenAPI\Client\Model\SupplierInvoiceAccrualWrap $supplier_invoice_accrual to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SupplierInvoiceAccrualWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSupplierInvoiceAccrualsResourceWithHttpInfo($supplier_invoice_number, $supplier_invoice_accrual = null, string $contentType = self::contentTypes['updateSupplierInvoiceAccrualsResource'][0])
    {
        $request = $this->updateSupplierInvoiceAccrualsResourceRequest($supplier_invoice_number, $supplier_invoice_accrual, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SupplierInvoiceAccrualWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SupplierInvoiceAccrualWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SupplierInvoiceAccrualWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SupplierInvoiceAccrualWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SupplierInvoiceAccrualWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSupplierInvoiceAccrualsResourceAsync
     *
     * Update a supplier invoice accrual
     *
     * @param  int $supplier_invoice_number identifies the supplier invoice accrual (required)
     * @param  \OpenAPI\Client\Model\SupplierInvoiceAccrualWrap $supplier_invoice_accrual to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSupplierInvoiceAccrualsResourceAsync($supplier_invoice_number, $supplier_invoice_accrual = null, string $contentType = self::contentTypes['updateSupplierInvoiceAccrualsResource'][0])
    {
        return $this->updateSupplierInvoiceAccrualsResourceAsyncWithHttpInfo($supplier_invoice_number, $supplier_invoice_accrual, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSupplierInvoiceAccrualsResourceAsyncWithHttpInfo
     *
     * Update a supplier invoice accrual
     *
     * @param  int $supplier_invoice_number identifies the supplier invoice accrual (required)
     * @param  \OpenAPI\Client\Model\SupplierInvoiceAccrualWrap $supplier_invoice_accrual to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSupplierInvoiceAccrualsResourceAsyncWithHttpInfo($supplier_invoice_number, $supplier_invoice_accrual = null, string $contentType = self::contentTypes['updateSupplierInvoiceAccrualsResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SupplierInvoiceAccrualWrap';
        $request = $this->updateSupplierInvoiceAccrualsResourceRequest($supplier_invoice_number, $supplier_invoice_accrual, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSupplierInvoiceAccrualsResource'
     *
     * @param  int $supplier_invoice_number identifies the supplier invoice accrual (required)
     * @param  \OpenAPI\Client\Model\SupplierInvoiceAccrualWrap $supplier_invoice_accrual to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSupplierInvoiceAccrualsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSupplierInvoiceAccrualsResourceRequest($supplier_invoice_number, $supplier_invoice_accrual = null, string $contentType = self::contentTypes['updateSupplierInvoiceAccrualsResource'][0])
    {

        // verify the required parameter 'supplier_invoice_number' is set
        if ($supplier_invoice_number === null || (is_array($supplier_invoice_number) && count($supplier_invoice_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_invoice_number when calling updateSupplierInvoiceAccrualsResource'
            );
        }



        $resourcePath = '/3/supplierinvoiceaccruals/{SupplierInvoiceNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($supplier_invoice_number !== null) {
            $resourcePath = str_replace(
                '{' . 'SupplierInvoiceNumber' . '}',
                ObjectSerializer::toPathValue($supplier_invoice_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($supplier_invoice_accrual)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($supplier_invoice_accrual));
            } else {
                $httpBody = $supplier_invoice_accrual;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
