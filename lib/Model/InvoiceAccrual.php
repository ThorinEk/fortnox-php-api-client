<?php
/**
 * InvoiceAccrual
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [Guides & Good to Know section](https://www.fortnox.se/developer/guides-and-good-to-know/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit per access-token is 25 requests per 5 seconds. This equals to 300 requests per minute.  [Read more about this here.](https://www.fortnox.se/developer/guides-and-good-to-know/rate-limits-for-fortnox-api/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://www.fortnox.se/developer/guides-and-good-to-know/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InvoiceAccrual Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvoiceAccrual implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceAccrual';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'at_url' => 'string',
        'accrual_account' => 'int',
        'description' => 'string',
        'end_date' => '\DateTime',
        'invoice_accrual_rows' => '\OpenAPI\Client\Model\InvoiceAccrualInvoiceAccrualRow[]',
        'invoice_number' => 'int',
        'period' => 'string',
        'revenue_account' => 'int',
        'start_date' => '\DateTime',
        'times' => 'int',
        'total' => 'float',
        'vat_included' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'at_url' => null,
        'accrual_account' => 'int32',
        'description' => null,
        'end_date' => 'date',
        'invoice_accrual_rows' => null,
        'invoice_number' => 'int32',
        'period' => null,
        'revenue_account' => 'int32',
        'start_date' => 'date',
        'times' => 'int32',
        'total' => 'double',
        'vat_included' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'at_url' => false,
		'accrual_account' => false,
		'description' => false,
		'end_date' => false,
		'invoice_accrual_rows' => false,
		'invoice_number' => false,
		'period' => false,
		'revenue_account' => false,
		'start_date' => false,
		'times' => false,
		'total' => false,
		'vat_included' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'at_url' => '@url',
        'accrual_account' => 'AccrualAccount',
        'description' => 'Description',
        'end_date' => 'EndDate',
        'invoice_accrual_rows' => 'InvoiceAccrualRows',
        'invoice_number' => 'InvoiceNumber',
        'period' => 'Period',
        'revenue_account' => 'RevenueAccount',
        'start_date' => 'StartDate',
        'times' => 'Times',
        'total' => 'Total',
        'vat_included' => 'VATIncluded'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'at_url' => 'setAtUrl',
        'accrual_account' => 'setAccrualAccount',
        'description' => 'setDescription',
        'end_date' => 'setEndDate',
        'invoice_accrual_rows' => 'setInvoiceAccrualRows',
        'invoice_number' => 'setInvoiceNumber',
        'period' => 'setPeriod',
        'revenue_account' => 'setRevenueAccount',
        'start_date' => 'setStartDate',
        'times' => 'setTimes',
        'total' => 'setTotal',
        'vat_included' => 'setVatIncluded'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'at_url' => 'getAtUrl',
        'accrual_account' => 'getAccrualAccount',
        'description' => 'getDescription',
        'end_date' => 'getEndDate',
        'invoice_accrual_rows' => 'getInvoiceAccrualRows',
        'invoice_number' => 'getInvoiceNumber',
        'period' => 'getPeriod',
        'revenue_account' => 'getRevenueAccount',
        'start_date' => 'getStartDate',
        'times' => 'getTimes',
        'total' => 'getTotal',
        'vat_included' => 'getVatIncluded'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PERIOD_MONTHLY = 'MONTHLY';
    public const PERIOD_BIMONTHLY = 'BIMONTHLY';
    public const PERIOD_QUARTERLY = 'QUARTERLY';
    public const PERIOD_SEMIANNUALLY = 'SEMIANNUALLY';
    public const PERIOD_ANNUALLY = 'ANNUALLY';
    public const PERIOD__1_MONTHS = '1_MONTHS';
    public const PERIOD__2_MONTHS = '2_MONTHS';
    public const PERIOD__3_MONTHS = '3_MONTHS';
    public const PERIOD__6_MONTHS = '6_MONTHS';
    public const PERIOD__12_MONTHS = '12_MONTHS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPeriodAllowableValues()
    {
        return [
            self::PERIOD_MONTHLY,
            self::PERIOD_BIMONTHLY,
            self::PERIOD_QUARTERLY,
            self::PERIOD_SEMIANNUALLY,
            self::PERIOD_ANNUALLY,
            self::PERIOD__1_MONTHS,
            self::PERIOD__2_MONTHS,
            self::PERIOD__3_MONTHS,
            self::PERIOD__6_MONTHS,
            self::PERIOD__12_MONTHS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('at_url', $data ?? [], null);
        $this->setIfExists('accrual_account', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('invoice_accrual_rows', $data ?? [], null);
        $this->setIfExists('invoice_number', $data ?? [], null);
        $this->setIfExists('period', $data ?? [], null);
        $this->setIfExists('revenue_account', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('times', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('vat_included', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['accrual_account'] === null) {
            $invalidProperties[] = "'accrual_account' can't be null";
        }
        if (($this->container['accrual_account'] > 9999)) {
            $invalidProperties[] = "invalid value for 'accrual_account', must be smaller than or equal to 9999.";
        }

        if (($this->container['accrual_account'] < 1000)) {
            $invalidProperties[] = "invalid value for 'accrual_account', must be bigger than or equal to 1000.";
        }

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalidProperties[] = "'end_date' can't be null";
        }
        if ($this->container['invoice_accrual_rows'] === null) {
            $invalidProperties[] = "'invoice_accrual_rows' can't be null";
        }
        if ((count($this->container['invoice_accrual_rows']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'invoice_accrual_rows', number of items must be less than or equal to 2147483647.";
        }

        if ((count($this->container['invoice_accrual_rows']) < 2)) {
            $invalidProperties[] = "invalid value for 'invoice_accrual_rows', number of items must be greater than or equal to 2.";
        }

        if ($this->container['invoice_number'] === null) {
            $invalidProperties[] = "'invoice_number' can't be null";
        }
        $allowedValues = $this->getPeriodAllowableValues();
        if (!is_null($this->container['period']) && !in_array($this->container['period'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'period', must be one of '%s'",
                $this->container['period'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['revenue_account'] === null) {
            $invalidProperties[] = "'revenue_account' can't be null";
        }
        if (($this->container['revenue_account'] > 9999)) {
            $invalidProperties[] = "invalid value for 'revenue_account', must be smaller than or equal to 9999.";
        }

        if (($this->container['revenue_account'] < 1000)) {
            $invalidProperties[] = "invalid value for 'revenue_account', must be bigger than or equal to 1000.";
        }

        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ($this->container['total'] === null) {
            $invalidProperties[] = "'total' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets at_url
     *
     * @return string|null
     */
    public function getAtUrl()
    {
        return $this->container['at_url'];
    }

    /**
     * Sets at_url
     *
     * @param string|null $at_url at_url
     *
     * @return self
     */
    public function setAtUrl($at_url)
    {
        if (is_null($at_url)) {
            throw new \InvalidArgumentException('non-nullable at_url cannot be null');
        }
        $this->container['at_url'] = $at_url;

        return $this;
    }

    /**
     * Gets accrual_account
     *
     * @return int
     */
    public function getAccrualAccount()
    {
        return $this->container['accrual_account'];
    }

    /**
     * Sets accrual_account
     *
     * @param int $accrual_account accrual_account
     *
     * @return self
     */
    public function setAccrualAccount($accrual_account)
    {
        if (is_null($accrual_account)) {
            throw new \InvalidArgumentException('non-nullable accrual_account cannot be null');
        }

        if (($accrual_account > 9999)) {
            throw new \InvalidArgumentException('invalid value for $accrual_account when calling InvoiceAccrual., must be smaller than or equal to 9999.');
        }
        if (($accrual_account < 1000)) {
            throw new \InvalidArgumentException('invalid value for $accrual_account when calling InvoiceAccrual., must be bigger than or equal to 1000.');
        }

        $this->container['accrual_account'] = $accrual_account;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets invoice_accrual_rows
     *
     * @return \OpenAPI\Client\Model\InvoiceAccrualInvoiceAccrualRow[]
     */
    public function getInvoiceAccrualRows()
    {
        return $this->container['invoice_accrual_rows'];
    }

    /**
     * Sets invoice_accrual_rows
     *
     * @param \OpenAPI\Client\Model\InvoiceAccrualInvoiceAccrualRow[] $invoice_accrual_rows invoice_accrual_rows
     *
     * @return self
     */
    public function setInvoiceAccrualRows($invoice_accrual_rows)
    {
        if (is_null($invoice_accrual_rows)) {
            throw new \InvalidArgumentException('non-nullable invoice_accrual_rows cannot be null');
        }

        if ((count($invoice_accrual_rows) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $invoice_accrual_rows when calling InvoiceAccrual., number of items must be less than or equal to 2147483647.');
        }
        if ((count($invoice_accrual_rows) < 2)) {
            throw new \InvalidArgumentException('invalid length for $invoice_accrual_rows when calling InvoiceAccrual., number of items must be greater than or equal to 2.');
        }
        $this->container['invoice_accrual_rows'] = $invoice_accrual_rows;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return int
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param int $invoice_number invoice_number
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        if (is_null($invoice_number)) {
            throw new \InvalidArgumentException('non-nullable invoice_number cannot be null');
        }
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets period
     *
     * @return string|null
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param string|null $period period
     *
     * @return self
     */
    public function setPeriod($period)
    {
        if (is_null($period)) {
            throw new \InvalidArgumentException('non-nullable period cannot be null');
        }
        $allowedValues = $this->getPeriodAllowableValues();
        if (!in_array($period, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'period', must be one of '%s'",
                    $period,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets revenue_account
     *
     * @return int
     */
    public function getRevenueAccount()
    {
        return $this->container['revenue_account'];
    }

    /**
     * Sets revenue_account
     *
     * @param int $revenue_account revenue_account
     *
     * @return self
     */
    public function setRevenueAccount($revenue_account)
    {
        if (is_null($revenue_account)) {
            throw new \InvalidArgumentException('non-nullable revenue_account cannot be null');
        }

        if (($revenue_account > 9999)) {
            throw new \InvalidArgumentException('invalid value for $revenue_account when calling InvoiceAccrual., must be smaller than or equal to 9999.');
        }
        if (($revenue_account < 1000)) {
            throw new \InvalidArgumentException('invalid value for $revenue_account when calling InvoiceAccrual., must be bigger than or equal to 1000.');
        }

        $this->container['revenue_account'] = $revenue_account;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets times
     *
     * @return int|null
     */
    public function getTimes()
    {
        return $this->container['times'];
    }

    /**
     * Sets times
     *
     * @param int|null $times times
     *
     * @return self
     */
    public function setTimes($times)
    {
        if (is_null($times)) {
            throw new \InvalidArgumentException('non-nullable times cannot be null');
        }
        $this->container['times'] = $times;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float $total total
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets vat_included
     *
     * @return bool|null
     */
    public function getVatIncluded()
    {
        return $this->container['vat_included'];
    }

    /**
     * Sets vat_included
     *
     * @param bool|null $vat_included vat_included
     *
     * @return self
     */
    public function setVatIncluded($vat_included)
    {
        if (is_null($vat_included)) {
            throw new \InvalidArgumentException('non-nullable vat_included cannot be null');
        }
        $this->container['vat_included'] = $vat_included;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


