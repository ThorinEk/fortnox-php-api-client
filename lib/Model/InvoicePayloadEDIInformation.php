<?php
/**
 * InvoicePayloadEDIInformation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [Guides & Good to Know section](https://www.fortnox.se/developer/guides-and-good-to-know/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit per access-token is 25 requests per 5 seconds. This equals to 300 requests per minute.  [Read more about this here.](https://www.fortnox.se/developer/guides-and-good-to-know/rate-limits-for-fortnox-api/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://www.fortnox.se/developer/guides-and-good-to-know/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InvoicePayloadEDIInformation Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvoicePayloadEDIInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoicePayload_EDIInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'edi_global_location_number' => 'string',
        'edi_global_location_number_delivery' => 'string',
        'edi_invoice_extra1' => 'string',
        'edi_invoice_extra2' => 'string',
        'edi_our_electronic_reference' => 'string',
        'edi_your_electronic_reference' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'edi_global_location_number' => null,
        'edi_global_location_number_delivery' => null,
        'edi_invoice_extra1' => null,
        'edi_invoice_extra2' => null,
        'edi_our_electronic_reference' => null,
        'edi_your_electronic_reference' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'edi_global_location_number' => false,
		'edi_global_location_number_delivery' => false,
		'edi_invoice_extra1' => false,
		'edi_invoice_extra2' => false,
		'edi_our_electronic_reference' => false,
		'edi_your_electronic_reference' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'edi_global_location_number' => 'EDIGlobalLocationNumber',
        'edi_global_location_number_delivery' => 'EDIGlobalLocationNumberDelivery',
        'edi_invoice_extra1' => 'EDIInvoiceExtra1',
        'edi_invoice_extra2' => 'EDIInvoiceExtra2',
        'edi_our_electronic_reference' => 'EDIOurElectronicReference',
        'edi_your_electronic_reference' => 'EDIYourElectronicReference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'edi_global_location_number' => 'setEdiGlobalLocationNumber',
        'edi_global_location_number_delivery' => 'setEdiGlobalLocationNumberDelivery',
        'edi_invoice_extra1' => 'setEdiInvoiceExtra1',
        'edi_invoice_extra2' => 'setEdiInvoiceExtra2',
        'edi_our_electronic_reference' => 'setEdiOurElectronicReference',
        'edi_your_electronic_reference' => 'setEdiYourElectronicReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'edi_global_location_number' => 'getEdiGlobalLocationNumber',
        'edi_global_location_number_delivery' => 'getEdiGlobalLocationNumberDelivery',
        'edi_invoice_extra1' => 'getEdiInvoiceExtra1',
        'edi_invoice_extra2' => 'getEdiInvoiceExtra2',
        'edi_our_electronic_reference' => 'getEdiOurElectronicReference',
        'edi_your_electronic_reference' => 'getEdiYourElectronicReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('edi_global_location_number', $data ?? [], null);
        $this->setIfExists('edi_global_location_number_delivery', $data ?? [], null);
        $this->setIfExists('edi_invoice_extra1', $data ?? [], null);
        $this->setIfExists('edi_invoice_extra2', $data ?? [], null);
        $this->setIfExists('edi_our_electronic_reference', $data ?? [], null);
        $this->setIfExists('edi_your_electronic_reference', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['edi_global_location_number']) && (mb_strlen($this->container['edi_global_location_number']) > 13)) {
            $invalidProperties[] = "invalid value for 'edi_global_location_number', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['edi_global_location_number']) && (mb_strlen($this->container['edi_global_location_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'edi_global_location_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['edi_global_location_number_delivery']) && (mb_strlen($this->container['edi_global_location_number_delivery']) > 13)) {
            $invalidProperties[] = "invalid value for 'edi_global_location_number_delivery', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['edi_global_location_number_delivery']) && (mb_strlen($this->container['edi_global_location_number_delivery']) < 0)) {
            $invalidProperties[] = "invalid value for 'edi_global_location_number_delivery', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets edi_global_location_number
     *
     * @return string|null
     */
    public function getEdiGlobalLocationNumber()
    {
        return $this->container['edi_global_location_number'];
    }

    /**
     * Sets edi_global_location_number
     *
     * @param string|null $edi_global_location_number edi_global_location_number
     *
     * @return self
     */
    public function setEdiGlobalLocationNumber($edi_global_location_number)
    {
        if (is_null($edi_global_location_number)) {
            throw new \InvalidArgumentException('non-nullable edi_global_location_number cannot be null');
        }
        if ((mb_strlen($edi_global_location_number) > 13)) {
            throw new \InvalidArgumentException('invalid length for $edi_global_location_number when calling InvoicePayloadEDIInformation., must be smaller than or equal to 13.');
        }
        if ((mb_strlen($edi_global_location_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $edi_global_location_number when calling InvoicePayloadEDIInformation., must be bigger than or equal to 0.');
        }

        $this->container['edi_global_location_number'] = $edi_global_location_number;

        return $this;
    }

    /**
     * Gets edi_global_location_number_delivery
     *
     * @return string|null
     */
    public function getEdiGlobalLocationNumberDelivery()
    {
        return $this->container['edi_global_location_number_delivery'];
    }

    /**
     * Sets edi_global_location_number_delivery
     *
     * @param string|null $edi_global_location_number_delivery edi_global_location_number_delivery
     *
     * @return self
     */
    public function setEdiGlobalLocationNumberDelivery($edi_global_location_number_delivery)
    {
        if (is_null($edi_global_location_number_delivery)) {
            throw new \InvalidArgumentException('non-nullable edi_global_location_number_delivery cannot be null');
        }
        if ((mb_strlen($edi_global_location_number_delivery) > 13)) {
            throw new \InvalidArgumentException('invalid length for $edi_global_location_number_delivery when calling InvoicePayloadEDIInformation., must be smaller than or equal to 13.');
        }
        if ((mb_strlen($edi_global_location_number_delivery) < 0)) {
            throw new \InvalidArgumentException('invalid length for $edi_global_location_number_delivery when calling InvoicePayloadEDIInformation., must be bigger than or equal to 0.');
        }

        $this->container['edi_global_location_number_delivery'] = $edi_global_location_number_delivery;

        return $this;
    }

    /**
     * Gets edi_invoice_extra1
     *
     * @return string|null
     */
    public function getEdiInvoiceExtra1()
    {
        return $this->container['edi_invoice_extra1'];
    }

    /**
     * Sets edi_invoice_extra1
     *
     * @param string|null $edi_invoice_extra1 edi_invoice_extra1
     *
     * @return self
     */
    public function setEdiInvoiceExtra1($edi_invoice_extra1)
    {
        if (is_null($edi_invoice_extra1)) {
            throw new \InvalidArgumentException('non-nullable edi_invoice_extra1 cannot be null');
        }
        $this->container['edi_invoice_extra1'] = $edi_invoice_extra1;

        return $this;
    }

    /**
     * Gets edi_invoice_extra2
     *
     * @return string|null
     */
    public function getEdiInvoiceExtra2()
    {
        return $this->container['edi_invoice_extra2'];
    }

    /**
     * Sets edi_invoice_extra2
     *
     * @param string|null $edi_invoice_extra2 edi_invoice_extra2
     *
     * @return self
     */
    public function setEdiInvoiceExtra2($edi_invoice_extra2)
    {
        if (is_null($edi_invoice_extra2)) {
            throw new \InvalidArgumentException('non-nullable edi_invoice_extra2 cannot be null');
        }
        $this->container['edi_invoice_extra2'] = $edi_invoice_extra2;

        return $this;
    }

    /**
     * Gets edi_our_electronic_reference
     *
     * @return string|null
     */
    public function getEdiOurElectronicReference()
    {
        return $this->container['edi_our_electronic_reference'];
    }

    /**
     * Sets edi_our_electronic_reference
     *
     * @param string|null $edi_our_electronic_reference edi_our_electronic_reference
     *
     * @return self
     */
    public function setEdiOurElectronicReference($edi_our_electronic_reference)
    {
        if (is_null($edi_our_electronic_reference)) {
            throw new \InvalidArgumentException('non-nullable edi_our_electronic_reference cannot be null');
        }
        $this->container['edi_our_electronic_reference'] = $edi_our_electronic_reference;

        return $this;
    }

    /**
     * Gets edi_your_electronic_reference
     *
     * @return string|null
     */
    public function getEdiYourElectronicReference()
    {
        return $this->container['edi_your_electronic_reference'];
    }

    /**
     * Sets edi_your_electronic_reference
     *
     * @param string|null $edi_your_electronic_reference edi_your_electronic_reference
     *
     * @return self
     */
    public function setEdiYourElectronicReference($edi_your_electronic_reference)
    {
        if (is_null($edi_your_electronic_reference)) {
            throw new \InvalidArgumentException('non-nullable edi_your_electronic_reference cannot be null');
        }
        $this->container['edi_your_electronic_reference'] = $edi_your_electronic_reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


