<?php
/**
 * PricesResourceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  FortnoxApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [Guides & Good to Know section](https://www.fortnox.se/developer/guides-and-good-to-know/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit per access-token is 25 requests per 5 seconds. This equals to 300 requests per minute.  [Read more about this here.](https://www.fortnox.se/developer/guides-and-good-to-know/rate-limits-for-fortnox-api/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://www.fortnox.se/developer/guides-and-good-to-know/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FortnoxApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FortnoxApi\ApiException;
use FortnoxApi\Configuration;
use FortnoxApi\HeaderSelector;
use FortnoxApi\ObjectSerializer;

/**
 * PricesResourceApi Class Doc Comment
 *
 * @category Class
 * @package  FortnoxApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PricesResourceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createPricesResource' => [
            'application/json',
        ],
        'getFirstPrice' => [
            'application/json',
        ],
        'getPricesResource' => [
            'application/json',
        ],
        'listPricesResource' => [
            'application/json',
        ],
        'removePricesResource' => [
            'application/json',
        ],
        'updatePricesResource' => [
            'application/json',
        ],
        'updatePricesResource1' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createPricesResource
     *
     * Create a price
     *
     * @param  \FortnoxApi\Model\PriceWrap $price price to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPricesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\PriceWrap
     */
    public function createPricesResource($price = null, string $contentType = self::contentTypes['createPricesResource'][0])
    {
        list($response) = $this->createPricesResourceWithHttpInfo($price, $contentType);
        return $response;
    }

    /**
     * Operation createPricesResourceWithHttpInfo
     *
     * Create a price
     *
     * @param  \FortnoxApi\Model\PriceWrap $price price to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPricesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\PriceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPricesResourceWithHttpInfo($price = null, string $contentType = self::contentTypes['createPricesResource'][0])
    {
        $request = $this->createPricesResourceRequest($price, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\PriceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\PriceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\PriceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\PriceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\PriceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPricesResourceAsync
     *
     * Create a price
     *
     * @param  \FortnoxApi\Model\PriceWrap $price price to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPricesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPricesResourceAsync($price = null, string $contentType = self::contentTypes['createPricesResource'][0])
    {
        return $this->createPricesResourceAsyncWithHttpInfo($price, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPricesResourceAsyncWithHttpInfo
     *
     * Create a price
     *
     * @param  \FortnoxApi\Model\PriceWrap $price price to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPricesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPricesResourceAsyncWithHttpInfo($price = null, string $contentType = self::contentTypes['createPricesResource'][0])
    {
        $returnType = '\FortnoxApi\Model\PriceWrap';
        $request = $this->createPricesResourceRequest($price, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPricesResource'
     *
     * @param  \FortnoxApi\Model\PriceWrap $price price to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPricesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPricesResourceRequest($price = null, string $contentType = self::contentTypes['createPricesResource'][0])
    {



        $resourcePath = '/3/prices/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($price)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($price));
            } else {
                $httpBody = $price;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFirstPrice
     *
     * Retrieve the first price for the specified article
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFirstPrice'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\PriceWrap
     */
    public function getFirstPrice($price_list, $article_number, string $contentType = self::contentTypes['getFirstPrice'][0])
    {
        list($response) = $this->getFirstPriceWithHttpInfo($price_list, $article_number, $contentType);
        return $response;
    }

    /**
     * Operation getFirstPriceWithHttpInfo
     *
     * Retrieve the first price for the specified article
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFirstPrice'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\PriceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFirstPriceWithHttpInfo($price_list, $article_number, string $contentType = self::contentTypes['getFirstPrice'][0])
    {
        $request = $this->getFirstPriceRequest($price_list, $article_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\PriceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\PriceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\PriceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\PriceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\PriceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFirstPriceAsync
     *
     * Retrieve the first price for the specified article
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFirstPrice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFirstPriceAsync($price_list, $article_number, string $contentType = self::contentTypes['getFirstPrice'][0])
    {
        return $this->getFirstPriceAsyncWithHttpInfo($price_list, $article_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFirstPriceAsyncWithHttpInfo
     *
     * Retrieve the first price for the specified article
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFirstPrice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFirstPriceAsyncWithHttpInfo($price_list, $article_number, string $contentType = self::contentTypes['getFirstPrice'][0])
    {
        $returnType = '\FortnoxApi\Model\PriceWrap';
        $request = $this->getFirstPriceRequest($price_list, $article_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFirstPrice'
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFirstPrice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFirstPriceRequest($price_list, $article_number, string $contentType = self::contentTypes['getFirstPrice'][0])
    {

        // verify the required parameter 'price_list' is set
        if ($price_list === null || (is_array($price_list) && count($price_list) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_list when calling getFirstPrice'
            );
        }

        // verify the required parameter 'article_number' is set
        if ($article_number === null || (is_array($article_number) && count($article_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $article_number when calling getFirstPrice'
            );
        }


        $resourcePath = '/3/prices/{PriceList}/{ArticleNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($price_list !== null) {
            $resourcePath = str_replace(
                '{' . 'PriceList' . '}',
                ObjectSerializer::toPathValue($price_list),
                $resourcePath
            );
        }
        // path params
        if ($article_number !== null) {
            $resourcePath = str_replace(
                '{' . 'ArticleNumber' . '}',
                ObjectSerializer::toPathValue($article_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPricesResource
     *
     * Retrieve a price for a specified article
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article (required)
     * @param  float $from_quantity identifies from quantity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPricesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\PriceWrap
     */
    public function getPricesResource($price_list, $article_number, $from_quantity, string $contentType = self::contentTypes['getPricesResource'][0])
    {
        list($response) = $this->getPricesResourceWithHttpInfo($price_list, $article_number, $from_quantity, $contentType);
        return $response;
    }

    /**
     * Operation getPricesResourceWithHttpInfo
     *
     * Retrieve a price for a specified article
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article (required)
     * @param  float $from_quantity identifies from quantity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPricesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\PriceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPricesResourceWithHttpInfo($price_list, $article_number, $from_quantity, string $contentType = self::contentTypes['getPricesResource'][0])
    {
        $request = $this->getPricesResourceRequest($price_list, $article_number, $from_quantity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\PriceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\PriceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\PriceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\PriceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\PriceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPricesResourceAsync
     *
     * Retrieve a price for a specified article
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article (required)
     * @param  float $from_quantity identifies from quantity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPricesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPricesResourceAsync($price_list, $article_number, $from_quantity, string $contentType = self::contentTypes['getPricesResource'][0])
    {
        return $this->getPricesResourceAsyncWithHttpInfo($price_list, $article_number, $from_quantity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPricesResourceAsyncWithHttpInfo
     *
     * Retrieve a price for a specified article
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article (required)
     * @param  float $from_quantity identifies from quantity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPricesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPricesResourceAsyncWithHttpInfo($price_list, $article_number, $from_quantity, string $contentType = self::contentTypes['getPricesResource'][0])
    {
        $returnType = '\FortnoxApi\Model\PriceWrap';
        $request = $this->getPricesResourceRequest($price_list, $article_number, $from_quantity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPricesResource'
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article (required)
     * @param  float $from_quantity identifies from quantity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPricesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPricesResourceRequest($price_list, $article_number, $from_quantity, string $contentType = self::contentTypes['getPricesResource'][0])
    {

        // verify the required parameter 'price_list' is set
        if ($price_list === null || (is_array($price_list) && count($price_list) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_list when calling getPricesResource'
            );
        }

        // verify the required parameter 'article_number' is set
        if ($article_number === null || (is_array($article_number) && count($article_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $article_number when calling getPricesResource'
            );
        }

        // verify the required parameter 'from_quantity' is set
        if ($from_quantity === null || (is_array($from_quantity) && count($from_quantity) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_quantity when calling getPricesResource'
            );
        }


        $resourcePath = '/3/prices/{PriceList}/{ArticleNumber}/{FromQuantity}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($price_list !== null) {
            $resourcePath = str_replace(
                '{' . 'PriceList' . '}',
                ObjectSerializer::toPathValue($price_list),
                $resourcePath
            );
        }
        // path params
        if ($article_number !== null) {
            $resourcePath = str_replace(
                '{' . 'ArticleNumber' . '}',
                ObjectSerializer::toPathValue($article_number),
                $resourcePath
            );
        }
        // path params
        if ($from_quantity !== null) {
            $resourcePath = str_replace(
                '{' . 'FromQuantity' . '}',
                ObjectSerializer::toPathValue($from_quantity),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPricesResource
     *
     * Retrieve a list of articles with all their prices in the specified price list
     *
     * @param  string $price_list identifies the price list of the prices (required)
     * @param  string $article_number identifies the article number of the prices (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPricesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\PriceListItemList
     */
    public function listPricesResource($price_list, $article_number, string $contentType = self::contentTypes['listPricesResource'][0])
    {
        list($response) = $this->listPricesResourceWithHttpInfo($price_list, $article_number, $contentType);
        return $response;
    }

    /**
     * Operation listPricesResourceWithHttpInfo
     *
     * Retrieve a list of articles with all their prices in the specified price list
     *
     * @param  string $price_list identifies the price list of the prices (required)
     * @param  string $article_number identifies the article number of the prices (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPricesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\PriceListItemList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPricesResourceWithHttpInfo($price_list, $article_number, string $contentType = self::contentTypes['listPricesResource'][0])
    {
        $request = $this->listPricesResourceRequest($price_list, $article_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\PriceListItemList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\PriceListItemList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\PriceListItemList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\PriceListItemList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\PriceListItemList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPricesResourceAsync
     *
     * Retrieve a list of articles with all their prices in the specified price list
     *
     * @param  string $price_list identifies the price list of the prices (required)
     * @param  string $article_number identifies the article number of the prices (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPricesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPricesResourceAsync($price_list, $article_number, string $contentType = self::contentTypes['listPricesResource'][0])
    {
        return $this->listPricesResourceAsyncWithHttpInfo($price_list, $article_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPricesResourceAsyncWithHttpInfo
     *
     * Retrieve a list of articles with all their prices in the specified price list
     *
     * @param  string $price_list identifies the price list of the prices (required)
     * @param  string $article_number identifies the article number of the prices (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPricesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPricesResourceAsyncWithHttpInfo($price_list, $article_number, string $contentType = self::contentTypes['listPricesResource'][0])
    {
        $returnType = '\FortnoxApi\Model\PriceListItemList';
        $request = $this->listPricesResourceRequest($price_list, $article_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPricesResource'
     *
     * @param  string $price_list identifies the price list of the prices (required)
     * @param  string $article_number identifies the article number of the prices (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPricesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPricesResourceRequest($price_list, $article_number, string $contentType = self::contentTypes['listPricesResource'][0])
    {

        // verify the required parameter 'price_list' is set
        if ($price_list === null || (is_array($price_list) && count($price_list) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_list when calling listPricesResource'
            );
        }

        // verify the required parameter 'article_number' is set
        if ($article_number === null || (is_array($article_number) && count($article_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $article_number when calling listPricesResource'
            );
        }


        $resourcePath = '/3/prices/sublist/{PriceList}/{ArticleNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($price_list !== null) {
            $resourcePath = str_replace(
                '{' . 'PriceList' . '}',
                ObjectSerializer::toPathValue($price_list),
                $resourcePath
            );
        }
        // path params
        if ($article_number !== null) {
            $resourcePath = str_replace(
                '{' . 'ArticleNumber' . '}',
                ObjectSerializer::toPathValue($article_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removePricesResource
     *
     * Delete a single price
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article number (required)
     * @param  float $from_quantity identifies the from quantity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removePricesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removePricesResource($price_list, $article_number, $from_quantity, string $contentType = self::contentTypes['removePricesResource'][0])
    {
        $this->removePricesResourceWithHttpInfo($price_list, $article_number, $from_quantity, $contentType);
    }

    /**
     * Operation removePricesResourceWithHttpInfo
     *
     * Delete a single price
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article number (required)
     * @param  float $from_quantity identifies the from quantity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removePricesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removePricesResourceWithHttpInfo($price_list, $article_number, $from_quantity, string $contentType = self::contentTypes['removePricesResource'][0])
    {
        $request = $this->removePricesResourceRequest($price_list, $article_number, $from_quantity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removePricesResourceAsync
     *
     * Delete a single price
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article number (required)
     * @param  float $from_quantity identifies the from quantity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removePricesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removePricesResourceAsync($price_list, $article_number, $from_quantity, string $contentType = self::contentTypes['removePricesResource'][0])
    {
        return $this->removePricesResourceAsyncWithHttpInfo($price_list, $article_number, $from_quantity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removePricesResourceAsyncWithHttpInfo
     *
     * Delete a single price
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article number (required)
     * @param  float $from_quantity identifies the from quantity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removePricesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removePricesResourceAsyncWithHttpInfo($price_list, $article_number, $from_quantity, string $contentType = self::contentTypes['removePricesResource'][0])
    {
        $returnType = '';
        $request = $this->removePricesResourceRequest($price_list, $article_number, $from_quantity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removePricesResource'
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article number (required)
     * @param  float $from_quantity identifies the from quantity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removePricesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removePricesResourceRequest($price_list, $article_number, $from_quantity, string $contentType = self::contentTypes['removePricesResource'][0])
    {

        // verify the required parameter 'price_list' is set
        if ($price_list === null || (is_array($price_list) && count($price_list) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_list when calling removePricesResource'
            );
        }

        // verify the required parameter 'article_number' is set
        if ($article_number === null || (is_array($article_number) && count($article_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $article_number when calling removePricesResource'
            );
        }

        // verify the required parameter 'from_quantity' is set
        if ($from_quantity === null || (is_array($from_quantity) && count($from_quantity) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_quantity when calling removePricesResource'
            );
        }


        $resourcePath = '/3/prices/{PriceList}/{ArticleNumber}/{FromQuantity}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($price_list !== null) {
            $resourcePath = str_replace(
                '{' . 'PriceList' . '}',
                ObjectSerializer::toPathValue($price_list),
                $resourcePath
            );
        }
        // path params
        if ($article_number !== null) {
            $resourcePath = str_replace(
                '{' . 'ArticleNumber' . '}',
                ObjectSerializer::toPathValue($article_number),
                $resourcePath
            );
        }
        // path params
        if ($from_quantity !== null) {
            $resourcePath = str_replace(
                '{' . 'FromQuantity' . '}',
                ObjectSerializer::toPathValue($from_quantity),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePricesResource
     *
     * Update a price
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article number (required)
     * @param  float $from_quantity identifies the from quantity (required)
     * @param  \FortnoxApi\Model\PriceWrap $price price to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePricesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\PriceWrap
     */
    public function updatePricesResource($price_list, $article_number, $from_quantity, $price = null, string $contentType = self::contentTypes['updatePricesResource'][0])
    {
        list($response) = $this->updatePricesResourceWithHttpInfo($price_list, $article_number, $from_quantity, $price, $contentType);
        return $response;
    }

    /**
     * Operation updatePricesResourceWithHttpInfo
     *
     * Update a price
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article number (required)
     * @param  float $from_quantity identifies the from quantity (required)
     * @param  \FortnoxApi\Model\PriceWrap $price price to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePricesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\PriceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePricesResourceWithHttpInfo($price_list, $article_number, $from_quantity, $price = null, string $contentType = self::contentTypes['updatePricesResource'][0])
    {
        $request = $this->updatePricesResourceRequest($price_list, $article_number, $from_quantity, $price, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\PriceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\PriceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\PriceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\PriceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\PriceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePricesResourceAsync
     *
     * Update a price
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article number (required)
     * @param  float $from_quantity identifies the from quantity (required)
     * @param  \FortnoxApi\Model\PriceWrap $price price to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePricesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePricesResourceAsync($price_list, $article_number, $from_quantity, $price = null, string $contentType = self::contentTypes['updatePricesResource'][0])
    {
        return $this->updatePricesResourceAsyncWithHttpInfo($price_list, $article_number, $from_quantity, $price, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePricesResourceAsyncWithHttpInfo
     *
     * Update a price
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article number (required)
     * @param  float $from_quantity identifies the from quantity (required)
     * @param  \FortnoxApi\Model\PriceWrap $price price to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePricesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePricesResourceAsyncWithHttpInfo($price_list, $article_number, $from_quantity, $price = null, string $contentType = self::contentTypes['updatePricesResource'][0])
    {
        $returnType = '\FortnoxApi\Model\PriceWrap';
        $request = $this->updatePricesResourceRequest($price_list, $article_number, $from_quantity, $price, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePricesResource'
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article number (required)
     * @param  float $from_quantity identifies the from quantity (required)
     * @param  \FortnoxApi\Model\PriceWrap $price price to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePricesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePricesResourceRequest($price_list, $article_number, $from_quantity, $price = null, string $contentType = self::contentTypes['updatePricesResource'][0])
    {

        // verify the required parameter 'price_list' is set
        if ($price_list === null || (is_array($price_list) && count($price_list) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_list when calling updatePricesResource'
            );
        }

        // verify the required parameter 'article_number' is set
        if ($article_number === null || (is_array($article_number) && count($article_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $article_number when calling updatePricesResource'
            );
        }

        // verify the required parameter 'from_quantity' is set
        if ($from_quantity === null || (is_array($from_quantity) && count($from_quantity) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_quantity when calling updatePricesResource'
            );
        }



        $resourcePath = '/3/prices/{PriceList}/{ArticleNumber}/{FromQuantity}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($price_list !== null) {
            $resourcePath = str_replace(
                '{' . 'PriceList' . '}',
                ObjectSerializer::toPathValue($price_list),
                $resourcePath
            );
        }
        // path params
        if ($article_number !== null) {
            $resourcePath = str_replace(
                '{' . 'ArticleNumber' . '}',
                ObjectSerializer::toPathValue($article_number),
                $resourcePath
            );
        }
        // path params
        if ($from_quantity !== null) {
            $resourcePath = str_replace(
                '{' . 'FromQuantity' . '}',
                ObjectSerializer::toPathValue($from_quantity),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($price)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($price));
            } else {
                $httpBody = $price;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePricesResource1
     *
     * Update the first price in the specified article
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article number (required)
     * @param  \FortnoxApi\Model\PriceWrap $price price to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePricesResource1'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\PriceWrap
     */
    public function updatePricesResource1($price_list, $article_number, $price = null, string $contentType = self::contentTypes['updatePricesResource1'][0])
    {
        list($response) = $this->updatePricesResource1WithHttpInfo($price_list, $article_number, $price, $contentType);
        return $response;
    }

    /**
     * Operation updatePricesResource1WithHttpInfo
     *
     * Update the first price in the specified article
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article number (required)
     * @param  \FortnoxApi\Model\PriceWrap $price price to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePricesResource1'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\PriceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePricesResource1WithHttpInfo($price_list, $article_number, $price = null, string $contentType = self::contentTypes['updatePricesResource1'][0])
    {
        $request = $this->updatePricesResource1Request($price_list, $article_number, $price, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\PriceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\PriceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\PriceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\PriceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\PriceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePricesResource1Async
     *
     * Update the first price in the specified article
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article number (required)
     * @param  \FortnoxApi\Model\PriceWrap $price price to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePricesResource1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePricesResource1Async($price_list, $article_number, $price = null, string $contentType = self::contentTypes['updatePricesResource1'][0])
    {
        return $this->updatePricesResource1AsyncWithHttpInfo($price_list, $article_number, $price, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePricesResource1AsyncWithHttpInfo
     *
     * Update the first price in the specified article
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article number (required)
     * @param  \FortnoxApi\Model\PriceWrap $price price to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePricesResource1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePricesResource1AsyncWithHttpInfo($price_list, $article_number, $price = null, string $contentType = self::contentTypes['updatePricesResource1'][0])
    {
        $returnType = '\FortnoxApi\Model\PriceWrap';
        $request = $this->updatePricesResource1Request($price_list, $article_number, $price, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePricesResource1'
     *
     * @param  string $price_list identifies the price list (required)
     * @param  string $article_number identifies the article number (required)
     * @param  \FortnoxApi\Model\PriceWrap $price price to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePricesResource1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePricesResource1Request($price_list, $article_number, $price = null, string $contentType = self::contentTypes['updatePricesResource1'][0])
    {

        // verify the required parameter 'price_list' is set
        if ($price_list === null || (is_array($price_list) && count($price_list) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_list when calling updatePricesResource1'
            );
        }

        // verify the required parameter 'article_number' is set
        if ($article_number === null || (is_array($article_number) && count($article_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $article_number when calling updatePricesResource1'
            );
        }



        $resourcePath = '/3/prices/{PriceList}/{ArticleNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($price_list !== null) {
            $resourcePath = str_replace(
                '{' . 'PriceList' . '}',
                ObjectSerializer::toPathValue($price_list),
                $resourcePath
            );
        }
        // path params
        if ($article_number !== null) {
            $resourcePath = str_replace(
                '{' . 'ArticleNumber' . '}',
                ObjectSerializer::toPathValue($article_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($price)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($price));
            } else {
                $httpBody = $price;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
