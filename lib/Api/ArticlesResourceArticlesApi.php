<?php
/**
 * ArticlesResourceArticlesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  FortnoxApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [Guides & Good to Know section](https://www.fortnox.se/developer/guides-and-good-to-know/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit per access-token is 25 requests per 5 seconds. This equals to 300 requests per minute.  [Read more about this here.](https://www.fortnox.se/developer/guides-and-good-to-know/rate-limits-for-fortnox-api/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://www.fortnox.se/developer/guides-and-good-to-know/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FortnoxApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FortnoxApi\ApiException;
use FortnoxApi\Configuration;
use FortnoxApi\HeaderSelector;
use FortnoxApi\ObjectSerializer;

/**
 * ArticlesResourceArticlesApi Class Doc Comment
 *
 * @category Class
 * @package  FortnoxApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ArticlesResourceArticlesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createArticlesResourceArticles' => [
            'application/json',
        ],
        'getArticlesResourceArticles' => [
            'application/json',
        ],
        'listArticlesResourceArticles' => [
            'application/json',
        ],
        'removeArticlesResourceArticles' => [
            'application/json',
        ],
        'updateArticlesResourceArticles' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createArticlesResourceArticles
     *
     * Create an article
     *
     * @param  \FortnoxApi\Model\ArticleWrap $article to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\ArticleWrap
     */
    public function createArticlesResourceArticles($article = null, string $contentType = self::contentTypes['createArticlesResourceArticles'][0])
    {
        list($response) = $this->createArticlesResourceArticlesWithHttpInfo($article, $contentType);
        return $response;
    }

    /**
     * Operation createArticlesResourceArticlesWithHttpInfo
     *
     * Create an article
     *
     * @param  \FortnoxApi\Model\ArticleWrap $article to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\ArticleWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function createArticlesResourceArticlesWithHttpInfo($article = null, string $contentType = self::contentTypes['createArticlesResourceArticles'][0])
    {
        $request = $this->createArticlesResourceArticlesRequest($article, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\ArticleWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\ArticleWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\ArticleWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\ArticleWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\ArticleWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createArticlesResourceArticlesAsync
     *
     * Create an article
     *
     * @param  \FortnoxApi\Model\ArticleWrap $article to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createArticlesResourceArticlesAsync($article = null, string $contentType = self::contentTypes['createArticlesResourceArticles'][0])
    {
        return $this->createArticlesResourceArticlesAsyncWithHttpInfo($article, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createArticlesResourceArticlesAsyncWithHttpInfo
     *
     * Create an article
     *
     * @param  \FortnoxApi\Model\ArticleWrap $article to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createArticlesResourceArticlesAsyncWithHttpInfo($article = null, string $contentType = self::contentTypes['createArticlesResourceArticles'][0])
    {
        $returnType = '\FortnoxApi\Model\ArticleWrap';
        $request = $this->createArticlesResourceArticlesRequest($article, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createArticlesResourceArticles'
     *
     * @param  \FortnoxApi\Model\ArticleWrap $article to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createArticlesResourceArticlesRequest($article = null, string $contentType = self::contentTypes['createArticlesResourceArticles'][0])
    {



        $resourcePath = '/3/articles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($article)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($article));
            } else {
                $httpBody = $article;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getArticlesResourceArticles
     *
     * Retrieve an article
     *
     * @param  int $article_number identifies the article (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\ArticleWrap
     */
    public function getArticlesResourceArticles($article_number, string $contentType = self::contentTypes['getArticlesResourceArticles'][0])
    {
        list($response) = $this->getArticlesResourceArticlesWithHttpInfo($article_number, $contentType);
        return $response;
    }

    /**
     * Operation getArticlesResourceArticlesWithHttpInfo
     *
     * Retrieve an article
     *
     * @param  int $article_number identifies the article (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\ArticleWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function getArticlesResourceArticlesWithHttpInfo($article_number, string $contentType = self::contentTypes['getArticlesResourceArticles'][0])
    {
        $request = $this->getArticlesResourceArticlesRequest($article_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\ArticleWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\ArticleWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\ArticleWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\ArticleWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\ArticleWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getArticlesResourceArticlesAsync
     *
     * Retrieve an article
     *
     * @param  int $article_number identifies the article (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArticlesResourceArticlesAsync($article_number, string $contentType = self::contentTypes['getArticlesResourceArticles'][0])
    {
        return $this->getArticlesResourceArticlesAsyncWithHttpInfo($article_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getArticlesResourceArticlesAsyncWithHttpInfo
     *
     * Retrieve an article
     *
     * @param  int $article_number identifies the article (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArticlesResourceArticlesAsyncWithHttpInfo($article_number, string $contentType = self::contentTypes['getArticlesResourceArticles'][0])
    {
        $returnType = '\FortnoxApi\Model\ArticleWrap';
        $request = $this->getArticlesResourceArticlesRequest($article_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getArticlesResourceArticles'
     *
     * @param  int $article_number identifies the article (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getArticlesResourceArticlesRequest($article_number, string $contentType = self::contentTypes['getArticlesResourceArticles'][0])
    {

        // verify the required parameter 'article_number' is set
        if ($article_number === null || (is_array($article_number) && count($article_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $article_number when calling getArticlesResourceArticles'
            );
        }


        $resourcePath = '/3/articles/{ArticleNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($article_number !== null) {
            $resourcePath = str_replace(
                '{' . 'ArticleNumber' . '}',
                ObjectSerializer::toPathValue($article_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listArticlesResourceArticles
     *
     * Retrieve a list of articles
     *
     * @param  string $filter possibility to filter supplier invoices (optional)
     * @param  string $articlenumber filter by article number (optional)
     * @param  string $description filter by description (optional)
     * @param  string $ean filter by ean (optional)
     * @param  string $suppliernumber filter by supplier number (optional)
     * @param  string $manufacturer filter by manufacturer (optional)
     * @param  string $manufacturerarticlenumber filter by manufacturerarticlenumber (optional)
     * @param  string $webshop filter by web shop (optional)
     * @param  string $lastmodified filter by lastmodified (optional)
     * @param  string $sortby field to sort returned list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\ArticleListItemList
     */
    public function listArticlesResourceArticles($filter = null, $articlenumber = null, $description = null, $ean = null, $suppliernumber = null, $manufacturer = null, $manufacturerarticlenumber = null, $webshop = null, $lastmodified = null, $sortby = null, string $contentType = self::contentTypes['listArticlesResourceArticles'][0])
    {
        list($response) = $this->listArticlesResourceArticlesWithHttpInfo($filter, $articlenumber, $description, $ean, $suppliernumber, $manufacturer, $manufacturerarticlenumber, $webshop, $lastmodified, $sortby, $contentType);
        return $response;
    }

    /**
     * Operation listArticlesResourceArticlesWithHttpInfo
     *
     * Retrieve a list of articles
     *
     * @param  string $filter possibility to filter supplier invoices (optional)
     * @param  string $articlenumber filter by article number (optional)
     * @param  string $description filter by description (optional)
     * @param  string $ean filter by ean (optional)
     * @param  string $suppliernumber filter by supplier number (optional)
     * @param  string $manufacturer filter by manufacturer (optional)
     * @param  string $manufacturerarticlenumber filter by manufacturerarticlenumber (optional)
     * @param  string $webshop filter by web shop (optional)
     * @param  string $lastmodified filter by lastmodified (optional)
     * @param  string $sortby field to sort returned list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\ArticleListItemList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listArticlesResourceArticlesWithHttpInfo($filter = null, $articlenumber = null, $description = null, $ean = null, $suppliernumber = null, $manufacturer = null, $manufacturerarticlenumber = null, $webshop = null, $lastmodified = null, $sortby = null, string $contentType = self::contentTypes['listArticlesResourceArticles'][0])
    {
        $request = $this->listArticlesResourceArticlesRequest($filter, $articlenumber, $description, $ean, $suppliernumber, $manufacturer, $manufacturerarticlenumber, $webshop, $lastmodified, $sortby, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\ArticleListItemList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\ArticleListItemList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\ArticleListItemList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\ArticleListItemList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\ArticleListItemList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listArticlesResourceArticlesAsync
     *
     * Retrieve a list of articles
     *
     * @param  string $filter possibility to filter supplier invoices (optional)
     * @param  string $articlenumber filter by article number (optional)
     * @param  string $description filter by description (optional)
     * @param  string $ean filter by ean (optional)
     * @param  string $suppliernumber filter by supplier number (optional)
     * @param  string $manufacturer filter by manufacturer (optional)
     * @param  string $manufacturerarticlenumber filter by manufacturerarticlenumber (optional)
     * @param  string $webshop filter by web shop (optional)
     * @param  string $lastmodified filter by lastmodified (optional)
     * @param  string $sortby field to sort returned list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listArticlesResourceArticlesAsync($filter = null, $articlenumber = null, $description = null, $ean = null, $suppliernumber = null, $manufacturer = null, $manufacturerarticlenumber = null, $webshop = null, $lastmodified = null, $sortby = null, string $contentType = self::contentTypes['listArticlesResourceArticles'][0])
    {
        return $this->listArticlesResourceArticlesAsyncWithHttpInfo($filter, $articlenumber, $description, $ean, $suppliernumber, $manufacturer, $manufacturerarticlenumber, $webshop, $lastmodified, $sortby, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listArticlesResourceArticlesAsyncWithHttpInfo
     *
     * Retrieve a list of articles
     *
     * @param  string $filter possibility to filter supplier invoices (optional)
     * @param  string $articlenumber filter by article number (optional)
     * @param  string $description filter by description (optional)
     * @param  string $ean filter by ean (optional)
     * @param  string $suppliernumber filter by supplier number (optional)
     * @param  string $manufacturer filter by manufacturer (optional)
     * @param  string $manufacturerarticlenumber filter by manufacturerarticlenumber (optional)
     * @param  string $webshop filter by web shop (optional)
     * @param  string $lastmodified filter by lastmodified (optional)
     * @param  string $sortby field to sort returned list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listArticlesResourceArticlesAsyncWithHttpInfo($filter = null, $articlenumber = null, $description = null, $ean = null, $suppliernumber = null, $manufacturer = null, $manufacturerarticlenumber = null, $webshop = null, $lastmodified = null, $sortby = null, string $contentType = self::contentTypes['listArticlesResourceArticles'][0])
    {
        $returnType = '\FortnoxApi\Model\ArticleListItemList';
        $request = $this->listArticlesResourceArticlesRequest($filter, $articlenumber, $description, $ean, $suppliernumber, $manufacturer, $manufacturerarticlenumber, $webshop, $lastmodified, $sortby, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listArticlesResourceArticles'
     *
     * @param  string $filter possibility to filter supplier invoices (optional)
     * @param  string $articlenumber filter by article number (optional)
     * @param  string $description filter by description (optional)
     * @param  string $ean filter by ean (optional)
     * @param  string $suppliernumber filter by supplier number (optional)
     * @param  string $manufacturer filter by manufacturer (optional)
     * @param  string $manufacturerarticlenumber filter by manufacturerarticlenumber (optional)
     * @param  string $webshop filter by web shop (optional)
     * @param  string $lastmodified filter by lastmodified (optional)
     * @param  string $sortby field to sort returned list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listArticlesResourceArticlesRequest($filter = null, $articlenumber = null, $description = null, $ean = null, $suppliernumber = null, $manufacturer = null, $manufacturerarticlenumber = null, $webshop = null, $lastmodified = null, $sortby = null, string $contentType = self::contentTypes['listArticlesResourceArticles'][0])
    {












        $resourcePath = '/3/articles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $articlenumber,
            'articlenumber', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description,
            'description', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ean,
            'ean', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $suppliernumber,
            'suppliernumber', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $manufacturer,
            'manufacturer', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $manufacturerarticlenumber,
            'manufacturerarticlenumber', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $webshop,
            'webshop', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lastmodified,
            'lastmodified', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sortby,
            'sortby', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeArticlesResourceArticles
     *
     * Delete an article
     *
     * @param  int $article_number identifies the article (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeArticlesResourceArticles($article_number, string $contentType = self::contentTypes['removeArticlesResourceArticles'][0])
    {
        $this->removeArticlesResourceArticlesWithHttpInfo($article_number, $contentType);
    }

    /**
     * Operation removeArticlesResourceArticlesWithHttpInfo
     *
     * Delete an article
     *
     * @param  int $article_number identifies the article (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeArticlesResourceArticlesWithHttpInfo($article_number, string $contentType = self::contentTypes['removeArticlesResourceArticles'][0])
    {
        $request = $this->removeArticlesResourceArticlesRequest($article_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeArticlesResourceArticlesAsync
     *
     * Delete an article
     *
     * @param  int $article_number identifies the article (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeArticlesResourceArticlesAsync($article_number, string $contentType = self::contentTypes['removeArticlesResourceArticles'][0])
    {
        return $this->removeArticlesResourceArticlesAsyncWithHttpInfo($article_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeArticlesResourceArticlesAsyncWithHttpInfo
     *
     * Delete an article
     *
     * @param  int $article_number identifies the article (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeArticlesResourceArticlesAsyncWithHttpInfo($article_number, string $contentType = self::contentTypes['removeArticlesResourceArticles'][0])
    {
        $returnType = '';
        $request = $this->removeArticlesResourceArticlesRequest($article_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeArticlesResourceArticles'
     *
     * @param  int $article_number identifies the article (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeArticlesResourceArticlesRequest($article_number, string $contentType = self::contentTypes['removeArticlesResourceArticles'][0])
    {

        // verify the required parameter 'article_number' is set
        if ($article_number === null || (is_array($article_number) && count($article_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $article_number when calling removeArticlesResourceArticles'
            );
        }


        $resourcePath = '/3/articles/{ArticleNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($article_number !== null) {
            $resourcePath = str_replace(
                '{' . 'ArticleNumber' . '}',
                ObjectSerializer::toPathValue($article_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateArticlesResourceArticles
     *
     * Update an article
     *
     * @param  int $article_number identifies the article (required)
     * @param  \FortnoxApi\Model\ArticleWrap $article to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\ArticleWrap
     */
    public function updateArticlesResourceArticles($article_number, $article = null, string $contentType = self::contentTypes['updateArticlesResourceArticles'][0])
    {
        list($response) = $this->updateArticlesResourceArticlesWithHttpInfo($article_number, $article, $contentType);
        return $response;
    }

    /**
     * Operation updateArticlesResourceArticlesWithHttpInfo
     *
     * Update an article
     *
     * @param  int $article_number identifies the article (required)
     * @param  \FortnoxApi\Model\ArticleWrap $article to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\ArticleWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateArticlesResourceArticlesWithHttpInfo($article_number, $article = null, string $contentType = self::contentTypes['updateArticlesResourceArticles'][0])
    {
        $request = $this->updateArticlesResourceArticlesRequest($article_number, $article, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\ArticleWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\ArticleWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\ArticleWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\ArticleWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\ArticleWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateArticlesResourceArticlesAsync
     *
     * Update an article
     *
     * @param  int $article_number identifies the article (required)
     * @param  \FortnoxApi\Model\ArticleWrap $article to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateArticlesResourceArticlesAsync($article_number, $article = null, string $contentType = self::contentTypes['updateArticlesResourceArticles'][0])
    {
        return $this->updateArticlesResourceArticlesAsyncWithHttpInfo($article_number, $article, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateArticlesResourceArticlesAsyncWithHttpInfo
     *
     * Update an article
     *
     * @param  int $article_number identifies the article (required)
     * @param  \FortnoxApi\Model\ArticleWrap $article to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateArticlesResourceArticlesAsyncWithHttpInfo($article_number, $article = null, string $contentType = self::contentTypes['updateArticlesResourceArticles'][0])
    {
        $returnType = '\FortnoxApi\Model\ArticleWrap';
        $request = $this->updateArticlesResourceArticlesRequest($article_number, $article, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateArticlesResourceArticles'
     *
     * @param  int $article_number identifies the article (required)
     * @param  \FortnoxApi\Model\ArticleWrap $article to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateArticlesResourceArticles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateArticlesResourceArticlesRequest($article_number, $article = null, string $contentType = self::contentTypes['updateArticlesResourceArticles'][0])
    {

        // verify the required parameter 'article_number' is set
        if ($article_number === null || (is_array($article_number) && count($article_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $article_number when calling updateArticlesResourceArticles'
            );
        }



        $resourcePath = '/3/articles/{ArticleNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($article_number !== null) {
            $resourcePath = str_replace(
                '{' . 'ArticleNumber' . '}',
                ObjectSerializer::toPathValue($article_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($article)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($article));
            } else {
                $httpBody = $article;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
