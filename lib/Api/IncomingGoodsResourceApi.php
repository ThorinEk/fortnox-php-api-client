<?php
/**
 * IncomingGoodsResourceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [Guides & Good to Know section](https://www.fortnox.se/developer/guides-and-good-to-know/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit per access-token is 25 requests per 5 seconds. This equals to 300 requests per minute.  [Read more about this here.](https://www.fortnox.se/developer/guides-and-good-to-know/rate-limits-for-fortnox-api/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://www.fortnox.se/developer/guides-and-good-to-know/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * IncomingGoodsResourceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IncomingGoodsResourceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'completed' => [
            'application/json',
        ],
        'createIncomingGoodsResource' => [
            'application/json',
        ],
        'getAllIncomingGoodsResource' => [
            'application/json',
        ],
        'getIncomingGoodsResource' => [
            'application/json',
        ],
        'releaseIncomingGoodsResource' => [
            'application/json',
        ],
        'saveIncomingGoodsResource' => [
            'application/json',
        ],
        'voidDocumentIncomingGoodsResource' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation completed
     *
     * Complete Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  string $booking_date Date for bookkeeping in format &#x60;\&quot;YYYY-MM-DD\&quot;&#x60;. Must be between document&#39;s release date (inclusive) and today&#39;s date (inclusive). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completed'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function completed($id, $booking_date = null, string $contentType = self::contentTypes['completed'][0])
    {
        $this->completedWithHttpInfo($id, $booking_date, $contentType);
    }

    /**
     * Operation completedWithHttpInfo
     *
     * Complete Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  string $booking_date Date for bookkeeping in format &#x60;\&quot;YYYY-MM-DD\&quot;&#x60;. Must be between document&#39;s release date (inclusive) and today&#39;s date (inclusive). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completed'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function completedWithHttpInfo($id, $booking_date = null, string $contentType = self::contentTypes['completed'][0])
    {
        $request = $this->completedRequest($id, $booking_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation completedAsync
     *
     * Complete Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  string $booking_date Date for bookkeeping in format &#x60;\&quot;YYYY-MM-DD\&quot;&#x60;. Must be between document&#39;s release date (inclusive) and today&#39;s date (inclusive). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completed'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completedAsync($id, $booking_date = null, string $contentType = self::contentTypes['completed'][0])
    {
        return $this->completedAsyncWithHttpInfo($id, $booking_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation completedAsyncWithHttpInfo
     *
     * Complete Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  string $booking_date Date for bookkeeping in format &#x60;\&quot;YYYY-MM-DD\&quot;&#x60;. Must be between document&#39;s release date (inclusive) and today&#39;s date (inclusive). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completed'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completedAsyncWithHttpInfo($id, $booking_date = null, string $contentType = self::contentTypes['completed'][0])
    {
        $returnType = '';
        $request = $this->completedRequest($id, $booking_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'completed'
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  string $booking_date Date for bookkeeping in format &#x60;\&quot;YYYY-MM-DD\&quot;&#x60;. Must be between document&#39;s release date (inclusive) and today&#39;s date (inclusive). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completed'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function completedRequest($id, $booking_date = null, string $contentType = self::contentTypes['completed'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling completed'
            );
        }



        $resourcePath = '/api/warehouse/incominggoods-v1/{id}/completed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($booking_date)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($booking_date));
            } else {
                $httpBody = $booking_date;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createIncomingGoodsResource
     *
     * Create Incoming Goods document
     *
     * @param  \OpenAPI\Client\Model\IncomingGoods $incoming_goods The &lt;code&gt;IncomingGoods&lt;/code&gt; document. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IncomingGoods
     */
    public function createIncomingGoodsResource($incoming_goods = null, string $contentType = self::contentTypes['createIncomingGoodsResource'][0])
    {
        list($response) = $this->createIncomingGoodsResourceWithHttpInfo($incoming_goods, $contentType);
        return $response;
    }

    /**
     * Operation createIncomingGoodsResourceWithHttpInfo
     *
     * Create Incoming Goods document
     *
     * @param  \OpenAPI\Client\Model\IncomingGoods $incoming_goods The &lt;code&gt;IncomingGoods&lt;/code&gt; document. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IncomingGoods, HTTP status code, HTTP response headers (array of strings)
     */
    public function createIncomingGoodsResourceWithHttpInfo($incoming_goods = null, string $contentType = self::contentTypes['createIncomingGoodsResource'][0])
    {
        $request = $this->createIncomingGoodsResourceRequest($incoming_goods, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\IncomingGoods' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\IncomingGoods' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IncomingGoods', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IncomingGoods';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IncomingGoods',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createIncomingGoodsResourceAsync
     *
     * Create Incoming Goods document
     *
     * @param  \OpenAPI\Client\Model\IncomingGoods $incoming_goods The &lt;code&gt;IncomingGoods&lt;/code&gt; document. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createIncomingGoodsResourceAsync($incoming_goods = null, string $contentType = self::contentTypes['createIncomingGoodsResource'][0])
    {
        return $this->createIncomingGoodsResourceAsyncWithHttpInfo($incoming_goods, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createIncomingGoodsResourceAsyncWithHttpInfo
     *
     * Create Incoming Goods document
     *
     * @param  \OpenAPI\Client\Model\IncomingGoods $incoming_goods The &lt;code&gt;IncomingGoods&lt;/code&gt; document. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createIncomingGoodsResourceAsyncWithHttpInfo($incoming_goods = null, string $contentType = self::contentTypes['createIncomingGoodsResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\IncomingGoods';
        $request = $this->createIncomingGoodsResourceRequest($incoming_goods, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createIncomingGoodsResource'
     *
     * @param  \OpenAPI\Client\Model\IncomingGoods $incoming_goods The &lt;code&gt;IncomingGoods&lt;/code&gt; document. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createIncomingGoodsResourceRequest($incoming_goods = null, string $contentType = self::contentTypes['createIncomingGoodsResource'][0])
    {



        $resourcePath = '/api/warehouse/incominggoods-v1/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($incoming_goods)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($incoming_goods));
            } else {
                $httpBody = $incoming_goods;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllIncomingGoodsResource
     *
     * List Incoming Goods Documents
     *
     * @param  bool $released &#x60;true&#x60; to include only released documents.  &#x60;false&#x60; to include only non-released documents. (optional)
     * @param  bool $completed &#x60;true&#x60; to include only completed documents.  &#x60;false&#x60; to include only non-completed documents. (optional)
     * @param  bool $voided &#x60;true&#x60; to include only voided documents.  &#x60;false&#x60; to include only non-voided documents. (optional)
     * @param  string $supplier_number Include only documents with the given &#x60;supplierNumber&#x60;. (optional)
     * @param  string $item_id Include only documents with the given &#x60;itemId&#x60;. (optional)
     * @param  string $note Include only documents where &#x60;note&#x60;-field contains the given text (case-insensitive). (optional)
     * @param  string $delivery_note Include only documents where &#x60;deliveryNote&#x60;-field contains the given text (case-insensitive). (optional)
     * @param  string $q Include only documents where &#x60;id&#x60; or &#x60;deliveryNote&#x60;-field contains the given text (case-insensitive). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IncomingGoodsListRow[]
     */
    public function getAllIncomingGoodsResource($released = null, $completed = null, $voided = null, $supplier_number = null, $item_id = null, $note = null, $delivery_note = null, $q = null, string $contentType = self::contentTypes['getAllIncomingGoodsResource'][0])
    {
        list($response) = $this->getAllIncomingGoodsResourceWithHttpInfo($released, $completed, $voided, $supplier_number, $item_id, $note, $delivery_note, $q, $contentType);
        return $response;
    }

    /**
     * Operation getAllIncomingGoodsResourceWithHttpInfo
     *
     * List Incoming Goods Documents
     *
     * @param  bool $released &#x60;true&#x60; to include only released documents.  &#x60;false&#x60; to include only non-released documents. (optional)
     * @param  bool $completed &#x60;true&#x60; to include only completed documents.  &#x60;false&#x60; to include only non-completed documents. (optional)
     * @param  bool $voided &#x60;true&#x60; to include only voided documents.  &#x60;false&#x60; to include only non-voided documents. (optional)
     * @param  string $supplier_number Include only documents with the given &#x60;supplierNumber&#x60;. (optional)
     * @param  string $item_id Include only documents with the given &#x60;itemId&#x60;. (optional)
     * @param  string $note Include only documents where &#x60;note&#x60;-field contains the given text (case-insensitive). (optional)
     * @param  string $delivery_note Include only documents where &#x60;deliveryNote&#x60;-field contains the given text (case-insensitive). (optional)
     * @param  string $q Include only documents where &#x60;id&#x60; or &#x60;deliveryNote&#x60;-field contains the given text (case-insensitive). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IncomingGoodsListRow[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllIncomingGoodsResourceWithHttpInfo($released = null, $completed = null, $voided = null, $supplier_number = null, $item_id = null, $note = null, $delivery_note = null, $q = null, string $contentType = self::contentTypes['getAllIncomingGoodsResource'][0])
    {
        $request = $this->getAllIncomingGoodsResourceRequest($released, $completed, $voided, $supplier_number, $item_id, $note, $delivery_note, $q, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\IncomingGoodsListRow[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\IncomingGoodsListRow[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IncomingGoodsListRow[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IncomingGoodsListRow[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IncomingGoodsListRow[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllIncomingGoodsResourceAsync
     *
     * List Incoming Goods Documents
     *
     * @param  bool $released &#x60;true&#x60; to include only released documents.  &#x60;false&#x60; to include only non-released documents. (optional)
     * @param  bool $completed &#x60;true&#x60; to include only completed documents.  &#x60;false&#x60; to include only non-completed documents. (optional)
     * @param  bool $voided &#x60;true&#x60; to include only voided documents.  &#x60;false&#x60; to include only non-voided documents. (optional)
     * @param  string $supplier_number Include only documents with the given &#x60;supplierNumber&#x60;. (optional)
     * @param  string $item_id Include only documents with the given &#x60;itemId&#x60;. (optional)
     * @param  string $note Include only documents where &#x60;note&#x60;-field contains the given text (case-insensitive). (optional)
     * @param  string $delivery_note Include only documents where &#x60;deliveryNote&#x60;-field contains the given text (case-insensitive). (optional)
     * @param  string $q Include only documents where &#x60;id&#x60; or &#x60;deliveryNote&#x60;-field contains the given text (case-insensitive). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllIncomingGoodsResourceAsync($released = null, $completed = null, $voided = null, $supplier_number = null, $item_id = null, $note = null, $delivery_note = null, $q = null, string $contentType = self::contentTypes['getAllIncomingGoodsResource'][0])
    {
        return $this->getAllIncomingGoodsResourceAsyncWithHttpInfo($released, $completed, $voided, $supplier_number, $item_id, $note, $delivery_note, $q, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllIncomingGoodsResourceAsyncWithHttpInfo
     *
     * List Incoming Goods Documents
     *
     * @param  bool $released &#x60;true&#x60; to include only released documents.  &#x60;false&#x60; to include only non-released documents. (optional)
     * @param  bool $completed &#x60;true&#x60; to include only completed documents.  &#x60;false&#x60; to include only non-completed documents. (optional)
     * @param  bool $voided &#x60;true&#x60; to include only voided documents.  &#x60;false&#x60; to include only non-voided documents. (optional)
     * @param  string $supplier_number Include only documents with the given &#x60;supplierNumber&#x60;. (optional)
     * @param  string $item_id Include only documents with the given &#x60;itemId&#x60;. (optional)
     * @param  string $note Include only documents where &#x60;note&#x60;-field contains the given text (case-insensitive). (optional)
     * @param  string $delivery_note Include only documents where &#x60;deliveryNote&#x60;-field contains the given text (case-insensitive). (optional)
     * @param  string $q Include only documents where &#x60;id&#x60; or &#x60;deliveryNote&#x60;-field contains the given text (case-insensitive). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllIncomingGoodsResourceAsyncWithHttpInfo($released = null, $completed = null, $voided = null, $supplier_number = null, $item_id = null, $note = null, $delivery_note = null, $q = null, string $contentType = self::contentTypes['getAllIncomingGoodsResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\IncomingGoodsListRow[]';
        $request = $this->getAllIncomingGoodsResourceRequest($released, $completed, $voided, $supplier_number, $item_id, $note, $delivery_note, $q, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllIncomingGoodsResource'
     *
     * @param  bool $released &#x60;true&#x60; to include only released documents.  &#x60;false&#x60; to include only non-released documents. (optional)
     * @param  bool $completed &#x60;true&#x60; to include only completed documents.  &#x60;false&#x60; to include only non-completed documents. (optional)
     * @param  bool $voided &#x60;true&#x60; to include only voided documents.  &#x60;false&#x60; to include only non-voided documents. (optional)
     * @param  string $supplier_number Include only documents with the given &#x60;supplierNumber&#x60;. (optional)
     * @param  string $item_id Include only documents with the given &#x60;itemId&#x60;. (optional)
     * @param  string $note Include only documents where &#x60;note&#x60;-field contains the given text (case-insensitive). (optional)
     * @param  string $delivery_note Include only documents where &#x60;deliveryNote&#x60;-field contains the given text (case-insensitive). (optional)
     * @param  string $q Include only documents where &#x60;id&#x60; or &#x60;deliveryNote&#x60;-field contains the given text (case-insensitive). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllIncomingGoodsResourceRequest($released = null, $completed = null, $voided = null, $supplier_number = null, $item_id = null, $note = null, $delivery_note = null, $q = null, string $contentType = self::contentTypes['getAllIncomingGoodsResource'][0])
    {










        $resourcePath = '/api/warehouse/incominggoods-v1/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $released,
            'released', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $completed,
            'completed', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $voided,
            'voided', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $supplier_number,
            'supplierNumber', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $item_id,
            'itemId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $note,
            'note', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_note,
            'deliveryNote', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIncomingGoodsResource
     *
     * Get Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  int $ignore_supplier_invoice_id This Supplier Invoice id will be excluded when calculating the takenQuantity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IncomingGoods
     */
    public function getIncomingGoodsResource($id, $ignore_supplier_invoice_id = null, string $contentType = self::contentTypes['getIncomingGoodsResource'][0])
    {
        list($response) = $this->getIncomingGoodsResourceWithHttpInfo($id, $ignore_supplier_invoice_id, $contentType);
        return $response;
    }

    /**
     * Operation getIncomingGoodsResourceWithHttpInfo
     *
     * Get Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  int $ignore_supplier_invoice_id This Supplier Invoice id will be excluded when calculating the takenQuantity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IncomingGoods, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIncomingGoodsResourceWithHttpInfo($id, $ignore_supplier_invoice_id = null, string $contentType = self::contentTypes['getIncomingGoodsResource'][0])
    {
        $request = $this->getIncomingGoodsResourceRequest($id, $ignore_supplier_invoice_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\IncomingGoods' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\IncomingGoods' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IncomingGoods', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IncomingGoods';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IncomingGoods',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIncomingGoodsResourceAsync
     *
     * Get Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  int $ignore_supplier_invoice_id This Supplier Invoice id will be excluded when calculating the takenQuantity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIncomingGoodsResourceAsync($id, $ignore_supplier_invoice_id = null, string $contentType = self::contentTypes['getIncomingGoodsResource'][0])
    {
        return $this->getIncomingGoodsResourceAsyncWithHttpInfo($id, $ignore_supplier_invoice_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIncomingGoodsResourceAsyncWithHttpInfo
     *
     * Get Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  int $ignore_supplier_invoice_id This Supplier Invoice id will be excluded when calculating the takenQuantity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIncomingGoodsResourceAsyncWithHttpInfo($id, $ignore_supplier_invoice_id = null, string $contentType = self::contentTypes['getIncomingGoodsResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\IncomingGoods';
        $request = $this->getIncomingGoodsResourceRequest($id, $ignore_supplier_invoice_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIncomingGoodsResource'
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  int $ignore_supplier_invoice_id This Supplier Invoice id will be excluded when calculating the takenQuantity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIncomingGoodsResourceRequest($id, $ignore_supplier_invoice_id = null, string $contentType = self::contentTypes['getIncomingGoodsResource'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIncomingGoodsResource'
            );
        }



        $resourcePath = '/api/warehouse/incominggoods-v1/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ignore_supplier_invoice_id,
            'ignoreSupplierInvoiceId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation releaseIncomingGoodsResource
     *
     * Release Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function releaseIncomingGoodsResource($id, string $contentType = self::contentTypes['releaseIncomingGoodsResource'][0])
    {
        $this->releaseIncomingGoodsResourceWithHttpInfo($id, $contentType);
    }

    /**
     * Operation releaseIncomingGoodsResourceWithHttpInfo
     *
     * Release Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function releaseIncomingGoodsResourceWithHttpInfo($id, string $contentType = self::contentTypes['releaseIncomingGoodsResource'][0])
    {
        $request = $this->releaseIncomingGoodsResourceRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation releaseIncomingGoodsResourceAsync
     *
     * Release Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function releaseIncomingGoodsResourceAsync($id, string $contentType = self::contentTypes['releaseIncomingGoodsResource'][0])
    {
        return $this->releaseIncomingGoodsResourceAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation releaseIncomingGoodsResourceAsyncWithHttpInfo
     *
     * Release Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function releaseIncomingGoodsResourceAsyncWithHttpInfo($id, string $contentType = self::contentTypes['releaseIncomingGoodsResource'][0])
    {
        $returnType = '';
        $request = $this->releaseIncomingGoodsResourceRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'releaseIncomingGoodsResource'
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function releaseIncomingGoodsResourceRequest($id, string $contentType = self::contentTypes['releaseIncomingGoodsResource'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling releaseIncomingGoodsResource'
            );
        }


        $resourcePath = '/api/warehouse/incominggoods-v1/{id}/release';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saveIncomingGoodsResource
     *
     * Update Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  \OpenAPI\Client\Model\IncomingGoods $incoming_goods The &lt;code&gt;IncomingGoods&lt;/code&gt; document. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IncomingGoods
     */
    public function saveIncomingGoodsResource($id, $incoming_goods = null, string $contentType = self::contentTypes['saveIncomingGoodsResource'][0])
    {
        list($response) = $this->saveIncomingGoodsResourceWithHttpInfo($id, $incoming_goods, $contentType);
        return $response;
    }

    /**
     * Operation saveIncomingGoodsResourceWithHttpInfo
     *
     * Update Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  \OpenAPI\Client\Model\IncomingGoods $incoming_goods The &lt;code&gt;IncomingGoods&lt;/code&gt; document. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IncomingGoods, HTTP status code, HTTP response headers (array of strings)
     */
    public function saveIncomingGoodsResourceWithHttpInfo($id, $incoming_goods = null, string $contentType = self::contentTypes['saveIncomingGoodsResource'][0])
    {
        $request = $this->saveIncomingGoodsResourceRequest($id, $incoming_goods, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\IncomingGoods' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\IncomingGoods' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IncomingGoods', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IncomingGoods';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IncomingGoods',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saveIncomingGoodsResourceAsync
     *
     * Update Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  \OpenAPI\Client\Model\IncomingGoods $incoming_goods The &lt;code&gt;IncomingGoods&lt;/code&gt; document. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveIncomingGoodsResourceAsync($id, $incoming_goods = null, string $contentType = self::contentTypes['saveIncomingGoodsResource'][0])
    {
        return $this->saveIncomingGoodsResourceAsyncWithHttpInfo($id, $incoming_goods, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saveIncomingGoodsResourceAsyncWithHttpInfo
     *
     * Update Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  \OpenAPI\Client\Model\IncomingGoods $incoming_goods The &lt;code&gt;IncomingGoods&lt;/code&gt; document. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveIncomingGoodsResourceAsyncWithHttpInfo($id, $incoming_goods = null, string $contentType = self::contentTypes['saveIncomingGoodsResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\IncomingGoods';
        $request = $this->saveIncomingGoodsResourceRequest($id, $incoming_goods, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saveIncomingGoodsResource'
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  \OpenAPI\Client\Model\IncomingGoods $incoming_goods The &lt;code&gt;IncomingGoods&lt;/code&gt; document. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function saveIncomingGoodsResourceRequest($id, $incoming_goods = null, string $contentType = self::contentTypes['saveIncomingGoodsResource'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling saveIncomingGoodsResource'
            );
        }



        $resourcePath = '/api/warehouse/incominggoods-v1/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($incoming_goods)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($incoming_goods));
            } else {
                $httpBody = $incoming_goods;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation voidDocumentIncomingGoodsResource
     *
     * Void Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidDocumentIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function voidDocumentIncomingGoodsResource($id, string $contentType = self::contentTypes['voidDocumentIncomingGoodsResource'][0])
    {
        $this->voidDocumentIncomingGoodsResourceWithHttpInfo($id, $contentType);
    }

    /**
     * Operation voidDocumentIncomingGoodsResourceWithHttpInfo
     *
     * Void Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidDocumentIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function voidDocumentIncomingGoodsResourceWithHttpInfo($id, string $contentType = self::contentTypes['voidDocumentIncomingGoodsResource'][0])
    {
        $request = $this->voidDocumentIncomingGoodsResourceRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation voidDocumentIncomingGoodsResourceAsync
     *
     * Void Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidDocumentIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidDocumentIncomingGoodsResourceAsync($id, string $contentType = self::contentTypes['voidDocumentIncomingGoodsResource'][0])
    {
        return $this->voidDocumentIncomingGoodsResourceAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation voidDocumentIncomingGoodsResourceAsyncWithHttpInfo
     *
     * Void Incoming Goods document
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidDocumentIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidDocumentIncomingGoodsResourceAsyncWithHttpInfo($id, string $contentType = self::contentTypes['voidDocumentIncomingGoodsResource'][0])
    {
        $returnType = '';
        $request = $this->voidDocumentIncomingGoodsResourceRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'voidDocumentIncomingGoodsResource'
     *
     * @param  int $id Incoming goods document id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidDocumentIncomingGoodsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function voidDocumentIncomingGoodsResourceRequest($id, string $contentType = self::contentTypes['voidDocumentIncomingGoodsResource'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling voidDocumentIncomingGoodsResource'
            );
        }


        $resourcePath = '/api/warehouse/incominggoods-v1/{id}/void';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
