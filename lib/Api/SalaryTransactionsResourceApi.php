<?php
/**
 * SalaryTransactionsResourceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [Guides & Good to Know section](https://www.fortnox.se/developer/guides-and-good-to-know/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit per access-token is 25 requests per 5 seconds. This equals to 300 requests per minute.  [Read more about this here.](https://www.fortnox.se/developer/guides-and-good-to-know/rate-limits-for-fortnox-api/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://www.fortnox.se/developer/guides-and-good-to-know/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * SalaryTransactionsResourceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SalaryTransactionsResourceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createSalaryTransactionsResource' => [
            'application/json',
        ],
        'deleteSalaryTransactionsResource' => [
            'application/json',
        ],
        'getSalaryTransactionsResource' => [
            'application/json',
        ],
        'listSalaryTransactionsResource' => [
            'application/json',
        ],
        'updateSalaryTransactionsResource' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createSalaryTransactionsResource
     *
     * Create a new salary transaction for an employee
     *
     * @param  \OpenAPI\Client\Model\SalaryTransactionWrap $salary_transaction to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SalaryTransactionWrap
     */
    public function createSalaryTransactionsResource($salary_transaction = null, string $contentType = self::contentTypes['createSalaryTransactionsResource'][0])
    {
        list($response) = $this->createSalaryTransactionsResourceWithHttpInfo($salary_transaction, $contentType);
        return $response;
    }

    /**
     * Operation createSalaryTransactionsResourceWithHttpInfo
     *
     * Create a new salary transaction for an employee
     *
     * @param  \OpenAPI\Client\Model\SalaryTransactionWrap $salary_transaction to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SalaryTransactionWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSalaryTransactionsResourceWithHttpInfo($salary_transaction = null, string $contentType = self::contentTypes['createSalaryTransactionsResource'][0])
    {
        $request = $this->createSalaryTransactionsResourceRequest($salary_transaction, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SalaryTransactionWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SalaryTransactionWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SalaryTransactionWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SalaryTransactionWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SalaryTransactionWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSalaryTransactionsResourceAsync
     *
     * Create a new salary transaction for an employee
     *
     * @param  \OpenAPI\Client\Model\SalaryTransactionWrap $salary_transaction to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSalaryTransactionsResourceAsync($salary_transaction = null, string $contentType = self::contentTypes['createSalaryTransactionsResource'][0])
    {
        return $this->createSalaryTransactionsResourceAsyncWithHttpInfo($salary_transaction, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSalaryTransactionsResourceAsyncWithHttpInfo
     *
     * Create a new salary transaction for an employee
     *
     * @param  \OpenAPI\Client\Model\SalaryTransactionWrap $salary_transaction to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSalaryTransactionsResourceAsyncWithHttpInfo($salary_transaction = null, string $contentType = self::contentTypes['createSalaryTransactionsResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SalaryTransactionWrap';
        $request = $this->createSalaryTransactionsResourceRequest($salary_transaction, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSalaryTransactionsResource'
     *
     * @param  \OpenAPI\Client\Model\SalaryTransactionWrap $salary_transaction to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSalaryTransactionsResourceRequest($salary_transaction = null, string $contentType = self::contentTypes['createSalaryTransactionsResource'][0])
    {



        $resourcePath = '/3/salarytransactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($salary_transaction)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($salary_transaction));
            } else {
                $httpBody = $salary_transaction;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSalaryTransactionsResource
     *
     * Delete a single salary transaction
     *
     * @param  int $salary_row identifies the salary transaction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SalaryTransactionWrap
     */
    public function deleteSalaryTransactionsResource($salary_row, string $contentType = self::contentTypes['deleteSalaryTransactionsResource'][0])
    {
        list($response) = $this->deleteSalaryTransactionsResourceWithHttpInfo($salary_row, $contentType);
        return $response;
    }

    /**
     * Operation deleteSalaryTransactionsResourceWithHttpInfo
     *
     * Delete a single salary transaction
     *
     * @param  int $salary_row identifies the salary transaction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SalaryTransactionWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSalaryTransactionsResourceWithHttpInfo($salary_row, string $contentType = self::contentTypes['deleteSalaryTransactionsResource'][0])
    {
        $request = $this->deleteSalaryTransactionsResourceRequest($salary_row, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SalaryTransactionWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SalaryTransactionWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SalaryTransactionWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SalaryTransactionWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SalaryTransactionWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSalaryTransactionsResourceAsync
     *
     * Delete a single salary transaction
     *
     * @param  int $salary_row identifies the salary transaction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSalaryTransactionsResourceAsync($salary_row, string $contentType = self::contentTypes['deleteSalaryTransactionsResource'][0])
    {
        return $this->deleteSalaryTransactionsResourceAsyncWithHttpInfo($salary_row, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSalaryTransactionsResourceAsyncWithHttpInfo
     *
     * Delete a single salary transaction
     *
     * @param  int $salary_row identifies the salary transaction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSalaryTransactionsResourceAsyncWithHttpInfo($salary_row, string $contentType = self::contentTypes['deleteSalaryTransactionsResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SalaryTransactionWrap';
        $request = $this->deleteSalaryTransactionsResourceRequest($salary_row, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSalaryTransactionsResource'
     *
     * @param  int $salary_row identifies the salary transaction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSalaryTransactionsResourceRequest($salary_row, string $contentType = self::contentTypes['deleteSalaryTransactionsResource'][0])
    {

        // verify the required parameter 'salary_row' is set
        if ($salary_row === null || (is_array($salary_row) && count($salary_row) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $salary_row when calling deleteSalaryTransactionsResource'
            );
        }


        $resourcePath = '/3/salarytransactions/{SalaryRow}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($salary_row !== null) {
            $resourcePath = str_replace(
                '{' . 'SalaryRow' . '}',
                ObjectSerializer::toPathValue($salary_row),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSalaryTransactionsResource
     *
     * Retrieve a single salary transaction
     *
     * @param  int $salary_row identifies the salary transaction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SalaryTransactionWrap
     */
    public function getSalaryTransactionsResource($salary_row, string $contentType = self::contentTypes['getSalaryTransactionsResource'][0])
    {
        list($response) = $this->getSalaryTransactionsResourceWithHttpInfo($salary_row, $contentType);
        return $response;
    }

    /**
     * Operation getSalaryTransactionsResourceWithHttpInfo
     *
     * Retrieve a single salary transaction
     *
     * @param  int $salary_row identifies the salary transaction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SalaryTransactionWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSalaryTransactionsResourceWithHttpInfo($salary_row, string $contentType = self::contentTypes['getSalaryTransactionsResource'][0])
    {
        $request = $this->getSalaryTransactionsResourceRequest($salary_row, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SalaryTransactionWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SalaryTransactionWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SalaryTransactionWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SalaryTransactionWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SalaryTransactionWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSalaryTransactionsResourceAsync
     *
     * Retrieve a single salary transaction
     *
     * @param  int $salary_row identifies the salary transaction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSalaryTransactionsResourceAsync($salary_row, string $contentType = self::contentTypes['getSalaryTransactionsResource'][0])
    {
        return $this->getSalaryTransactionsResourceAsyncWithHttpInfo($salary_row, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSalaryTransactionsResourceAsyncWithHttpInfo
     *
     * Retrieve a single salary transaction
     *
     * @param  int $salary_row identifies the salary transaction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSalaryTransactionsResourceAsyncWithHttpInfo($salary_row, string $contentType = self::contentTypes['getSalaryTransactionsResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SalaryTransactionWrap';
        $request = $this->getSalaryTransactionsResourceRequest($salary_row, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSalaryTransactionsResource'
     *
     * @param  int $salary_row identifies the salary transaction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSalaryTransactionsResourceRequest($salary_row, string $contentType = self::contentTypes['getSalaryTransactionsResource'][0])
    {

        // verify the required parameter 'salary_row' is set
        if ($salary_row === null || (is_array($salary_row) && count($salary_row) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $salary_row when calling getSalaryTransactionsResource'
            );
        }


        $resourcePath = '/3/salarytransactions/{SalaryRow}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($salary_row !== null) {
            $resourcePath = str_replace(
                '{' . 'SalaryRow' . '}',
                ObjectSerializer::toPathValue($salary_row),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSalaryTransactionsResource
     *
     * List all salary transactions for all employees
     *
     * @param  string $employee_id filter on employeeId (optional)
     * @param  \DateTime $date filter on date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SalaryTransactionListItemList
     */
    public function listSalaryTransactionsResource($employee_id = null, $date = null, string $contentType = self::contentTypes['listSalaryTransactionsResource'][0])
    {
        list($response) = $this->listSalaryTransactionsResourceWithHttpInfo($employee_id, $date, $contentType);
        return $response;
    }

    /**
     * Operation listSalaryTransactionsResourceWithHttpInfo
     *
     * List all salary transactions for all employees
     *
     * @param  string $employee_id filter on employeeId (optional)
     * @param  \DateTime $date filter on date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SalaryTransactionListItemList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSalaryTransactionsResourceWithHttpInfo($employee_id = null, $date = null, string $contentType = self::contentTypes['listSalaryTransactionsResource'][0])
    {
        $request = $this->listSalaryTransactionsResourceRequest($employee_id, $date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SalaryTransactionListItemList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SalaryTransactionListItemList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SalaryTransactionListItemList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SalaryTransactionListItemList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SalaryTransactionListItemList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listSalaryTransactionsResourceAsync
     *
     * List all salary transactions for all employees
     *
     * @param  string $employee_id filter on employeeId (optional)
     * @param  \DateTime $date filter on date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSalaryTransactionsResourceAsync($employee_id = null, $date = null, string $contentType = self::contentTypes['listSalaryTransactionsResource'][0])
    {
        return $this->listSalaryTransactionsResourceAsyncWithHttpInfo($employee_id, $date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSalaryTransactionsResourceAsyncWithHttpInfo
     *
     * List all salary transactions for all employees
     *
     * @param  string $employee_id filter on employeeId (optional)
     * @param  \DateTime $date filter on date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSalaryTransactionsResourceAsyncWithHttpInfo($employee_id = null, $date = null, string $contentType = self::contentTypes['listSalaryTransactionsResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SalaryTransactionListItemList';
        $request = $this->listSalaryTransactionsResourceRequest($employee_id, $date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSalaryTransactionsResource'
     *
     * @param  string $employee_id filter on employeeId (optional)
     * @param  \DateTime $date filter on date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSalaryTransactionsResourceRequest($employee_id = null, $date = null, string $contentType = self::contentTypes['listSalaryTransactionsResource'][0])
    {




        $resourcePath = '/3/salarytransactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employee_id,
            'employeeId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSalaryTransactionsResource
     *
     * Update a salary transaction
     *
     * @param  int $salary_row identifies the salary transaction (required)
     * @param  \OpenAPI\Client\Model\SalaryTransactionWrap $salary_transaction to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SalaryTransactionWrap
     */
    public function updateSalaryTransactionsResource($salary_row, $salary_transaction = null, string $contentType = self::contentTypes['updateSalaryTransactionsResource'][0])
    {
        list($response) = $this->updateSalaryTransactionsResourceWithHttpInfo($salary_row, $salary_transaction, $contentType);
        return $response;
    }

    /**
     * Operation updateSalaryTransactionsResourceWithHttpInfo
     *
     * Update a salary transaction
     *
     * @param  int $salary_row identifies the salary transaction (required)
     * @param  \OpenAPI\Client\Model\SalaryTransactionWrap $salary_transaction to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SalaryTransactionWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSalaryTransactionsResourceWithHttpInfo($salary_row, $salary_transaction = null, string $contentType = self::contentTypes['updateSalaryTransactionsResource'][0])
    {
        $request = $this->updateSalaryTransactionsResourceRequest($salary_row, $salary_transaction, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SalaryTransactionWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SalaryTransactionWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SalaryTransactionWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SalaryTransactionWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SalaryTransactionWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSalaryTransactionsResourceAsync
     *
     * Update a salary transaction
     *
     * @param  int $salary_row identifies the salary transaction (required)
     * @param  \OpenAPI\Client\Model\SalaryTransactionWrap $salary_transaction to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSalaryTransactionsResourceAsync($salary_row, $salary_transaction = null, string $contentType = self::contentTypes['updateSalaryTransactionsResource'][0])
    {
        return $this->updateSalaryTransactionsResourceAsyncWithHttpInfo($salary_row, $salary_transaction, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSalaryTransactionsResourceAsyncWithHttpInfo
     *
     * Update a salary transaction
     *
     * @param  int $salary_row identifies the salary transaction (required)
     * @param  \OpenAPI\Client\Model\SalaryTransactionWrap $salary_transaction to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSalaryTransactionsResourceAsyncWithHttpInfo($salary_row, $salary_transaction = null, string $contentType = self::contentTypes['updateSalaryTransactionsResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SalaryTransactionWrap';
        $request = $this->updateSalaryTransactionsResourceRequest($salary_row, $salary_transaction, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSalaryTransactionsResource'
     *
     * @param  int $salary_row identifies the salary transaction (required)
     * @param  \OpenAPI\Client\Model\SalaryTransactionWrap $salary_transaction to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSalaryTransactionsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSalaryTransactionsResourceRequest($salary_row, $salary_transaction = null, string $contentType = self::contentTypes['updateSalaryTransactionsResource'][0])
    {

        // verify the required parameter 'salary_row' is set
        if ($salary_row === null || (is_array($salary_row) && count($salary_row) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $salary_row when calling updateSalaryTransactionsResource'
            );
        }



        $resourcePath = '/3/salarytransactions/{SalaryRow}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($salary_row !== null) {
            $resourcePath = str_replace(
                '{' . 'SalaryRow' . '}',
                ObjectSerializer::toPathValue($salary_row),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($salary_transaction)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($salary_transaction));
            } else {
                $httpBody = $salary_transaction;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
