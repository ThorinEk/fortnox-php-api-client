<?php
/**
 * CustomInboundDocumentResourceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  FortnoxApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [Guides & Good to Know section](https://www.fortnox.se/developer/guides-and-good-to-know/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit per access-token is 25 requests per 5 seconds. This equals to 300 requests per minute.  [Read more about this here.](https://www.fortnox.se/developer/guides-and-good-to-know/rate-limits-for-fortnox-api/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://www.fortnox.se/developer/guides-and-good-to-know/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FortnoxApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FortnoxApi\ApiException;
use FortnoxApi\Configuration;
use FortnoxApi\HeaderSelector;
use FortnoxApi\ObjectSerializer;

/**
 * CustomInboundDocumentResourceApi Class Doc Comment
 *
 * @category Class
 * @package  FortnoxApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomInboundDocumentResourceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getCustomInboundDocumentResource' => [
            'application/json',
        ],
        'releaseCustomInboundDocumentResource' => [
            'application/json',
        ],
        'saveCustomInboundDocumentResource' => [
            'application/json',
        ],
        'voidDocumentCustomInboundDocumentResource' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCustomInboundDocumentResource
     *
     * Get custom inbound document
     *
     * @param  string $type Document type. (required)
     * @param  string $id Document id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\CustomInboundDocument
     */
    public function getCustomInboundDocumentResource($type, $id, string $contentType = self::contentTypes['getCustomInboundDocumentResource'][0])
    {
        list($response) = $this->getCustomInboundDocumentResourceWithHttpInfo($type, $id, $contentType);
        return $response;
    }

    /**
     * Operation getCustomInboundDocumentResourceWithHttpInfo
     *
     * Get custom inbound document
     *
     * @param  string $type Document type. (required)
     * @param  string $id Document id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\CustomInboundDocument, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomInboundDocumentResourceWithHttpInfo($type, $id, string $contentType = self::contentTypes['getCustomInboundDocumentResource'][0])
    {
        $request = $this->getCustomInboundDocumentResourceRequest($type, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\CustomInboundDocument' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\CustomInboundDocument' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\CustomInboundDocument', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\CustomInboundDocument';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\CustomInboundDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomInboundDocumentResourceAsync
     *
     * Get custom inbound document
     *
     * @param  string $type Document type. (required)
     * @param  string $id Document id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomInboundDocumentResourceAsync($type, $id, string $contentType = self::contentTypes['getCustomInboundDocumentResource'][0])
    {
        return $this->getCustomInboundDocumentResourceAsyncWithHttpInfo($type, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomInboundDocumentResourceAsyncWithHttpInfo
     *
     * Get custom inbound document
     *
     * @param  string $type Document type. (required)
     * @param  string $id Document id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomInboundDocumentResourceAsyncWithHttpInfo($type, $id, string $contentType = self::contentTypes['getCustomInboundDocumentResource'][0])
    {
        $returnType = '\FortnoxApi\Model\CustomInboundDocument';
        $request = $this->getCustomInboundDocumentResourceRequest($type, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomInboundDocumentResource'
     *
     * @param  string $type Document type. (required)
     * @param  string $id Document id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomInboundDocumentResourceRequest($type, $id, string $contentType = self::contentTypes['getCustomInboundDocumentResource'][0])
    {

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling getCustomInboundDocumentResource'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCustomInboundDocumentResource'
            );
        }


        $resourcePath = '/api/warehouse/documentdeliveries/custom/inbound-v1/{type}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation releaseCustomInboundDocumentResource
     *
     * Release custom inbound document
     *
     * @param  string $type document type (required)
     * @param  string $id document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function releaseCustomInboundDocumentResource($type, $id, string $contentType = self::contentTypes['releaseCustomInboundDocumentResource'][0])
    {
        $this->releaseCustomInboundDocumentResourceWithHttpInfo($type, $id, $contentType);
    }

    /**
     * Operation releaseCustomInboundDocumentResourceWithHttpInfo
     *
     * Release custom inbound document
     *
     * @param  string $type document type (required)
     * @param  string $id document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function releaseCustomInboundDocumentResourceWithHttpInfo($type, $id, string $contentType = self::contentTypes['releaseCustomInboundDocumentResource'][0])
    {
        $request = $this->releaseCustomInboundDocumentResourceRequest($type, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation releaseCustomInboundDocumentResourceAsync
     *
     * Release custom inbound document
     *
     * @param  string $type document type (required)
     * @param  string $id document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function releaseCustomInboundDocumentResourceAsync($type, $id, string $contentType = self::contentTypes['releaseCustomInboundDocumentResource'][0])
    {
        return $this->releaseCustomInboundDocumentResourceAsyncWithHttpInfo($type, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation releaseCustomInboundDocumentResourceAsyncWithHttpInfo
     *
     * Release custom inbound document
     *
     * @param  string $type document type (required)
     * @param  string $id document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function releaseCustomInboundDocumentResourceAsyncWithHttpInfo($type, $id, string $contentType = self::contentTypes['releaseCustomInboundDocumentResource'][0])
    {
        $returnType = '';
        $request = $this->releaseCustomInboundDocumentResourceRequest($type, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'releaseCustomInboundDocumentResource'
     *
     * @param  string $type document type (required)
     * @param  string $id document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function releaseCustomInboundDocumentResourceRequest($type, $id, string $contentType = self::contentTypes['releaseCustomInboundDocumentResource'][0])
    {

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling releaseCustomInboundDocumentResource'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling releaseCustomInboundDocumentResource'
            );
        }


        $resourcePath = '/api/warehouse/documentdeliveries/custom/inbound-v1/{type}/{id}/release';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saveCustomInboundDocumentResource
     *
     * Save custom inbound document
     *
     * @param  string $type min 1 character, max 25 characters, may contain letters A-Z, digits 0-9, underscore (_), and dash (-), type is case-insensitive  &lt;blockquote&gt;&lt;pre&gt;       Type is a custom name/reference of the document that will be used to reference the document type &lt;br&gt;       * If type is not known, it will be registered as belonging to the INBOUND category. &lt;br&gt;       * If type is an existing custom document type of category OUTBOUND an error is thrown. &lt;br&gt;       * If type is invalid an error is thrown. &lt;br&gt;  &lt;/pre&gt;&lt;/blockquote&gt; (required)
     * @param  string $id min 1 character, max 25 characters, may only contain digits 0-9 (required)
     * @param  \FortnoxApi\Model\CustomInboundDocument $document the &lt;code&gt;CustomInboundDocument&lt;/code&gt; to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\CustomInboundDocument
     */
    public function saveCustomInboundDocumentResource($type, $id, $document = null, string $contentType = self::contentTypes['saveCustomInboundDocumentResource'][0])
    {
        list($response) = $this->saveCustomInboundDocumentResourceWithHttpInfo($type, $id, $document, $contentType);
        return $response;
    }

    /**
     * Operation saveCustomInboundDocumentResourceWithHttpInfo
     *
     * Save custom inbound document
     *
     * @param  string $type min 1 character, max 25 characters, may contain letters A-Z, digits 0-9, underscore (_), and dash (-), type is case-insensitive  &lt;blockquote&gt;&lt;pre&gt;       Type is a custom name/reference of the document that will be used to reference the document type &lt;br&gt;       * If type is not known, it will be registered as belonging to the INBOUND category. &lt;br&gt;       * If type is an existing custom document type of category OUTBOUND an error is thrown. &lt;br&gt;       * If type is invalid an error is thrown. &lt;br&gt;  &lt;/pre&gt;&lt;/blockquote&gt; (required)
     * @param  string $id min 1 character, max 25 characters, may only contain digits 0-9 (required)
     * @param  \FortnoxApi\Model\CustomInboundDocument $document the &lt;code&gt;CustomInboundDocument&lt;/code&gt; to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\CustomInboundDocument, HTTP status code, HTTP response headers (array of strings)
     */
    public function saveCustomInboundDocumentResourceWithHttpInfo($type, $id, $document = null, string $contentType = self::contentTypes['saveCustomInboundDocumentResource'][0])
    {
        $request = $this->saveCustomInboundDocumentResourceRequest($type, $id, $document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\CustomInboundDocument' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\CustomInboundDocument' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\CustomInboundDocument', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\CustomInboundDocument';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\CustomInboundDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saveCustomInboundDocumentResourceAsync
     *
     * Save custom inbound document
     *
     * @param  string $type min 1 character, max 25 characters, may contain letters A-Z, digits 0-9, underscore (_), and dash (-), type is case-insensitive  &lt;blockquote&gt;&lt;pre&gt;       Type is a custom name/reference of the document that will be used to reference the document type &lt;br&gt;       * If type is not known, it will be registered as belonging to the INBOUND category. &lt;br&gt;       * If type is an existing custom document type of category OUTBOUND an error is thrown. &lt;br&gt;       * If type is invalid an error is thrown. &lt;br&gt;  &lt;/pre&gt;&lt;/blockquote&gt; (required)
     * @param  string $id min 1 character, max 25 characters, may only contain digits 0-9 (required)
     * @param  \FortnoxApi\Model\CustomInboundDocument $document the &lt;code&gt;CustomInboundDocument&lt;/code&gt; to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveCustomInboundDocumentResourceAsync($type, $id, $document = null, string $contentType = self::contentTypes['saveCustomInboundDocumentResource'][0])
    {
        return $this->saveCustomInboundDocumentResourceAsyncWithHttpInfo($type, $id, $document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saveCustomInboundDocumentResourceAsyncWithHttpInfo
     *
     * Save custom inbound document
     *
     * @param  string $type min 1 character, max 25 characters, may contain letters A-Z, digits 0-9, underscore (_), and dash (-), type is case-insensitive  &lt;blockquote&gt;&lt;pre&gt;       Type is a custom name/reference of the document that will be used to reference the document type &lt;br&gt;       * If type is not known, it will be registered as belonging to the INBOUND category. &lt;br&gt;       * If type is an existing custom document type of category OUTBOUND an error is thrown. &lt;br&gt;       * If type is invalid an error is thrown. &lt;br&gt;  &lt;/pre&gt;&lt;/blockquote&gt; (required)
     * @param  string $id min 1 character, max 25 characters, may only contain digits 0-9 (required)
     * @param  \FortnoxApi\Model\CustomInboundDocument $document the &lt;code&gt;CustomInboundDocument&lt;/code&gt; to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveCustomInboundDocumentResourceAsyncWithHttpInfo($type, $id, $document = null, string $contentType = self::contentTypes['saveCustomInboundDocumentResource'][0])
    {
        $returnType = '\FortnoxApi\Model\CustomInboundDocument';
        $request = $this->saveCustomInboundDocumentResourceRequest($type, $id, $document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saveCustomInboundDocumentResource'
     *
     * @param  string $type min 1 character, max 25 characters, may contain letters A-Z, digits 0-9, underscore (_), and dash (-), type is case-insensitive  &lt;blockquote&gt;&lt;pre&gt;       Type is a custom name/reference of the document that will be used to reference the document type &lt;br&gt;       * If type is not known, it will be registered as belonging to the INBOUND category. &lt;br&gt;       * If type is an existing custom document type of category OUTBOUND an error is thrown. &lt;br&gt;       * If type is invalid an error is thrown. &lt;br&gt;  &lt;/pre&gt;&lt;/blockquote&gt; (required)
     * @param  string $id min 1 character, max 25 characters, may only contain digits 0-9 (required)
     * @param  \FortnoxApi\Model\CustomInboundDocument $document the &lt;code&gt;CustomInboundDocument&lt;/code&gt; to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function saveCustomInboundDocumentResourceRequest($type, $id, $document = null, string $contentType = self::contentTypes['saveCustomInboundDocumentResource'][0])
    {

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling saveCustomInboundDocumentResource'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling saveCustomInboundDocumentResource'
            );
        }



        $resourcePath = '/api/warehouse/documentdeliveries/custom/inbound-v1/{type}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($document)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($document));
            } else {
                $httpBody = $document;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation voidDocumentCustomInboundDocumentResource
     *
     * Void custom inbound document
     *
     * @param  string $type document type (required)
     * @param  string $id document id (required)
     * @param  bool $force true if the document should be voided even if the document has connected outbounds, defaults to false. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidDocumentCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function voidDocumentCustomInboundDocumentResource($type, $id, $force = null, string $contentType = self::contentTypes['voidDocumentCustomInboundDocumentResource'][0])
    {
        $this->voidDocumentCustomInboundDocumentResourceWithHttpInfo($type, $id, $force, $contentType);
    }

    /**
     * Operation voidDocumentCustomInboundDocumentResourceWithHttpInfo
     *
     * Void custom inbound document
     *
     * @param  string $type document type (required)
     * @param  string $id document id (required)
     * @param  bool $force true if the document should be voided even if the document has connected outbounds, defaults to false. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidDocumentCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function voidDocumentCustomInboundDocumentResourceWithHttpInfo($type, $id, $force = null, string $contentType = self::contentTypes['voidDocumentCustomInboundDocumentResource'][0])
    {
        $request = $this->voidDocumentCustomInboundDocumentResourceRequest($type, $id, $force, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation voidDocumentCustomInboundDocumentResourceAsync
     *
     * Void custom inbound document
     *
     * @param  string $type document type (required)
     * @param  string $id document id (required)
     * @param  bool $force true if the document should be voided even if the document has connected outbounds, defaults to false. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidDocumentCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidDocumentCustomInboundDocumentResourceAsync($type, $id, $force = null, string $contentType = self::contentTypes['voidDocumentCustomInboundDocumentResource'][0])
    {
        return $this->voidDocumentCustomInboundDocumentResourceAsyncWithHttpInfo($type, $id, $force, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation voidDocumentCustomInboundDocumentResourceAsyncWithHttpInfo
     *
     * Void custom inbound document
     *
     * @param  string $type document type (required)
     * @param  string $id document id (required)
     * @param  bool $force true if the document should be voided even if the document has connected outbounds, defaults to false. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidDocumentCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidDocumentCustomInboundDocumentResourceAsyncWithHttpInfo($type, $id, $force = null, string $contentType = self::contentTypes['voidDocumentCustomInboundDocumentResource'][0])
    {
        $returnType = '';
        $request = $this->voidDocumentCustomInboundDocumentResourceRequest($type, $id, $force, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'voidDocumentCustomInboundDocumentResource'
     *
     * @param  string $type document type (required)
     * @param  string $id document id (required)
     * @param  bool $force true if the document should be voided even if the document has connected outbounds, defaults to false. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidDocumentCustomInboundDocumentResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function voidDocumentCustomInboundDocumentResourceRequest($type, $id, $force = null, string $contentType = self::contentTypes['voidDocumentCustomInboundDocumentResource'][0])
    {

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling voidDocumentCustomInboundDocumentResource'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling voidDocumentCustomInboundDocumentResource'
            );
        }



        $resourcePath = '/api/warehouse/documentdeliveries/custom/inbound-v1/{type}/{id}/void';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force,
            'force', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
