<?php
/**
 * VouchersResourceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  FortnoxApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [Guides & Good to Know section](https://www.fortnox.se/developer/guides-and-good-to-know/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit per access-token is 25 requests per 5 seconds. This equals to 300 requests per minute.  [Read more about this here.](https://www.fortnox.se/developer/guides-and-good-to-know/rate-limits-for-fortnox-api/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://www.fortnox.se/developer/guides-and-good-to-know/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FortnoxApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FortnoxApi\ApiException;
use FortnoxApi\Configuration;
use FortnoxApi\HeaderSelector;
use FortnoxApi\ObjectSerializer;

/**
 * VouchersResourceApi Class Doc Comment
 *
 * @category Class
 * @package  FortnoxApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VouchersResourceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createVouchersResource' => [
            'application/json',
        ],
        'getVouchersResource' => [
            'application/json',
        ],
        'listSeries' => [
            'application/json',
        ],
        'listVouchersResource' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createVouchersResource
     *
     * Create a voucher
     *
     * @param  int $financialyear Financial year id, used to determine which financial year the voucher is created in (optional)
     * @param  \FortnoxApi\Model\VoucherWrap $voucher voucher to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVouchersResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\VoucherWrap
     */
    public function createVouchersResource($financialyear = null, $voucher = null, string $contentType = self::contentTypes['createVouchersResource'][0])
    {
        list($response) = $this->createVouchersResourceWithHttpInfo($financialyear, $voucher, $contentType);
        return $response;
    }

    /**
     * Operation createVouchersResourceWithHttpInfo
     *
     * Create a voucher
     *
     * @param  int $financialyear Financial year id, used to determine which financial year the voucher is created in (optional)
     * @param  \FortnoxApi\Model\VoucherWrap $voucher voucher to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVouchersResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\VoucherWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function createVouchersResourceWithHttpInfo($financialyear = null, $voucher = null, string $contentType = self::contentTypes['createVouchersResource'][0])
    {
        $request = $this->createVouchersResourceRequest($financialyear, $voucher, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\VoucherWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\VoucherWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\VoucherWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\VoucherWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\VoucherWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createVouchersResourceAsync
     *
     * Create a voucher
     *
     * @param  int $financialyear Financial year id, used to determine which financial year the voucher is created in (optional)
     * @param  \FortnoxApi\Model\VoucherWrap $voucher voucher to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVouchersResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createVouchersResourceAsync($financialyear = null, $voucher = null, string $contentType = self::contentTypes['createVouchersResource'][0])
    {
        return $this->createVouchersResourceAsyncWithHttpInfo($financialyear, $voucher, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createVouchersResourceAsyncWithHttpInfo
     *
     * Create a voucher
     *
     * @param  int $financialyear Financial year id, used to determine which financial year the voucher is created in (optional)
     * @param  \FortnoxApi\Model\VoucherWrap $voucher voucher to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVouchersResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createVouchersResourceAsyncWithHttpInfo($financialyear = null, $voucher = null, string $contentType = self::contentTypes['createVouchersResource'][0])
    {
        $returnType = '\FortnoxApi\Model\VoucherWrap';
        $request = $this->createVouchersResourceRequest($financialyear, $voucher, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createVouchersResource'
     *
     * @param  int $financialyear Financial year id, used to determine which financial year the voucher is created in (optional)
     * @param  \FortnoxApi\Model\VoucherWrap $voucher voucher to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVouchersResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createVouchersResourceRequest($financialyear = null, $voucher = null, string $contentType = self::contentTypes['createVouchersResource'][0])
    {




        $resourcePath = '/3/vouchers/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $financialyear,
            'financialyear', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($voucher)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($voucher));
            } else {
                $httpBody = $voucher;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVouchersResource
     *
     * Retrieve a specific voucher
     *
     * @param  string $voucher_series identifies the voucher series (required)
     * @param  int $voucher_number identifies the voucher number (required)
     * @param  int $financialyear filter on financial year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVouchersResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\VoucherWrap
     */
    public function getVouchersResource($voucher_series, $voucher_number, $financialyear = null, string $contentType = self::contentTypes['getVouchersResource'][0])
    {
        list($response) = $this->getVouchersResourceWithHttpInfo($voucher_series, $voucher_number, $financialyear, $contentType);
        return $response;
    }

    /**
     * Operation getVouchersResourceWithHttpInfo
     *
     * Retrieve a specific voucher
     *
     * @param  string $voucher_series identifies the voucher series (required)
     * @param  int $voucher_number identifies the voucher number (required)
     * @param  int $financialyear filter on financial year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVouchersResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\VoucherWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVouchersResourceWithHttpInfo($voucher_series, $voucher_number, $financialyear = null, string $contentType = self::contentTypes['getVouchersResource'][0])
    {
        $request = $this->getVouchersResourceRequest($voucher_series, $voucher_number, $financialyear, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\VoucherWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\VoucherWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\VoucherWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\VoucherWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\VoucherWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVouchersResourceAsync
     *
     * Retrieve a specific voucher
     *
     * @param  string $voucher_series identifies the voucher series (required)
     * @param  int $voucher_number identifies the voucher number (required)
     * @param  int $financialyear filter on financial year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVouchersResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVouchersResourceAsync($voucher_series, $voucher_number, $financialyear = null, string $contentType = self::contentTypes['getVouchersResource'][0])
    {
        return $this->getVouchersResourceAsyncWithHttpInfo($voucher_series, $voucher_number, $financialyear, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVouchersResourceAsyncWithHttpInfo
     *
     * Retrieve a specific voucher
     *
     * @param  string $voucher_series identifies the voucher series (required)
     * @param  int $voucher_number identifies the voucher number (required)
     * @param  int $financialyear filter on financial year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVouchersResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVouchersResourceAsyncWithHttpInfo($voucher_series, $voucher_number, $financialyear = null, string $contentType = self::contentTypes['getVouchersResource'][0])
    {
        $returnType = '\FortnoxApi\Model\VoucherWrap';
        $request = $this->getVouchersResourceRequest($voucher_series, $voucher_number, $financialyear, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVouchersResource'
     *
     * @param  string $voucher_series identifies the voucher series (required)
     * @param  int $voucher_number identifies the voucher number (required)
     * @param  int $financialyear filter on financial year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVouchersResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVouchersResourceRequest($voucher_series, $voucher_number, $financialyear = null, string $contentType = self::contentTypes['getVouchersResource'][0])
    {

        // verify the required parameter 'voucher_series' is set
        if ($voucher_series === null || (is_array($voucher_series) && count($voucher_series) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voucher_series when calling getVouchersResource'
            );
        }

        // verify the required parameter 'voucher_number' is set
        if ($voucher_number === null || (is_array($voucher_number) && count($voucher_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voucher_number when calling getVouchersResource'
            );
        }



        $resourcePath = '/3/vouchers/{VoucherSeries}/{VoucherNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $financialyear,
            'financialyear', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($voucher_series !== null) {
            $resourcePath = str_replace(
                '{' . 'VoucherSeries' . '}',
                ObjectSerializer::toPathValue($voucher_series),
                $resourcePath
            );
        }
        // path params
        if ($voucher_number !== null) {
            $resourcePath = str_replace(
                '{' . 'VoucherNumber' . '}',
                ObjectSerializer::toPathValue($voucher_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSeries
     *
     * Retrieve a list of vouchers for a specific series
     *
     * @param  string $voucher_series identifies the voucher series (required)
     * @param  int $financialyear filter on financial year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSeries'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\VoucherListItemList
     */
    public function listSeries($voucher_series, $financialyear = null, string $contentType = self::contentTypes['listSeries'][0])
    {
        list($response) = $this->listSeriesWithHttpInfo($voucher_series, $financialyear, $contentType);
        return $response;
    }

    /**
     * Operation listSeriesWithHttpInfo
     *
     * Retrieve a list of vouchers for a specific series
     *
     * @param  string $voucher_series identifies the voucher series (required)
     * @param  int $financialyear filter on financial year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSeries'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\VoucherListItemList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSeriesWithHttpInfo($voucher_series, $financialyear = null, string $contentType = self::contentTypes['listSeries'][0])
    {
        $request = $this->listSeriesRequest($voucher_series, $financialyear, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\VoucherListItemList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\VoucherListItemList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\VoucherListItemList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\VoucherListItemList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\VoucherListItemList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listSeriesAsync
     *
     * Retrieve a list of vouchers for a specific series
     *
     * @param  string $voucher_series identifies the voucher series (required)
     * @param  int $financialyear filter on financial year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSeries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSeriesAsync($voucher_series, $financialyear = null, string $contentType = self::contentTypes['listSeries'][0])
    {
        return $this->listSeriesAsyncWithHttpInfo($voucher_series, $financialyear, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSeriesAsyncWithHttpInfo
     *
     * Retrieve a list of vouchers for a specific series
     *
     * @param  string $voucher_series identifies the voucher series (required)
     * @param  int $financialyear filter on financial year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSeries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSeriesAsyncWithHttpInfo($voucher_series, $financialyear = null, string $contentType = self::contentTypes['listSeries'][0])
    {
        $returnType = '\FortnoxApi\Model\VoucherListItemList';
        $request = $this->listSeriesRequest($voucher_series, $financialyear, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSeries'
     *
     * @param  string $voucher_series identifies the voucher series (required)
     * @param  int $financialyear filter on financial year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSeries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSeriesRequest($voucher_series, $financialyear = null, string $contentType = self::contentTypes['listSeries'][0])
    {

        // verify the required parameter 'voucher_series' is set
        if ($voucher_series === null || (is_array($voucher_series) && count($voucher_series) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voucher_series when calling listSeries'
            );
        }



        $resourcePath = '/3/vouchers/sublist/{VoucherSeries}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $financialyear,
            'financialyear', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($voucher_series !== null) {
            $resourcePath = str_replace(
                '{' . 'VoucherSeries' . '}',
                ObjectSerializer::toPathValue($voucher_series),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listVouchersResource
     *
     * Retrieve all vouchers
     *
     * @param  int $financialyear filter on financial year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listVouchersResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\VoucherListItemList
     */
    public function listVouchersResource($financialyear = null, string $contentType = self::contentTypes['listVouchersResource'][0])
    {
        list($response) = $this->listVouchersResourceWithHttpInfo($financialyear, $contentType);
        return $response;
    }

    /**
     * Operation listVouchersResourceWithHttpInfo
     *
     * Retrieve all vouchers
     *
     * @param  int $financialyear filter on financial year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listVouchersResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\VoucherListItemList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listVouchersResourceWithHttpInfo($financialyear = null, string $contentType = self::contentTypes['listVouchersResource'][0])
    {
        $request = $this->listVouchersResourceRequest($financialyear, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\VoucherListItemList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\VoucherListItemList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\VoucherListItemList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\VoucherListItemList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\VoucherListItemList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listVouchersResourceAsync
     *
     * Retrieve all vouchers
     *
     * @param  int $financialyear filter on financial year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listVouchersResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listVouchersResourceAsync($financialyear = null, string $contentType = self::contentTypes['listVouchersResource'][0])
    {
        return $this->listVouchersResourceAsyncWithHttpInfo($financialyear, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listVouchersResourceAsyncWithHttpInfo
     *
     * Retrieve all vouchers
     *
     * @param  int $financialyear filter on financial year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listVouchersResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listVouchersResourceAsyncWithHttpInfo($financialyear = null, string $contentType = self::contentTypes['listVouchersResource'][0])
    {
        $returnType = '\FortnoxApi\Model\VoucherListItemList';
        $request = $this->listVouchersResourceRequest($financialyear, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listVouchersResource'
     *
     * @param  int $financialyear filter on financial year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listVouchersResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listVouchersResourceRequest($financialyear = null, string $contentType = self::contentTypes['listVouchersResource'][0])
    {



        $resourcePath = '/3/vouchers/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $financialyear,
            'financialyear', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
