<?php
/**
 * ContractsResourceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  FortnoxApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [Guides & Good to Know section](https://www.fortnox.se/developer/guides-and-good-to-know/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit per access-token is 25 requests per 5 seconds. This equals to 300 requests per minute.  [Read more about this here.](https://www.fortnox.se/developer/guides-and-good-to-know/rate-limits-for-fortnox-api/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://www.fortnox.se/developer/guides-and-good-to-know/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FortnoxApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FortnoxApi\ApiException;
use FortnoxApi\Configuration;
use FortnoxApi\HeaderSelector;
use FortnoxApi\ObjectSerializer;

/**
 * ContractsResourceApi Class Doc Comment
 *
 * @category Class
 * @package  FortnoxApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ContractsResourceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createContractsResource' => [
            'application/json',
        ],
        'createinvoice' => [
            'application/json',
        ],
        'finish' => [
            'application/json',
        ],
        'getContractsResource' => [
            'application/json',
        ],
        'increaseinvoicecount' => [
            'application/json',
        ],
        'listContractsResource' => [
            'application/json',
        ],
        'updateContractsResource' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createContractsResource
     *
     * Create a contract
     *
     * @param  \FortnoxApi\Model\ContractWrap $contract contract to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createContractsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\ContractWrap
     */
    public function createContractsResource($contract = null, string $contentType = self::contentTypes['createContractsResource'][0])
    {
        list($response) = $this->createContractsResourceWithHttpInfo($contract, $contentType);
        return $response;
    }

    /**
     * Operation createContractsResourceWithHttpInfo
     *
     * Create a contract
     *
     * @param  \FortnoxApi\Model\ContractWrap $contract contract to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createContractsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\ContractWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function createContractsResourceWithHttpInfo($contract = null, string $contentType = self::contentTypes['createContractsResource'][0])
    {
        $request = $this->createContractsResourceRequest($contract, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\ContractWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\ContractWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\ContractWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\ContractWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\ContractWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createContractsResourceAsync
     *
     * Create a contract
     *
     * @param  \FortnoxApi\Model\ContractWrap $contract contract to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createContractsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createContractsResourceAsync($contract = null, string $contentType = self::contentTypes['createContractsResource'][0])
    {
        return $this->createContractsResourceAsyncWithHttpInfo($contract, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createContractsResourceAsyncWithHttpInfo
     *
     * Create a contract
     *
     * @param  \FortnoxApi\Model\ContractWrap $contract contract to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createContractsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createContractsResourceAsyncWithHttpInfo($contract = null, string $contentType = self::contentTypes['createContractsResource'][0])
    {
        $returnType = '\FortnoxApi\Model\ContractWrap';
        $request = $this->createContractsResourceRequest($contract, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createContractsResource'
     *
     * @param  \FortnoxApi\Model\ContractWrap $contract contract to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createContractsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createContractsResourceRequest($contract = null, string $contentType = self::contentTypes['createContractsResource'][0])
    {



        $resourcePath = '/3/contracts/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contract)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contract));
            } else {
                $httpBody = $contract;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createinvoice
     *
     * Create invoice from contract
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createinvoice'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\InvoiceWrap
     */
    public function createinvoice($document_number, string $contentType = self::contentTypes['createinvoice'][0])
    {
        list($response) = $this->createinvoiceWithHttpInfo($document_number, $contentType);
        return $response;
    }

    /**
     * Operation createinvoiceWithHttpInfo
     *
     * Create invoice from contract
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createinvoice'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\InvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function createinvoiceWithHttpInfo($document_number, string $contentType = self::contentTypes['createinvoice'][0])
    {
        $request = $this->createinvoiceRequest($document_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\InvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\InvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\InvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\InvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\InvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createinvoiceAsync
     *
     * Create invoice from contract
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createinvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createinvoiceAsync($document_number, string $contentType = self::contentTypes['createinvoice'][0])
    {
        return $this->createinvoiceAsyncWithHttpInfo($document_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createinvoiceAsyncWithHttpInfo
     *
     * Create invoice from contract
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createinvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createinvoiceAsyncWithHttpInfo($document_number, string $contentType = self::contentTypes['createinvoice'][0])
    {
        $returnType = '\FortnoxApi\Model\InvoiceWrap';
        $request = $this->createinvoiceRequest($document_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createinvoice'
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createinvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createinvoiceRequest($document_number, string $contentType = self::contentTypes['createinvoice'][0])
    {

        // verify the required parameter 'document_number' is set
        if ($document_number === null || (is_array($document_number) && count($document_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_number when calling createinvoice'
            );
        }


        $resourcePath = '/3/contracts/{DocumentNumber}/createinvoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_number !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentNumber' . '}',
                ObjectSerializer::toPathValue($document_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation finish
     *
     * Set a contract as finished
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finish'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\ContractWrap
     */
    public function finish($document_number, string $contentType = self::contentTypes['finish'][0])
    {
        list($response) = $this->finishWithHttpInfo($document_number, $contentType);
        return $response;
    }

    /**
     * Operation finishWithHttpInfo
     *
     * Set a contract as finished
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finish'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\ContractWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function finishWithHttpInfo($document_number, string $contentType = self::contentTypes['finish'][0])
    {
        $request = $this->finishRequest($document_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\ContractWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\ContractWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\ContractWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\ContractWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\ContractWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation finishAsync
     *
     * Set a contract as finished
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finish'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function finishAsync($document_number, string $contentType = self::contentTypes['finish'][0])
    {
        return $this->finishAsyncWithHttpInfo($document_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation finishAsyncWithHttpInfo
     *
     * Set a contract as finished
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finish'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function finishAsyncWithHttpInfo($document_number, string $contentType = self::contentTypes['finish'][0])
    {
        $returnType = '\FortnoxApi\Model\ContractWrap';
        $request = $this->finishRequest($document_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'finish'
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finish'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function finishRequest($document_number, string $contentType = self::contentTypes['finish'][0])
    {

        // verify the required parameter 'document_number' is set
        if ($document_number === null || (is_array($document_number) && count($document_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_number when calling finish'
            );
        }


        $resourcePath = '/3/contracts/{DocumentNumber}/finish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_number !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentNumber' . '}',
                ObjectSerializer::toPathValue($document_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContractsResource
     *
     * Retrieve a single contract
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContractsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\ContractWrap
     */
    public function getContractsResource($document_number, string $contentType = self::contentTypes['getContractsResource'][0])
    {
        list($response) = $this->getContractsResourceWithHttpInfo($document_number, $contentType);
        return $response;
    }

    /**
     * Operation getContractsResourceWithHttpInfo
     *
     * Retrieve a single contract
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContractsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\ContractWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContractsResourceWithHttpInfo($document_number, string $contentType = self::contentTypes['getContractsResource'][0])
    {
        $request = $this->getContractsResourceRequest($document_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\ContractWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\ContractWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\ContractWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\ContractWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\ContractWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContractsResourceAsync
     *
     * Retrieve a single contract
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContractsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractsResourceAsync($document_number, string $contentType = self::contentTypes['getContractsResource'][0])
    {
        return $this->getContractsResourceAsyncWithHttpInfo($document_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContractsResourceAsyncWithHttpInfo
     *
     * Retrieve a single contract
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContractsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractsResourceAsyncWithHttpInfo($document_number, string $contentType = self::contentTypes['getContractsResource'][0])
    {
        $returnType = '\FortnoxApi\Model\ContractWrap';
        $request = $this->getContractsResourceRequest($document_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContractsResource'
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContractsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getContractsResourceRequest($document_number, string $contentType = self::contentTypes['getContractsResource'][0])
    {

        // verify the required parameter 'document_number' is set
        if ($document_number === null || (is_array($document_number) && count($document_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_number when calling getContractsResource'
            );
        }


        $resourcePath = '/3/contracts/{DocumentNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_number !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentNumber' . '}',
                ObjectSerializer::toPathValue($document_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation increaseinvoicecount
     *
     * Increases the invoice count without creating an invoice
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['increaseinvoicecount'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\ContractWrap
     */
    public function increaseinvoicecount($document_number, string $contentType = self::contentTypes['increaseinvoicecount'][0])
    {
        list($response) = $this->increaseinvoicecountWithHttpInfo($document_number, $contentType);
        return $response;
    }

    /**
     * Operation increaseinvoicecountWithHttpInfo
     *
     * Increases the invoice count without creating an invoice
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['increaseinvoicecount'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\ContractWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function increaseinvoicecountWithHttpInfo($document_number, string $contentType = self::contentTypes['increaseinvoicecount'][0])
    {
        $request = $this->increaseinvoicecountRequest($document_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\ContractWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\ContractWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\ContractWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\ContractWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\ContractWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation increaseinvoicecountAsync
     *
     * Increases the invoice count without creating an invoice
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['increaseinvoicecount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function increaseinvoicecountAsync($document_number, string $contentType = self::contentTypes['increaseinvoicecount'][0])
    {
        return $this->increaseinvoicecountAsyncWithHttpInfo($document_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation increaseinvoicecountAsyncWithHttpInfo
     *
     * Increases the invoice count without creating an invoice
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['increaseinvoicecount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function increaseinvoicecountAsyncWithHttpInfo($document_number, string $contentType = self::contentTypes['increaseinvoicecount'][0])
    {
        $returnType = '\FortnoxApi\Model\ContractWrap';
        $request = $this->increaseinvoicecountRequest($document_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'increaseinvoicecount'
     *
     * @param  string $document_number identifies the contract (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['increaseinvoicecount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function increaseinvoicecountRequest($document_number, string $contentType = self::contentTypes['increaseinvoicecount'][0])
    {

        // verify the required parameter 'document_number' is set
        if ($document_number === null || (is_array($document_number) && count($document_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_number when calling increaseinvoicecount'
            );
        }


        $resourcePath = '/3/contracts/{DocumentNumber}/increaseinvoicecount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_number !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentNumber' . '}',
                ObjectSerializer::toPathValue($document_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listContractsResource
     *
     * Retrieve a list of contracts
     *
     * @param  string $filter possibility to filter contracts (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listContractsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\ContractListItemList
     */
    public function listContractsResource($filter = null, string $contentType = self::contentTypes['listContractsResource'][0])
    {
        list($response) = $this->listContractsResourceWithHttpInfo($filter, $contentType);
        return $response;
    }

    /**
     * Operation listContractsResourceWithHttpInfo
     *
     * Retrieve a list of contracts
     *
     * @param  string $filter possibility to filter contracts (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listContractsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\ContractListItemList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listContractsResourceWithHttpInfo($filter = null, string $contentType = self::contentTypes['listContractsResource'][0])
    {
        $request = $this->listContractsResourceRequest($filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\ContractListItemList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\ContractListItemList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\ContractListItemList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\ContractListItemList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\ContractListItemList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listContractsResourceAsync
     *
     * Retrieve a list of contracts
     *
     * @param  string $filter possibility to filter contracts (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listContractsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listContractsResourceAsync($filter = null, string $contentType = self::contentTypes['listContractsResource'][0])
    {
        return $this->listContractsResourceAsyncWithHttpInfo($filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listContractsResourceAsyncWithHttpInfo
     *
     * Retrieve a list of contracts
     *
     * @param  string $filter possibility to filter contracts (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listContractsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listContractsResourceAsyncWithHttpInfo($filter = null, string $contentType = self::contentTypes['listContractsResource'][0])
    {
        $returnType = '\FortnoxApi\Model\ContractListItemList';
        $request = $this->listContractsResourceRequest($filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listContractsResource'
     *
     * @param  string $filter possibility to filter contracts (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listContractsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listContractsResourceRequest($filter = null, string $contentType = self::contentTypes['listContractsResource'][0])
    {



        $resourcePath = '/3/contracts/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateContractsResource
     *
     * Update a contract
     *
     * @param  string $document_number identifies the contract (required)
     * @param  \FortnoxApi\Model\ContractWrap $contract contract to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateContractsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\ContractWrap
     */
    public function updateContractsResource($document_number, $contract = null, string $contentType = self::contentTypes['updateContractsResource'][0])
    {
        list($response) = $this->updateContractsResourceWithHttpInfo($document_number, $contract, $contentType);
        return $response;
    }

    /**
     * Operation updateContractsResourceWithHttpInfo
     *
     * Update a contract
     *
     * @param  string $document_number identifies the contract (required)
     * @param  \FortnoxApi\Model\ContractWrap $contract contract to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateContractsResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\ContractWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateContractsResourceWithHttpInfo($document_number, $contract = null, string $contentType = self::contentTypes['updateContractsResource'][0])
    {
        $request = $this->updateContractsResourceRequest($document_number, $contract, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\ContractWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\ContractWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\ContractWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\ContractWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\ContractWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateContractsResourceAsync
     *
     * Update a contract
     *
     * @param  string $document_number identifies the contract (required)
     * @param  \FortnoxApi\Model\ContractWrap $contract contract to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateContractsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContractsResourceAsync($document_number, $contract = null, string $contentType = self::contentTypes['updateContractsResource'][0])
    {
        return $this->updateContractsResourceAsyncWithHttpInfo($document_number, $contract, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateContractsResourceAsyncWithHttpInfo
     *
     * Update a contract
     *
     * @param  string $document_number identifies the contract (required)
     * @param  \FortnoxApi\Model\ContractWrap $contract contract to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateContractsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContractsResourceAsyncWithHttpInfo($document_number, $contract = null, string $contentType = self::contentTypes['updateContractsResource'][0])
    {
        $returnType = '\FortnoxApi\Model\ContractWrap';
        $request = $this->updateContractsResourceRequest($document_number, $contract, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateContractsResource'
     *
     * @param  string $document_number identifies the contract (required)
     * @param  \FortnoxApi\Model\ContractWrap $contract contract to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateContractsResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateContractsResourceRequest($document_number, $contract = null, string $contentType = self::contentTypes['updateContractsResource'][0])
    {

        // verify the required parameter 'document_number' is set
        if ($document_number === null || (is_array($document_number) && count($document_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_number when calling updateContractsResource'
            );
        }



        $resourcePath = '/3/contracts/{DocumentNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_number !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentNumber' . '}',
                ObjectSerializer::toPathValue($document_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contract)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contract));
            } else {
                $httpBody = $contract;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
