<?php
/**
 * SupplierInvoicesResourceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [Guides & Good to Know section](https://www.fortnox.se/developer/guides-and-good-to-know/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit per access-token is 25 requests per 5 seconds. This equals to 300 requests per minute.  [Read more about this here.](https://www.fortnox.se/developer/guides-and-good-to-know/rate-limits-for-fortnox-api/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://www.fortnox.se/developer/guides-and-good-to-know/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * SupplierInvoicesResourceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SupplierInvoicesResourceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'approvalbookkeep' => [
            'application/json',
        ],
        'approvalpayment' => [
            'application/json',
        ],
        'bookkeepSupplierInvoicesResource' => [
            'application/json',
        ],
        'cancelSupplierInvoicesResource' => [
            'application/json',
        ],
        'createSupplierInvoicesResource' => [
            'application/json',
        ],
        'creditSupplierInvoicesResource' => [
            'application/json',
        ],
        'getSupplierInvoicesResource' => [
            'application/json',
        ],
        'listSupplierInvoicesResource' => [
            'application/json',
        ],
        'updateSupplierInvoicesResource' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation approvalbookkeep
     *
     * Approval of bookkeep of given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approvalbookkeep'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SupplierInvoiceWrap
     */
    public function approvalbookkeep($given_number, string $contentType = self::contentTypes['approvalbookkeep'][0])
    {
        list($response) = $this->approvalbookkeepWithHttpInfo($given_number, $contentType);
        return $response;
    }

    /**
     * Operation approvalbookkeepWithHttpInfo
     *
     * Approval of bookkeep of given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approvalbookkeep'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SupplierInvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function approvalbookkeepWithHttpInfo($given_number, string $contentType = self::contentTypes['approvalbookkeep'][0])
    {
        $request = $this->approvalbookkeepRequest($given_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SupplierInvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SupplierInvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SupplierInvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SupplierInvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SupplierInvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation approvalbookkeepAsync
     *
     * Approval of bookkeep of given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approvalbookkeep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approvalbookkeepAsync($given_number, string $contentType = self::contentTypes['approvalbookkeep'][0])
    {
        return $this->approvalbookkeepAsyncWithHttpInfo($given_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation approvalbookkeepAsyncWithHttpInfo
     *
     * Approval of bookkeep of given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approvalbookkeep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approvalbookkeepAsyncWithHttpInfo($given_number, string $contentType = self::contentTypes['approvalbookkeep'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SupplierInvoiceWrap';
        $request = $this->approvalbookkeepRequest($given_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'approvalbookkeep'
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approvalbookkeep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approvalbookkeepRequest($given_number, string $contentType = self::contentTypes['approvalbookkeep'][0])
    {

        // verify the required parameter 'given_number' is set
        if ($given_number === null || (is_array($given_number) && count($given_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $given_number when calling approvalbookkeep'
            );
        }


        $resourcePath = '/3/supplierinvoices/{GivenNumber}/approvalbookkeep';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($given_number !== null) {
            $resourcePath = str_replace(
                '{' . 'GivenNumber' . '}',
                ObjectSerializer::toPathValue($given_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation approvalpayment
     *
     * Approval of payment of given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approvalpayment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SupplierInvoiceWrap
     */
    public function approvalpayment($given_number, string $contentType = self::contentTypes['approvalpayment'][0])
    {
        list($response) = $this->approvalpaymentWithHttpInfo($given_number, $contentType);
        return $response;
    }

    /**
     * Operation approvalpaymentWithHttpInfo
     *
     * Approval of payment of given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approvalpayment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SupplierInvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function approvalpaymentWithHttpInfo($given_number, string $contentType = self::contentTypes['approvalpayment'][0])
    {
        $request = $this->approvalpaymentRequest($given_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SupplierInvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SupplierInvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SupplierInvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SupplierInvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SupplierInvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation approvalpaymentAsync
     *
     * Approval of payment of given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approvalpayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approvalpaymentAsync($given_number, string $contentType = self::contentTypes['approvalpayment'][0])
    {
        return $this->approvalpaymentAsyncWithHttpInfo($given_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation approvalpaymentAsyncWithHttpInfo
     *
     * Approval of payment of given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approvalpayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approvalpaymentAsyncWithHttpInfo($given_number, string $contentType = self::contentTypes['approvalpayment'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SupplierInvoiceWrap';
        $request = $this->approvalpaymentRequest($given_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'approvalpayment'
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approvalpayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approvalpaymentRequest($given_number, string $contentType = self::contentTypes['approvalpayment'][0])
    {

        // verify the required parameter 'given_number' is set
        if ($given_number === null || (is_array($given_number) && count($given_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $given_number when calling approvalpayment'
            );
        }


        $resourcePath = '/3/supplierinvoices/{GivenNumber}/approvalpayment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($given_number !== null) {
            $resourcePath = str_replace(
                '{' . 'GivenNumber' . '}',
                ObjectSerializer::toPathValue($given_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bookkeepSupplierInvoicesResource
     *
     * Bookkeep given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookkeepSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SupplierInvoiceWrap
     */
    public function bookkeepSupplierInvoicesResource($given_number, string $contentType = self::contentTypes['bookkeepSupplierInvoicesResource'][0])
    {
        list($response) = $this->bookkeepSupplierInvoicesResourceWithHttpInfo($given_number, $contentType);
        return $response;
    }

    /**
     * Operation bookkeepSupplierInvoicesResourceWithHttpInfo
     *
     * Bookkeep given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookkeepSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SupplierInvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function bookkeepSupplierInvoicesResourceWithHttpInfo($given_number, string $contentType = self::contentTypes['bookkeepSupplierInvoicesResource'][0])
    {
        $request = $this->bookkeepSupplierInvoicesResourceRequest($given_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SupplierInvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SupplierInvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SupplierInvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SupplierInvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SupplierInvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bookkeepSupplierInvoicesResourceAsync
     *
     * Bookkeep given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookkeepSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookkeepSupplierInvoicesResourceAsync($given_number, string $contentType = self::contentTypes['bookkeepSupplierInvoicesResource'][0])
    {
        return $this->bookkeepSupplierInvoicesResourceAsyncWithHttpInfo($given_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookkeepSupplierInvoicesResourceAsyncWithHttpInfo
     *
     * Bookkeep given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookkeepSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookkeepSupplierInvoicesResourceAsyncWithHttpInfo($given_number, string $contentType = self::contentTypes['bookkeepSupplierInvoicesResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SupplierInvoiceWrap';
        $request = $this->bookkeepSupplierInvoicesResourceRequest($given_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bookkeepSupplierInvoicesResource'
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookkeepSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bookkeepSupplierInvoicesResourceRequest($given_number, string $contentType = self::contentTypes['bookkeepSupplierInvoicesResource'][0])
    {

        // verify the required parameter 'given_number' is set
        if ($given_number === null || (is_array($given_number) && count($given_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $given_number when calling bookkeepSupplierInvoicesResource'
            );
        }


        $resourcePath = '/3/supplierinvoices/{GivenNumber}/bookkeep';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($given_number !== null) {
            $resourcePath = str_replace(
                '{' . 'GivenNumber' . '}',
                ObjectSerializer::toPathValue($given_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelSupplierInvoicesResource
     *
     * Cancels given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SupplierInvoiceWrap
     */
    public function cancelSupplierInvoicesResource($given_number, string $contentType = self::contentTypes['cancelSupplierInvoicesResource'][0])
    {
        list($response) = $this->cancelSupplierInvoicesResourceWithHttpInfo($given_number, $contentType);
        return $response;
    }

    /**
     * Operation cancelSupplierInvoicesResourceWithHttpInfo
     *
     * Cancels given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SupplierInvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelSupplierInvoicesResourceWithHttpInfo($given_number, string $contentType = self::contentTypes['cancelSupplierInvoicesResource'][0])
    {
        $request = $this->cancelSupplierInvoicesResourceRequest($given_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SupplierInvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SupplierInvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SupplierInvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SupplierInvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SupplierInvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelSupplierInvoicesResourceAsync
     *
     * Cancels given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelSupplierInvoicesResourceAsync($given_number, string $contentType = self::contentTypes['cancelSupplierInvoicesResource'][0])
    {
        return $this->cancelSupplierInvoicesResourceAsyncWithHttpInfo($given_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelSupplierInvoicesResourceAsyncWithHttpInfo
     *
     * Cancels given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelSupplierInvoicesResourceAsyncWithHttpInfo($given_number, string $contentType = self::contentTypes['cancelSupplierInvoicesResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SupplierInvoiceWrap';
        $request = $this->cancelSupplierInvoicesResourceRequest($given_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelSupplierInvoicesResource'
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelSupplierInvoicesResourceRequest($given_number, string $contentType = self::contentTypes['cancelSupplierInvoicesResource'][0])
    {

        // verify the required parameter 'given_number' is set
        if ($given_number === null || (is_array($given_number) && count($given_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $given_number when calling cancelSupplierInvoicesResource'
            );
        }


        $resourcePath = '/3/supplierinvoices/{GivenNumber}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($given_number !== null) {
            $resourcePath = str_replace(
                '{' . 'GivenNumber' . '}',
                ObjectSerializer::toPathValue($given_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSupplierInvoicesResource
     *
     * Create a supplier invoice
     *
     * @param  \OpenAPI\Client\Model\SupplierInvoiceWrap $supplier_invoice supplier invoice to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SupplierInvoiceWrap
     */
    public function createSupplierInvoicesResource($supplier_invoice = null, string $contentType = self::contentTypes['createSupplierInvoicesResource'][0])
    {
        list($response) = $this->createSupplierInvoicesResourceWithHttpInfo($supplier_invoice, $contentType);
        return $response;
    }

    /**
     * Operation createSupplierInvoicesResourceWithHttpInfo
     *
     * Create a supplier invoice
     *
     * @param  \OpenAPI\Client\Model\SupplierInvoiceWrap $supplier_invoice supplier invoice to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SupplierInvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSupplierInvoicesResourceWithHttpInfo($supplier_invoice = null, string $contentType = self::contentTypes['createSupplierInvoicesResource'][0])
    {
        $request = $this->createSupplierInvoicesResourceRequest($supplier_invoice, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SupplierInvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SupplierInvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SupplierInvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SupplierInvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SupplierInvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSupplierInvoicesResourceAsync
     *
     * Create a supplier invoice
     *
     * @param  \OpenAPI\Client\Model\SupplierInvoiceWrap $supplier_invoice supplier invoice to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSupplierInvoicesResourceAsync($supplier_invoice = null, string $contentType = self::contentTypes['createSupplierInvoicesResource'][0])
    {
        return $this->createSupplierInvoicesResourceAsyncWithHttpInfo($supplier_invoice, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSupplierInvoicesResourceAsyncWithHttpInfo
     *
     * Create a supplier invoice
     *
     * @param  \OpenAPI\Client\Model\SupplierInvoiceWrap $supplier_invoice supplier invoice to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSupplierInvoicesResourceAsyncWithHttpInfo($supplier_invoice = null, string $contentType = self::contentTypes['createSupplierInvoicesResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SupplierInvoiceWrap';
        $request = $this->createSupplierInvoicesResourceRequest($supplier_invoice, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSupplierInvoicesResource'
     *
     * @param  \OpenAPI\Client\Model\SupplierInvoiceWrap $supplier_invoice supplier invoice to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSupplierInvoicesResourceRequest($supplier_invoice = null, string $contentType = self::contentTypes['createSupplierInvoicesResource'][0])
    {



        $resourcePath = '/3/supplierinvoices/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($supplier_invoice)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($supplier_invoice));
            } else {
                $httpBody = $supplier_invoice;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditSupplierInvoicesResource
     *
     * Credit given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['creditSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SupplierInvoiceWrap
     */
    public function creditSupplierInvoicesResource($given_number, string $contentType = self::contentTypes['creditSupplierInvoicesResource'][0])
    {
        list($response) = $this->creditSupplierInvoicesResourceWithHttpInfo($given_number, $contentType);
        return $response;
    }

    /**
     * Operation creditSupplierInvoicesResourceWithHttpInfo
     *
     * Credit given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['creditSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SupplierInvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditSupplierInvoicesResourceWithHttpInfo($given_number, string $contentType = self::contentTypes['creditSupplierInvoicesResource'][0])
    {
        $request = $this->creditSupplierInvoicesResourceRequest($given_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SupplierInvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SupplierInvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SupplierInvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SupplierInvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SupplierInvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditSupplierInvoicesResourceAsync
     *
     * Credit given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['creditSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditSupplierInvoicesResourceAsync($given_number, string $contentType = self::contentTypes['creditSupplierInvoicesResource'][0])
    {
        return $this->creditSupplierInvoicesResourceAsyncWithHttpInfo($given_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditSupplierInvoicesResourceAsyncWithHttpInfo
     *
     * Credit given supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['creditSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditSupplierInvoicesResourceAsyncWithHttpInfo($given_number, string $contentType = self::contentTypes['creditSupplierInvoicesResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SupplierInvoiceWrap';
        $request = $this->creditSupplierInvoicesResourceRequest($given_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditSupplierInvoicesResource'
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['creditSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function creditSupplierInvoicesResourceRequest($given_number, string $contentType = self::contentTypes['creditSupplierInvoicesResource'][0])
    {

        // verify the required parameter 'given_number' is set
        if ($given_number === null || (is_array($given_number) && count($given_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $given_number when calling creditSupplierInvoicesResource'
            );
        }


        $resourcePath = '/3/supplierinvoices/{GivenNumber}/credit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($given_number !== null) {
            $resourcePath = str_replace(
                '{' . 'GivenNumber' . '}',
                ObjectSerializer::toPathValue($given_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSupplierInvoicesResource
     *
     * Retrieve a single supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SupplierInvoiceWrap
     */
    public function getSupplierInvoicesResource($given_number, string $contentType = self::contentTypes['getSupplierInvoicesResource'][0])
    {
        list($response) = $this->getSupplierInvoicesResourceWithHttpInfo($given_number, $contentType);
        return $response;
    }

    /**
     * Operation getSupplierInvoicesResourceWithHttpInfo
     *
     * Retrieve a single supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SupplierInvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSupplierInvoicesResourceWithHttpInfo($given_number, string $contentType = self::contentTypes['getSupplierInvoicesResource'][0])
    {
        $request = $this->getSupplierInvoicesResourceRequest($given_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SupplierInvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SupplierInvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SupplierInvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SupplierInvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SupplierInvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSupplierInvoicesResourceAsync
     *
     * Retrieve a single supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplierInvoicesResourceAsync($given_number, string $contentType = self::contentTypes['getSupplierInvoicesResource'][0])
    {
        return $this->getSupplierInvoicesResourceAsyncWithHttpInfo($given_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSupplierInvoicesResourceAsyncWithHttpInfo
     *
     * Retrieve a single supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplierInvoicesResourceAsyncWithHttpInfo($given_number, string $contentType = self::contentTypes['getSupplierInvoicesResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SupplierInvoiceWrap';
        $request = $this->getSupplierInvoicesResourceRequest($given_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSupplierInvoicesResource'
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSupplierInvoicesResourceRequest($given_number, string $contentType = self::contentTypes['getSupplierInvoicesResource'][0])
    {

        // verify the required parameter 'given_number' is set
        if ($given_number === null || (is_array($given_number) && count($given_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $given_number when calling getSupplierInvoicesResource'
            );
        }


        $resourcePath = '/3/supplierinvoices/{GivenNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($given_number !== null) {
            $resourcePath = str_replace(
                '{' . 'GivenNumber' . '}',
                ObjectSerializer::toPathValue($given_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSupplierInvoicesResource
     *
     * Retrieve a list of supplier invoices
     *
     * @param  string $filter possibility to filter supplier invoices (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SupplierInvoiceListItemWrap
     */
    public function listSupplierInvoicesResource($filter = null, string $contentType = self::contentTypes['listSupplierInvoicesResource'][0])
    {
        list($response) = $this->listSupplierInvoicesResourceWithHttpInfo($filter, $contentType);
        return $response;
    }

    /**
     * Operation listSupplierInvoicesResourceWithHttpInfo
     *
     * Retrieve a list of supplier invoices
     *
     * @param  string $filter possibility to filter supplier invoices (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SupplierInvoiceListItemWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSupplierInvoicesResourceWithHttpInfo($filter = null, string $contentType = self::contentTypes['listSupplierInvoicesResource'][0])
    {
        $request = $this->listSupplierInvoicesResourceRequest($filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SupplierInvoiceListItemWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SupplierInvoiceListItemWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SupplierInvoiceListItemWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SupplierInvoiceListItemWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SupplierInvoiceListItemWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listSupplierInvoicesResourceAsync
     *
     * Retrieve a list of supplier invoices
     *
     * @param  string $filter possibility to filter supplier invoices (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSupplierInvoicesResourceAsync($filter = null, string $contentType = self::contentTypes['listSupplierInvoicesResource'][0])
    {
        return $this->listSupplierInvoicesResourceAsyncWithHttpInfo($filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSupplierInvoicesResourceAsyncWithHttpInfo
     *
     * Retrieve a list of supplier invoices
     *
     * @param  string $filter possibility to filter supplier invoices (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSupplierInvoicesResourceAsyncWithHttpInfo($filter = null, string $contentType = self::contentTypes['listSupplierInvoicesResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SupplierInvoiceListItemWrap';
        $request = $this->listSupplierInvoicesResourceRequest($filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSupplierInvoicesResource'
     *
     * @param  string $filter possibility to filter supplier invoices (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSupplierInvoicesResourceRequest($filter = null, string $contentType = self::contentTypes['listSupplierInvoicesResource'][0])
    {



        $resourcePath = '/3/supplierinvoices/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSupplierInvoicesResource
     *
     * Update a supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  \OpenAPI\Client\Model\SupplierInvoiceWrap $supplier_invoice supplier invoice to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SupplierInvoiceWrap
     */
    public function updateSupplierInvoicesResource($given_number, $supplier_invoice = null, string $contentType = self::contentTypes['updateSupplierInvoicesResource'][0])
    {
        list($response) = $this->updateSupplierInvoicesResourceWithHttpInfo($given_number, $supplier_invoice, $contentType);
        return $response;
    }

    /**
     * Operation updateSupplierInvoicesResourceWithHttpInfo
     *
     * Update a supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  \OpenAPI\Client\Model\SupplierInvoiceWrap $supplier_invoice supplier invoice to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SupplierInvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSupplierInvoicesResourceWithHttpInfo($given_number, $supplier_invoice = null, string $contentType = self::contentTypes['updateSupplierInvoicesResource'][0])
    {
        $request = $this->updateSupplierInvoicesResourceRequest($given_number, $supplier_invoice, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SupplierInvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SupplierInvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SupplierInvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SupplierInvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SupplierInvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSupplierInvoicesResourceAsync
     *
     * Update a supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  \OpenAPI\Client\Model\SupplierInvoiceWrap $supplier_invoice supplier invoice to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSupplierInvoicesResourceAsync($given_number, $supplier_invoice = null, string $contentType = self::contentTypes['updateSupplierInvoicesResource'][0])
    {
        return $this->updateSupplierInvoicesResourceAsyncWithHttpInfo($given_number, $supplier_invoice, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSupplierInvoicesResourceAsyncWithHttpInfo
     *
     * Update a supplier invoice
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  \OpenAPI\Client\Model\SupplierInvoiceWrap $supplier_invoice supplier invoice to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSupplierInvoicesResourceAsyncWithHttpInfo($given_number, $supplier_invoice = null, string $contentType = self::contentTypes['updateSupplierInvoicesResource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SupplierInvoiceWrap';
        $request = $this->updateSupplierInvoicesResourceRequest($given_number, $supplier_invoice, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSupplierInvoicesResource'
     *
     * @param  int $given_number identifies the invoice (required)
     * @param  \OpenAPI\Client\Model\SupplierInvoiceWrap $supplier_invoice supplier invoice to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSupplierInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSupplierInvoicesResourceRequest($given_number, $supplier_invoice = null, string $contentType = self::contentTypes['updateSupplierInvoicesResource'][0])
    {

        // verify the required parameter 'given_number' is set
        if ($given_number === null || (is_array($given_number) && count($given_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $given_number when calling updateSupplierInvoicesResource'
            );
        }



        $resourcePath = '/3/supplierinvoices/{GivenNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($given_number !== null) {
            $resourcePath = str_replace(
                '{' . 'GivenNumber' . '}',
                ObjectSerializer::toPathValue($given_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($supplier_invoice)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($supplier_invoice));
            } else {
                $httpBody = $supplier_invoice;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
