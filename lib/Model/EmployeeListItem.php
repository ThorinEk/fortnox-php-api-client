<?php
/**
 * EmployeeListItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [Guides & Good to Know section](https://www.fortnox.se/developer/guides-and-good-to-know/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit per access-token is 25 requests per 5 seconds. This equals to 300 requests per minute.  [Read more about this here.](https://www.fortnox.se/developer/guides-and-good-to-know/rate-limits-for-fortnox-api/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://www.fortnox.se/developer/guides-and-good-to-know/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EmployeeListItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmployeeListItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmployeeListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_id' => 'string',
        'personal_identity_number' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'full_name' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'post_code' => 'string',
        'city' => 'string',
        'country' => 'string',
        'phone1' => 'string',
        'phone2' => 'string',
        'email' => 'string',
        'employment_date' => '\DateTime',
        'employment_form' => 'string',
        'salary_form' => 'string',
        'job_title' => 'string',
        'personel_type' => 'string',
        'schedule_id' => 'string',
        'fora_type' => 'string',
        'monthly_salary' => 'string',
        'hourly_pay' => 'string',
        'tax_allowance' => 'string',
        'tax_table' => 'string',
        'tax_column' => 'int',
        'auto_non_recurring_tax' => 'bool',
        'non_recurring_tax' => 'string',
        'inactive' => 'bool',
        'clearing_no' => 'string',
        'bank_account_no' => 'string',
        'employed_to' => '\DateTime',
        'average_weekly_hours' => 'string',
        'average_hourly_wage' => 'string',
        'dated_wages' => '\OpenAPI\Client\Model\EmployeeDatedWage[]',
        'dated_schedules' => '\OpenAPI\Client\Model\EmployeeDatedSchedule[]',
        'at_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_id' => null,
        'personal_identity_number' => null,
        'first_name' => null,
        'last_name' => null,
        'full_name' => null,
        'address1' => null,
        'address2' => null,
        'post_code' => null,
        'city' => null,
        'country' => null,
        'phone1' => null,
        'phone2' => null,
        'email' => null,
        'employment_date' => 'date',
        'employment_form' => null,
        'salary_form' => null,
        'job_title' => null,
        'personel_type' => null,
        'schedule_id' => null,
        'fora_type' => null,
        'monthly_salary' => null,
        'hourly_pay' => null,
        'tax_allowance' => null,
        'tax_table' => null,
        'tax_column' => 'int32',
        'auto_non_recurring_tax' => null,
        'non_recurring_tax' => null,
        'inactive' => null,
        'clearing_no' => null,
        'bank_account_no' => null,
        'employed_to' => 'date',
        'average_weekly_hours' => null,
        'average_hourly_wage' => null,
        'dated_wages' => null,
        'dated_schedules' => null,
        'at_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_id' => false,
		'personal_identity_number' => false,
		'first_name' => false,
		'last_name' => false,
		'full_name' => false,
		'address1' => false,
		'address2' => false,
		'post_code' => false,
		'city' => false,
		'country' => false,
		'phone1' => false,
		'phone2' => false,
		'email' => false,
		'employment_date' => false,
		'employment_form' => false,
		'salary_form' => false,
		'job_title' => false,
		'personel_type' => false,
		'schedule_id' => false,
		'fora_type' => false,
		'monthly_salary' => false,
		'hourly_pay' => false,
		'tax_allowance' => false,
		'tax_table' => false,
		'tax_column' => false,
		'auto_non_recurring_tax' => false,
		'non_recurring_tax' => false,
		'inactive' => false,
		'clearing_no' => false,
		'bank_account_no' => false,
		'employed_to' => false,
		'average_weekly_hours' => false,
		'average_hourly_wage' => false,
		'dated_wages' => false,
		'dated_schedules' => false,
		'at_url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'EmployeeId',
        'personal_identity_number' => 'PersonalIdentityNumber',
        'first_name' => 'FirstName',
        'last_name' => 'LastName',
        'full_name' => 'FullName',
        'address1' => 'Address1',
        'address2' => 'Address2',
        'post_code' => 'PostCode',
        'city' => 'City',
        'country' => 'Country',
        'phone1' => 'Phone1',
        'phone2' => 'Phone2',
        'email' => 'Email',
        'employment_date' => 'EmploymentDate',
        'employment_form' => 'EmploymentForm',
        'salary_form' => 'SalaryForm',
        'job_title' => 'JobTitle',
        'personel_type' => 'PersonelType',
        'schedule_id' => 'ScheduleId',
        'fora_type' => 'ForaType',
        'monthly_salary' => 'MonthlySalary',
        'hourly_pay' => 'HourlyPay',
        'tax_allowance' => 'TaxAllowance',
        'tax_table' => 'TaxTable',
        'tax_column' => 'TaxColumn',
        'auto_non_recurring_tax' => 'AutoNonRecurringTax',
        'non_recurring_tax' => 'NonRecurringTax',
        'inactive' => 'Inactive',
        'clearing_no' => 'ClearingNo',
        'bank_account_no' => 'BankAccountNo',
        'employed_to' => 'EmployedTo',
        'average_weekly_hours' => 'AverageWeeklyHours',
        'average_hourly_wage' => 'AverageHourlyWage',
        'dated_wages' => 'DatedWages',
        'dated_schedules' => 'DatedSchedules',
        'at_url' => '@url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'personal_identity_number' => 'setPersonalIdentityNumber',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'full_name' => 'setFullName',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'post_code' => 'setPostCode',
        'city' => 'setCity',
        'country' => 'setCountry',
        'phone1' => 'setPhone1',
        'phone2' => 'setPhone2',
        'email' => 'setEmail',
        'employment_date' => 'setEmploymentDate',
        'employment_form' => 'setEmploymentForm',
        'salary_form' => 'setSalaryForm',
        'job_title' => 'setJobTitle',
        'personel_type' => 'setPersonelType',
        'schedule_id' => 'setScheduleId',
        'fora_type' => 'setForaType',
        'monthly_salary' => 'setMonthlySalary',
        'hourly_pay' => 'setHourlyPay',
        'tax_allowance' => 'setTaxAllowance',
        'tax_table' => 'setTaxTable',
        'tax_column' => 'setTaxColumn',
        'auto_non_recurring_tax' => 'setAutoNonRecurringTax',
        'non_recurring_tax' => 'setNonRecurringTax',
        'inactive' => 'setInactive',
        'clearing_no' => 'setClearingNo',
        'bank_account_no' => 'setBankAccountNo',
        'employed_to' => 'setEmployedTo',
        'average_weekly_hours' => 'setAverageWeeklyHours',
        'average_hourly_wage' => 'setAverageHourlyWage',
        'dated_wages' => 'setDatedWages',
        'dated_schedules' => 'setDatedSchedules',
        'at_url' => 'setAtUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'personal_identity_number' => 'getPersonalIdentityNumber',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'full_name' => 'getFullName',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'post_code' => 'getPostCode',
        'city' => 'getCity',
        'country' => 'getCountry',
        'phone1' => 'getPhone1',
        'phone2' => 'getPhone2',
        'email' => 'getEmail',
        'employment_date' => 'getEmploymentDate',
        'employment_form' => 'getEmploymentForm',
        'salary_form' => 'getSalaryForm',
        'job_title' => 'getJobTitle',
        'personel_type' => 'getPersonelType',
        'schedule_id' => 'getScheduleId',
        'fora_type' => 'getForaType',
        'monthly_salary' => 'getMonthlySalary',
        'hourly_pay' => 'getHourlyPay',
        'tax_allowance' => 'getTaxAllowance',
        'tax_table' => 'getTaxTable',
        'tax_column' => 'getTaxColumn',
        'auto_non_recurring_tax' => 'getAutoNonRecurringTax',
        'non_recurring_tax' => 'getNonRecurringTax',
        'inactive' => 'getInactive',
        'clearing_no' => 'getClearingNo',
        'bank_account_no' => 'getBankAccountNo',
        'employed_to' => 'getEmployedTo',
        'average_weekly_hours' => 'getAverageWeeklyHours',
        'average_hourly_wage' => 'getAverageHourlyWage',
        'dated_wages' => 'getDatedWages',
        'dated_schedules' => 'getDatedSchedules',
        'at_url' => 'getAtUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EMPLOYMENT_FORM_TV = 'TV';
    public const EMPLOYMENT_FORM_PRO = 'PRO';
    public const EMPLOYMENT_FORM_TID = 'TID';
    public const EMPLOYMENT_FORM_SVT = 'SVT';
    public const EMPLOYMENT_FORM_VIK = 'VIK';
    public const EMPLOYMENT_FORM_PRJ = 'PRJ';
    public const EMPLOYMENT_FORM_PRA = 'PRA';
    public const EMPLOYMENT_FORM_FER = 'FER';
    public const EMPLOYMENT_FORM_SES = 'SES';
    public const EMPLOYMENT_FORM_NEJ = 'NEJ';
    public const SALARY_FORM_MAN = 'MAN';
    public const SALARY_FORM_TIM = 'TIM';
    public const PERSONEL_TYPE_TJM = 'TJM';
    public const PERSONEL_TYPE_ARB = 'ARB';
    public const FORA_TYPE_A = 'A';
    public const FORA_TYPE_A51 = 'A51';
    public const FORA_TYPE_A52 = 'A52';
    public const FORA_TYPE_A53 = 'A53';
    public const FORA_TYPE_A54 = 'A54';
    public const FORA_TYPE_A55 = 'A55';
    public const FORA_TYPE_A56 = 'A56';
    public const FORA_TYPE_A57 = 'A57';
    public const FORA_TYPE_A58 = 'A58';
    public const FORA_TYPE_A59 = 'A59';
    public const FORA_TYPE_A60 = 'A60';
    public const FORA_TYPE_A61 = 'A61';
    public const FORA_TYPE_A62 = 'A62';
    public const FORA_TYPE_A63 = 'A63';
    public const FORA_TYPE_A64 = 'A64';
    public const FORA_TYPE_A65 = 'A65';
    public const FORA_TYPE_A66 = 'A66';
    public const FORA_TYPE_A67 = 'A67';
    public const FORA_TYPE_A68 = 'A68';
    public const FORA_TYPE_A69 = 'A69';
    public const FORA_TYPE_A70 = 'A70';
    public const FORA_TYPE_A71 = 'A71';
    public const FORA_TYPE_A72 = 'A72';
    public const FORA_TYPE_A73 = 'A73';
    public const FORA_TYPE_A74 = 'A74';
    public const FORA_TYPE_A75 = 'A75';
    public const FORA_TYPE_A76 = 'A76';
    public const FORA_TYPE_A77 = 'A77';
    public const FORA_TYPE_A78 = 'A78';
    public const FORA_TYPE_A79 = 'A79';
    public const FORA_TYPE_A80 = 'A80';
    public const FORA_TYPE_A81 = 'A81';
    public const FORA_TYPE_A82 = 'A82';
    public const FORA_TYPE_A83 = 'A83';
    public const FORA_TYPE_A84 = 'A84';
    public const FORA_TYPE_A85 = 'A85';
    public const FORA_TYPE_A86 = 'A86';
    public const FORA_TYPE_A3 = 'A3';
    public const FORA_TYPE_A91 = 'A91';
    public const FORA_TYPE_A92 = 'A92';
    public const FORA_TYPE_A93 = 'A93';
    public const FORA_TYPE_A11 = 'A11';
    public const FORA_TYPE_A12 = 'A12';
    public const FORA_TYPE_A13 = 'A13';
    public const FORA_TYPE_A14 = 'A14';
    public const FORA_TYPE_A15 = 'A15';
    public const FORA_TYPE_A16 = 'A16';
    public const FORA_TYPE_A17 = 'A17';
    public const FORA_TYPE_A18 = 'A18';
    public const FORA_TYPE_A19 = 'A19';
    public const FORA_TYPE_A20 = 'A20';
    public const FORA_TYPE_A21 = 'A21';
    public const FORA_TYPE_A22 = 'A22';
    public const FORA_TYPE_A23 = 'A23';
    public const FORA_TYPE_A24 = 'A24';
    public const FORA_TYPE_A25 = 'A25';
    public const FORA_TYPE_A26 = 'A26';
    public const FORA_TYPE_A27 = 'A27';
    public const FORA_TYPE_A28 = 'A28';
    public const FORA_TYPE_A29 = 'A29';
    public const FORA_TYPE_A30 = 'A30';
    public const FORA_TYPE_A41 = 'A41';
    public const FORA_TYPE_A42 = 'A42';
    public const FORA_TYPE_A43 = 'A43';
    public const FORA_TYPE_A44 = 'A44';
    public const FORA_TYPE_A45 = 'A45';
    public const FORA_TYPE_A46 = 'A46';
    public const FORA_TYPE_A47 = 'A47';
    public const FORA_TYPE_A48 = 'A48';
    public const FORA_TYPE_T = 'T';
    public const FORA_TYPE_T6 = 'T6';
    public const FORA_TYPE_MINUS = '-';
    public const TAX_ALLOWANCE_HUV = 'HUV';
    public const TAX_ALLOWANCE_EXT = 'EXT';
    public const TAX_ALLOWANCE_TMP = 'TMP';
    public const TAX_ALLOWANCE_STU = 'STU';
    public const TAX_ALLOWANCE_EJ = 'EJ';
    public const TAX_ALLOWANCE_ = '???';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmploymentFormAllowableValues()
    {
        return [
            self::EMPLOYMENT_FORM_TV,
            self::EMPLOYMENT_FORM_PRO,
            self::EMPLOYMENT_FORM_TID,
            self::EMPLOYMENT_FORM_SVT,
            self::EMPLOYMENT_FORM_VIK,
            self::EMPLOYMENT_FORM_PRJ,
            self::EMPLOYMENT_FORM_PRA,
            self::EMPLOYMENT_FORM_FER,
            self::EMPLOYMENT_FORM_SES,
            self::EMPLOYMENT_FORM_NEJ,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSalaryFormAllowableValues()
    {
        return [
            self::SALARY_FORM_MAN,
            self::SALARY_FORM_TIM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPersonelTypeAllowableValues()
    {
        return [
            self::PERSONEL_TYPE_TJM,
            self::PERSONEL_TYPE_ARB,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getForaTypeAllowableValues()
    {
        return [
            self::FORA_TYPE_A,
            self::FORA_TYPE_A51,
            self::FORA_TYPE_A52,
            self::FORA_TYPE_A53,
            self::FORA_TYPE_A54,
            self::FORA_TYPE_A55,
            self::FORA_TYPE_A56,
            self::FORA_TYPE_A57,
            self::FORA_TYPE_A58,
            self::FORA_TYPE_A59,
            self::FORA_TYPE_A60,
            self::FORA_TYPE_A61,
            self::FORA_TYPE_A62,
            self::FORA_TYPE_A63,
            self::FORA_TYPE_A64,
            self::FORA_TYPE_A65,
            self::FORA_TYPE_A66,
            self::FORA_TYPE_A67,
            self::FORA_TYPE_A68,
            self::FORA_TYPE_A69,
            self::FORA_TYPE_A70,
            self::FORA_TYPE_A71,
            self::FORA_TYPE_A72,
            self::FORA_TYPE_A73,
            self::FORA_TYPE_A74,
            self::FORA_TYPE_A75,
            self::FORA_TYPE_A76,
            self::FORA_TYPE_A77,
            self::FORA_TYPE_A78,
            self::FORA_TYPE_A79,
            self::FORA_TYPE_A80,
            self::FORA_TYPE_A81,
            self::FORA_TYPE_A82,
            self::FORA_TYPE_A83,
            self::FORA_TYPE_A84,
            self::FORA_TYPE_A85,
            self::FORA_TYPE_A86,
            self::FORA_TYPE_A3,
            self::FORA_TYPE_A91,
            self::FORA_TYPE_A92,
            self::FORA_TYPE_A93,
            self::FORA_TYPE_A11,
            self::FORA_TYPE_A12,
            self::FORA_TYPE_A13,
            self::FORA_TYPE_A14,
            self::FORA_TYPE_A15,
            self::FORA_TYPE_A16,
            self::FORA_TYPE_A17,
            self::FORA_TYPE_A18,
            self::FORA_TYPE_A19,
            self::FORA_TYPE_A20,
            self::FORA_TYPE_A21,
            self::FORA_TYPE_A22,
            self::FORA_TYPE_A23,
            self::FORA_TYPE_A24,
            self::FORA_TYPE_A25,
            self::FORA_TYPE_A26,
            self::FORA_TYPE_A27,
            self::FORA_TYPE_A28,
            self::FORA_TYPE_A29,
            self::FORA_TYPE_A30,
            self::FORA_TYPE_A41,
            self::FORA_TYPE_A42,
            self::FORA_TYPE_A43,
            self::FORA_TYPE_A44,
            self::FORA_TYPE_A45,
            self::FORA_TYPE_A46,
            self::FORA_TYPE_A47,
            self::FORA_TYPE_A48,
            self::FORA_TYPE_T,
            self::FORA_TYPE_T6,
            self::FORA_TYPE_MINUS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxAllowanceAllowableValues()
    {
        return [
            self::TAX_ALLOWANCE_HUV,
            self::TAX_ALLOWANCE_EXT,
            self::TAX_ALLOWANCE_TMP,
            self::TAX_ALLOWANCE_STU,
            self::TAX_ALLOWANCE_EJ,
            self::TAX_ALLOWANCE_,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('personal_identity_number', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('full_name', $data ?? [], null);
        $this->setIfExists('address1', $data ?? [], null);
        $this->setIfExists('address2', $data ?? [], null);
        $this->setIfExists('post_code', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('phone1', $data ?? [], null);
        $this->setIfExists('phone2', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('employment_date', $data ?? [], null);
        $this->setIfExists('employment_form', $data ?? [], null);
        $this->setIfExists('salary_form', $data ?? [], null);
        $this->setIfExists('job_title', $data ?? [], null);
        $this->setIfExists('personel_type', $data ?? [], null);
        $this->setIfExists('schedule_id', $data ?? [], null);
        $this->setIfExists('fora_type', $data ?? [], null);
        $this->setIfExists('monthly_salary', $data ?? [], null);
        $this->setIfExists('hourly_pay', $data ?? [], null);
        $this->setIfExists('tax_allowance', $data ?? [], null);
        $this->setIfExists('tax_table', $data ?? [], null);
        $this->setIfExists('tax_column', $data ?? [], null);
        $this->setIfExists('auto_non_recurring_tax', $data ?? [], null);
        $this->setIfExists('non_recurring_tax', $data ?? [], null);
        $this->setIfExists('inactive', $data ?? [], null);
        $this->setIfExists('clearing_no', $data ?? [], null);
        $this->setIfExists('bank_account_no', $data ?? [], null);
        $this->setIfExists('employed_to', $data ?? [], null);
        $this->setIfExists('average_weekly_hours', $data ?? [], null);
        $this->setIfExists('average_hourly_wage', $data ?? [], null);
        $this->setIfExists('dated_wages', $data ?? [], null);
        $this->setIfExists('dated_schedules', $data ?? [], null);
        $this->setIfExists('at_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['employee_id']) && (mb_strlen($this->container['employee_id']) > 15)) {
            $invalidProperties[] = "invalid value for 'employee_id', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['employee_id']) && (mb_strlen($this->container['employee_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'employee_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        $allowedValues = $this->getEmploymentFormAllowableValues();
        if (!is_null($this->container['employment_form']) && !in_array($this->container['employment_form'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'employment_form', must be one of '%s'",
                $this->container['employment_form'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSalaryFormAllowableValues();
        if (!is_null($this->container['salary_form']) && !in_array($this->container['salary_form'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'salary_form', must be one of '%s'",
                $this->container['salary_form'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['job_title']) && (mb_strlen($this->container['job_title']) > 30)) {
            $invalidProperties[] = "invalid value for 'job_title', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['job_title']) && (mb_strlen($this->container['job_title']) < 0)) {
            $invalidProperties[] = "invalid value for 'job_title', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getPersonelTypeAllowableValues();
        if (!is_null($this->container['personel_type']) && !in_array($this->container['personel_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'personel_type', must be one of '%s'",
                $this->container['personel_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getForaTypeAllowableValues();
        if (!is_null($this->container['fora_type']) && !in_array($this->container['fora_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fora_type', must be one of '%s'",
                $this->container['fora_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTaxAllowanceAllowableValues();
        if (!is_null($this->container['tax_allowance']) && !in_array($this->container['tax_allowance'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tax_allowance', must be one of '%s'",
                $this->container['tax_allowance'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['tax_column']) && ($this->container['tax_column'] > 6)) {
            $invalidProperties[] = "invalid value for 'tax_column', must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['tax_column']) && ($this->container['tax_column'] < 1)) {
            $invalidProperties[] = "invalid value for 'tax_column', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_id
     *
     * @return string|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string|null $employee_id employee_id
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        if ((mb_strlen($employee_id) > 15)) {
            throw new \InvalidArgumentException('invalid length for $employee_id when calling EmployeeListItem., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($employee_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $employee_id when calling EmployeeListItem., must be bigger than or equal to 1.');
        }

        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets personal_identity_number
     *
     * @return string|null
     */
    public function getPersonalIdentityNumber()
    {
        return $this->container['personal_identity_number'];
    }

    /**
     * Sets personal_identity_number
     *
     * @param string|null $personal_identity_number personal_identity_number
     *
     * @return self
     */
    public function setPersonalIdentityNumber($personal_identity_number)
    {
        if (is_null($personal_identity_number)) {
            throw new \InvalidArgumentException('non-nullable personal_identity_number cannot be null');
        }
        $this->container['personal_identity_number'] = $personal_identity_number;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name full_name
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        if (is_null($full_name)) {
            throw new \InvalidArgumentException('non-nullable full_name cannot be null');
        }
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string|null
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string|null $address1 address1
     *
     * @return self
     */
    public function setAddress1($address1)
    {
        if (is_null($address1)) {
            throw new \InvalidArgumentException('non-nullable address1 cannot be null');
        }
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 address2
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        if (is_null($address2)) {
            throw new \InvalidArgumentException('non-nullable address2 cannot be null');
        }
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets post_code
     *
     * @return string|null
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     *
     * @param string|null $post_code post_code
     *
     * @return self
     */
    public function setPostCode($post_code)
    {
        if (is_null($post_code)) {
            throw new \InvalidArgumentException('non-nullable post_code cannot be null');
        }
        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets phone1
     *
     * @return string|null
     */
    public function getPhone1()
    {
        return $this->container['phone1'];
    }

    /**
     * Sets phone1
     *
     * @param string|null $phone1 phone1
     *
     * @return self
     */
    public function setPhone1($phone1)
    {
        if (is_null($phone1)) {
            throw new \InvalidArgumentException('non-nullable phone1 cannot be null');
        }
        $this->container['phone1'] = $phone1;

        return $this;
    }

    /**
     * Gets phone2
     *
     * @return string|null
     */
    public function getPhone2()
    {
        return $this->container['phone2'];
    }

    /**
     * Sets phone2
     *
     * @param string|null $phone2 phone2
     *
     * @return self
     */
    public function setPhone2($phone2)
    {
        if (is_null($phone2)) {
            throw new \InvalidArgumentException('non-nullable phone2 cannot be null');
        }
        $this->container['phone2'] = $phone2;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets employment_date
     *
     * @return \DateTime|null
     */
    public function getEmploymentDate()
    {
        return $this->container['employment_date'];
    }

    /**
     * Sets employment_date
     *
     * @param \DateTime|null $employment_date employment_date
     *
     * @return self
     */
    public function setEmploymentDate($employment_date)
    {
        if (is_null($employment_date)) {
            throw new \InvalidArgumentException('non-nullable employment_date cannot be null');
        }
        $this->container['employment_date'] = $employment_date;

        return $this;
    }

    /**
     * Gets employment_form
     *
     * @return string|null
     */
    public function getEmploymentForm()
    {
        return $this->container['employment_form'];
    }

    /**
     * Sets employment_form
     *
     * @param string|null $employment_form employment_form
     *
     * @return self
     */
    public function setEmploymentForm($employment_form)
    {
        if (is_null($employment_form)) {
            throw new \InvalidArgumentException('non-nullable employment_form cannot be null');
        }
        $allowedValues = $this->getEmploymentFormAllowableValues();
        if (!in_array($employment_form, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'employment_form', must be one of '%s'",
                    $employment_form,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['employment_form'] = $employment_form;

        return $this;
    }

    /**
     * Gets salary_form
     *
     * @return string|null
     */
    public function getSalaryForm()
    {
        return $this->container['salary_form'];
    }

    /**
     * Sets salary_form
     *
     * @param string|null $salary_form salary_form
     *
     * @return self
     */
    public function setSalaryForm($salary_form)
    {
        if (is_null($salary_form)) {
            throw new \InvalidArgumentException('non-nullable salary_form cannot be null');
        }
        $allowedValues = $this->getSalaryFormAllowableValues();
        if (!in_array($salary_form, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'salary_form', must be one of '%s'",
                    $salary_form,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['salary_form'] = $salary_form;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title job_title
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (is_null($job_title)) {
            throw new \InvalidArgumentException('non-nullable job_title cannot be null');
        }
        if ((mb_strlen($job_title) > 30)) {
            throw new \InvalidArgumentException('invalid length for $job_title when calling EmployeeListItem., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($job_title) < 0)) {
            throw new \InvalidArgumentException('invalid length for $job_title when calling EmployeeListItem., must be bigger than or equal to 0.');
        }

        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets personel_type
     *
     * @return string|null
     */
    public function getPersonelType()
    {
        return $this->container['personel_type'];
    }

    /**
     * Sets personel_type
     *
     * @param string|null $personel_type personel_type
     *
     * @return self
     */
    public function setPersonelType($personel_type)
    {
        if (is_null($personel_type)) {
            throw new \InvalidArgumentException('non-nullable personel_type cannot be null');
        }
        $allowedValues = $this->getPersonelTypeAllowableValues();
        if (!in_array($personel_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'personel_type', must be one of '%s'",
                    $personel_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['personel_type'] = $personel_type;

        return $this;
    }

    /**
     * Gets schedule_id
     *
     * @return string|null
     */
    public function getScheduleId()
    {
        return $this->container['schedule_id'];
    }

    /**
     * Sets schedule_id
     *
     * @param string|null $schedule_id schedule_id
     *
     * @return self
     */
    public function setScheduleId($schedule_id)
    {
        if (is_null($schedule_id)) {
            throw new \InvalidArgumentException('non-nullable schedule_id cannot be null');
        }
        $this->container['schedule_id'] = $schedule_id;

        return $this;
    }

    /**
     * Gets fora_type
     *
     * @return string|null
     */
    public function getForaType()
    {
        return $this->container['fora_type'];
    }

    /**
     * Sets fora_type
     *
     * @param string|null $fora_type fora_type
     *
     * @return self
     */
    public function setForaType($fora_type)
    {
        if (is_null($fora_type)) {
            throw new \InvalidArgumentException('non-nullable fora_type cannot be null');
        }
        $allowedValues = $this->getForaTypeAllowableValues();
        if (!in_array($fora_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fora_type', must be one of '%s'",
                    $fora_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fora_type'] = $fora_type;

        return $this;
    }

    /**
     * Gets monthly_salary
     *
     * @return string|null
     */
    public function getMonthlySalary()
    {
        return $this->container['monthly_salary'];
    }

    /**
     * Sets monthly_salary
     *
     * @param string|null $monthly_salary monthly_salary
     *
     * @return self
     */
    public function setMonthlySalary($monthly_salary)
    {
        if (is_null($monthly_salary)) {
            throw new \InvalidArgumentException('non-nullable monthly_salary cannot be null');
        }
        $this->container['monthly_salary'] = $monthly_salary;

        return $this;
    }

    /**
     * Gets hourly_pay
     *
     * @return string|null
     */
    public function getHourlyPay()
    {
        return $this->container['hourly_pay'];
    }

    /**
     * Sets hourly_pay
     *
     * @param string|null $hourly_pay hourly_pay
     *
     * @return self
     */
    public function setHourlyPay($hourly_pay)
    {
        if (is_null($hourly_pay)) {
            throw new \InvalidArgumentException('non-nullable hourly_pay cannot be null');
        }
        $this->container['hourly_pay'] = $hourly_pay;

        return $this;
    }

    /**
     * Gets tax_allowance
     *
     * @return string|null
     */
    public function getTaxAllowance()
    {
        return $this->container['tax_allowance'];
    }

    /**
     * Sets tax_allowance
     *
     * @param string|null $tax_allowance tax_allowance
     *
     * @return self
     */
    public function setTaxAllowance($tax_allowance)
    {
        if (is_null($tax_allowance)) {
            throw new \InvalidArgumentException('non-nullable tax_allowance cannot be null');
        }
        $allowedValues = $this->getTaxAllowanceAllowableValues();
        if (!in_array($tax_allowance, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tax_allowance', must be one of '%s'",
                    $tax_allowance,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_allowance'] = $tax_allowance;

        return $this;
    }

    /**
     * Gets tax_table
     *
     * @return string|null
     */
    public function getTaxTable()
    {
        return $this->container['tax_table'];
    }

    /**
     * Sets tax_table
     *
     * @param string|null $tax_table tax_table
     *
     * @return self
     */
    public function setTaxTable($tax_table)
    {
        if (is_null($tax_table)) {
            throw new \InvalidArgumentException('non-nullable tax_table cannot be null');
        }
        $this->container['tax_table'] = $tax_table;

        return $this;
    }

    /**
     * Gets tax_column
     *
     * @return int|null
     */
    public function getTaxColumn()
    {
        return $this->container['tax_column'];
    }

    /**
     * Sets tax_column
     *
     * @param int|null $tax_column tax_column
     *
     * @return self
     */
    public function setTaxColumn($tax_column)
    {
        if (is_null($tax_column)) {
            throw new \InvalidArgumentException('non-nullable tax_column cannot be null');
        }

        if (($tax_column > 6)) {
            throw new \InvalidArgumentException('invalid value for $tax_column when calling EmployeeListItem., must be smaller than or equal to 6.');
        }
        if (($tax_column < 1)) {
            throw new \InvalidArgumentException('invalid value for $tax_column when calling EmployeeListItem., must be bigger than or equal to 1.');
        }

        $this->container['tax_column'] = $tax_column;

        return $this;
    }

    /**
     * Gets auto_non_recurring_tax
     *
     * @return bool|null
     */
    public function getAutoNonRecurringTax()
    {
        return $this->container['auto_non_recurring_tax'];
    }

    /**
     * Sets auto_non_recurring_tax
     *
     * @param bool|null $auto_non_recurring_tax auto_non_recurring_tax
     *
     * @return self
     */
    public function setAutoNonRecurringTax($auto_non_recurring_tax)
    {
        if (is_null($auto_non_recurring_tax)) {
            throw new \InvalidArgumentException('non-nullable auto_non_recurring_tax cannot be null');
        }
        $this->container['auto_non_recurring_tax'] = $auto_non_recurring_tax;

        return $this;
    }

    /**
     * Gets non_recurring_tax
     *
     * @return string|null
     */
    public function getNonRecurringTax()
    {
        return $this->container['non_recurring_tax'];
    }

    /**
     * Sets non_recurring_tax
     *
     * @param string|null $non_recurring_tax non_recurring_tax
     *
     * @return self
     */
    public function setNonRecurringTax($non_recurring_tax)
    {
        if (is_null($non_recurring_tax)) {
            throw new \InvalidArgumentException('non-nullable non_recurring_tax cannot be null');
        }
        $this->container['non_recurring_tax'] = $non_recurring_tax;

        return $this;
    }

    /**
     * Gets inactive
     *
     * @return bool|null
     */
    public function getInactive()
    {
        return $this->container['inactive'];
    }

    /**
     * Sets inactive
     *
     * @param bool|null $inactive inactive
     *
     * @return self
     */
    public function setInactive($inactive)
    {
        if (is_null($inactive)) {
            throw new \InvalidArgumentException('non-nullable inactive cannot be null');
        }
        $this->container['inactive'] = $inactive;

        return $this;
    }

    /**
     * Gets clearing_no
     *
     * @return string|null
     */
    public function getClearingNo()
    {
        return $this->container['clearing_no'];
    }

    /**
     * Sets clearing_no
     *
     * @param string|null $clearing_no clearing_no
     *
     * @return self
     */
    public function setClearingNo($clearing_no)
    {
        if (is_null($clearing_no)) {
            throw new \InvalidArgumentException('non-nullable clearing_no cannot be null');
        }
        $this->container['clearing_no'] = $clearing_no;

        return $this;
    }

    /**
     * Gets bank_account_no
     *
     * @return string|null
     */
    public function getBankAccountNo()
    {
        return $this->container['bank_account_no'];
    }

    /**
     * Sets bank_account_no
     *
     * @param string|null $bank_account_no bank_account_no
     *
     * @return self
     */
    public function setBankAccountNo($bank_account_no)
    {
        if (is_null($bank_account_no)) {
            throw new \InvalidArgumentException('non-nullable bank_account_no cannot be null');
        }
        $this->container['bank_account_no'] = $bank_account_no;

        return $this;
    }

    /**
     * Gets employed_to
     *
     * @return \DateTime|null
     */
    public function getEmployedTo()
    {
        return $this->container['employed_to'];
    }

    /**
     * Sets employed_to
     *
     * @param \DateTime|null $employed_to employed_to
     *
     * @return self
     */
    public function setEmployedTo($employed_to)
    {
        if (is_null($employed_to)) {
            throw new \InvalidArgumentException('non-nullable employed_to cannot be null');
        }
        $this->container['employed_to'] = $employed_to;

        return $this;
    }

    /**
     * Gets average_weekly_hours
     *
     * @return string|null
     */
    public function getAverageWeeklyHours()
    {
        return $this->container['average_weekly_hours'];
    }

    /**
     * Sets average_weekly_hours
     *
     * @param string|null $average_weekly_hours average_weekly_hours
     *
     * @return self
     */
    public function setAverageWeeklyHours($average_weekly_hours)
    {
        if (is_null($average_weekly_hours)) {
            throw new \InvalidArgumentException('non-nullable average_weekly_hours cannot be null');
        }
        $this->container['average_weekly_hours'] = $average_weekly_hours;

        return $this;
    }

    /**
     * Gets average_hourly_wage
     *
     * @return string|null
     */
    public function getAverageHourlyWage()
    {
        return $this->container['average_hourly_wage'];
    }

    /**
     * Sets average_hourly_wage
     *
     * @param string|null $average_hourly_wage average_hourly_wage
     *
     * @return self
     */
    public function setAverageHourlyWage($average_hourly_wage)
    {
        if (is_null($average_hourly_wage)) {
            throw new \InvalidArgumentException('non-nullable average_hourly_wage cannot be null');
        }
        $this->container['average_hourly_wage'] = $average_hourly_wage;

        return $this;
    }

    /**
     * Gets dated_wages
     *
     * @return \OpenAPI\Client\Model\EmployeeDatedWage[]|null
     */
    public function getDatedWages()
    {
        return $this->container['dated_wages'];
    }

    /**
     * Sets dated_wages
     *
     * @param \OpenAPI\Client\Model\EmployeeDatedWage[]|null $dated_wages dated_wages
     *
     * @return self
     */
    public function setDatedWages($dated_wages)
    {
        if (is_null($dated_wages)) {
            throw new \InvalidArgumentException('non-nullable dated_wages cannot be null');
        }
        $this->container['dated_wages'] = $dated_wages;

        return $this;
    }

    /**
     * Gets dated_schedules
     *
     * @return \OpenAPI\Client\Model\EmployeeDatedSchedule[]|null
     */
    public function getDatedSchedules()
    {
        return $this->container['dated_schedules'];
    }

    /**
     * Sets dated_schedules
     *
     * @param \OpenAPI\Client\Model\EmployeeDatedSchedule[]|null $dated_schedules dated_schedules
     *
     * @return self
     */
    public function setDatedSchedules($dated_schedules)
    {
        if (is_null($dated_schedules)) {
            throw new \InvalidArgumentException('non-nullable dated_schedules cannot be null');
        }
        $this->container['dated_schedules'] = $dated_schedules;

        return $this;
    }

    /**
     * Gets at_url
     *
     * @return string|null
     */
    public function getAtUrl()
    {
        return $this->container['at_url'];
    }

    /**
     * Sets at_url
     *
     * @param string|null $at_url at_url
     *
     * @return self
     */
    public function setAtUrl($at_url)
    {
        if (is_null($at_url)) {
            throw new \InvalidArgumentException('non-nullable at_url cannot be null');
        }
        $this->container['at_url'] = $at_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


