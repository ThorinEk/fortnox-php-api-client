<?php
/**
 * PurchaseOrderRow
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FortnoxApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [Guides & Good to Know section](https://www.fortnox.se/developer/guides-and-good-to-know/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit per access-token is 25 requests per 5 seconds. This equals to 300 requests per minute.  [Read more about this here.](https://www.fortnox.se/developer/guides-and-good-to-know/rate-limits-for-fortnox-api/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://www.fortnox.se/developer/guides-and-good-to-know/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FortnoxApi\Model;

use \ArrayAccess;
use \FortnoxApi\ObjectSerializer;

/**
 * PurchaseOrderRow Class Doc Comment
 *
 * @category Class
 * @package  FortnoxApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PurchaseOrderRow implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PurchaseOrderRow';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'purchase_order_id' => 'int',
        'item_id' => 'string',
        'ordered_quantity' => 'float',
        'item_description' => 'string',
        'item_unit' => 'string',
        'row_num' => 'int',
        'project_id' => 'string',
        'cost_center_code' => 'string',
        'remaining_ordered_quantity' => 'float',
        'currency_code' => 'string',
        'price' => 'float',
        'received_quantity' => 'float',
        'back_order_quantity' => 'float',
        'stock_point_id' => 'string',
        'stock_location_id' => 'string',
        'stock_point_code' => 'string',
        'stock_point_name' => 'string',
        'stock_location_code' => 'string',
        'stock_location_name' => 'string',
        'is_stock_item' => 'bool',
        'notes' => '\FortnoxApi\Model\PurchaseOrderRowNote[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'purchase_order_id' => 'int64',
        'item_id' => null,
        'ordered_quantity' => null,
        'item_description' => null,
        'item_unit' => null,
        'row_num' => 'int64',
        'project_id' => null,
        'cost_center_code' => null,
        'remaining_ordered_quantity' => null,
        'currency_code' => null,
        'price' => null,
        'received_quantity' => null,
        'back_order_quantity' => null,
        'stock_point_id' => 'uuid',
        'stock_location_id' => 'uuid',
        'stock_point_code' => null,
        'stock_point_name' => null,
        'stock_location_code' => null,
        'stock_location_name' => null,
        'is_stock_item' => null,
        'notes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'purchase_order_id' => false,
		'item_id' => false,
		'ordered_quantity' => false,
		'item_description' => false,
		'item_unit' => false,
		'row_num' => false,
		'project_id' => false,
		'cost_center_code' => false,
		'remaining_ordered_quantity' => false,
		'currency_code' => false,
		'price' => false,
		'received_quantity' => false,
		'back_order_quantity' => false,
		'stock_point_id' => false,
		'stock_location_id' => false,
		'stock_point_code' => false,
		'stock_point_name' => false,
		'stock_location_code' => false,
		'stock_location_name' => false,
		'is_stock_item' => false,
		'notes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'purchase_order_id' => 'purchaseOrderId',
        'item_id' => 'itemId',
        'ordered_quantity' => 'orderedQuantity',
        'item_description' => 'itemDescription',
        'item_unit' => 'itemUnit',
        'row_num' => 'rowNum',
        'project_id' => 'projectId',
        'cost_center_code' => 'costCenterCode',
        'remaining_ordered_quantity' => 'remainingOrderedQuantity',
        'currency_code' => 'currencyCode',
        'price' => 'price',
        'received_quantity' => 'receivedQuantity',
        'back_order_quantity' => 'backOrderQuantity',
        'stock_point_id' => 'stockPointId',
        'stock_location_id' => 'stockLocationId',
        'stock_point_code' => 'stockPointCode',
        'stock_point_name' => 'stockPointName',
        'stock_location_code' => 'stockLocationCode',
        'stock_location_name' => 'stockLocationName',
        'is_stock_item' => 'isStockItem',
        'notes' => 'notes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'purchase_order_id' => 'setPurchaseOrderId',
        'item_id' => 'setItemId',
        'ordered_quantity' => 'setOrderedQuantity',
        'item_description' => 'setItemDescription',
        'item_unit' => 'setItemUnit',
        'row_num' => 'setRowNum',
        'project_id' => 'setProjectId',
        'cost_center_code' => 'setCostCenterCode',
        'remaining_ordered_quantity' => 'setRemainingOrderedQuantity',
        'currency_code' => 'setCurrencyCode',
        'price' => 'setPrice',
        'received_quantity' => 'setReceivedQuantity',
        'back_order_quantity' => 'setBackOrderQuantity',
        'stock_point_id' => 'setStockPointId',
        'stock_location_id' => 'setStockLocationId',
        'stock_point_code' => 'setStockPointCode',
        'stock_point_name' => 'setStockPointName',
        'stock_location_code' => 'setStockLocationCode',
        'stock_location_name' => 'setStockLocationName',
        'is_stock_item' => 'setIsStockItem',
        'notes' => 'setNotes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'purchase_order_id' => 'getPurchaseOrderId',
        'item_id' => 'getItemId',
        'ordered_quantity' => 'getOrderedQuantity',
        'item_description' => 'getItemDescription',
        'item_unit' => 'getItemUnit',
        'row_num' => 'getRowNum',
        'project_id' => 'getProjectId',
        'cost_center_code' => 'getCostCenterCode',
        'remaining_ordered_quantity' => 'getRemainingOrderedQuantity',
        'currency_code' => 'getCurrencyCode',
        'price' => 'getPrice',
        'received_quantity' => 'getReceivedQuantity',
        'back_order_quantity' => 'getBackOrderQuantity',
        'stock_point_id' => 'getStockPointId',
        'stock_location_id' => 'getStockLocationId',
        'stock_point_code' => 'getStockPointCode',
        'stock_point_name' => 'getStockPointName',
        'stock_location_code' => 'getStockLocationCode',
        'stock_location_name' => 'getStockLocationName',
        'is_stock_item' => 'getIsStockItem',
        'notes' => 'getNotes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('purchase_order_id', $data ?? [], null);
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('ordered_quantity', $data ?? [], null);
        $this->setIfExists('item_description', $data ?? [], null);
        $this->setIfExists('item_unit', $data ?? [], null);
        $this->setIfExists('row_num', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('cost_center_code', $data ?? [], null);
        $this->setIfExists('remaining_ordered_quantity', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('received_quantity', $data ?? [], null);
        $this->setIfExists('back_order_quantity', $data ?? [], null);
        $this->setIfExists('stock_point_id', $data ?? [], null);
        $this->setIfExists('stock_location_id', $data ?? [], null);
        $this->setIfExists('stock_point_code', $data ?? [], null);
        $this->setIfExists('stock_point_name', $data ?? [], null);
        $this->setIfExists('stock_location_code', $data ?? [], null);
        $this->setIfExists('stock_location_name', $data ?? [], null);
        $this->setIfExists('is_stock_item', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['item_id'] === null) {
            $invalidProperties[] = "'item_id' can't be null";
        }
        if ((mb_strlen($this->container['item_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'item_id', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['item_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'item_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['ordered_quantity'] === null) {
            $invalidProperties[] = "'ordered_quantity' can't be null";
        }
        if (($this->container['ordered_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'ordered_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['project_id']) && (mb_strlen($this->container['project_id']) > 25)) {
            $invalidProperties[] = "invalid value for 'project_id', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['project_id']) && (mb_strlen($this->container['project_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'project_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cost_center_code']) && (mb_strlen($this->container['cost_center_code']) > 25)) {
            $invalidProperties[] = "invalid value for 'cost_center_code', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['cost_center_code']) && (mb_strlen($this->container['cost_center_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'cost_center_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['remaining_ordered_quantity'] === null) {
            $invalidProperties[] = "'remaining_ordered_quantity' can't be null";
        }
        if (($this->container['remaining_ordered_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'remaining_ordered_quantity', must be bigger than or equal to 0.";
        }

        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ((mb_strlen($this->container['currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['currency_code']) < 3)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['price']) && ($this->container['price'] < 0)) {
            $invalidProperties[] = "invalid value for 'price', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets purchase_order_id
     *
     * @return int|null
     */
    public function getPurchaseOrderId()
    {
        return $this->container['purchase_order_id'];
    }

    /**
     * Sets purchase_order_id
     *
     * @param int|null $purchase_order_id purchase_order_id
     *
     * @return self
     */
    public function setPurchaseOrderId($purchase_order_id)
    {
        if (is_null($purchase_order_id)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_id cannot be null');
        }
        $this->container['purchase_order_id'] = $purchase_order_id;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return string
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string $item_id item_id
     *
     * @return self
     */
    public function setItemId($item_id)
    {
        if (is_null($item_id)) {
            throw new \InvalidArgumentException('non-nullable item_id cannot be null');
        }
        if ((mb_strlen($item_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $item_id when calling PurchaseOrderRow., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($item_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $item_id when calling PurchaseOrderRow., must be bigger than or equal to 1.');
        }

        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets ordered_quantity
     *
     * @return float
     */
    public function getOrderedQuantity()
    {
        return $this->container['ordered_quantity'];
    }

    /**
     * Sets ordered_quantity
     *
     * @param float $ordered_quantity ordered_quantity
     *
     * @return self
     */
    public function setOrderedQuantity($ordered_quantity)
    {
        if (is_null($ordered_quantity)) {
            throw new \InvalidArgumentException('non-nullable ordered_quantity cannot be null');
        }

        if (($ordered_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $ordered_quantity when calling PurchaseOrderRow., must be bigger than or equal to 0.');
        }

        $this->container['ordered_quantity'] = $ordered_quantity;

        return $this;
    }

    /**
     * Gets item_description
     *
     * @return string|null
     */
    public function getItemDescription()
    {
        return $this->container['item_description'];
    }

    /**
     * Sets item_description
     *
     * @param string|null $item_description item_description
     *
     * @return self
     */
    public function setItemDescription($item_description)
    {
        if (is_null($item_description)) {
            throw new \InvalidArgumentException('non-nullable item_description cannot be null');
        }
        $this->container['item_description'] = $item_description;

        return $this;
    }

    /**
     * Gets item_unit
     *
     * @return string|null
     */
    public function getItemUnit()
    {
        return $this->container['item_unit'];
    }

    /**
     * Sets item_unit
     *
     * @param string|null $item_unit item_unit
     *
     * @return self
     */
    public function setItemUnit($item_unit)
    {
        if (is_null($item_unit)) {
            throw new \InvalidArgumentException('non-nullable item_unit cannot be null');
        }
        $this->container['item_unit'] = $item_unit;

        return $this;
    }

    /**
     * Gets row_num
     *
     * @return int|null
     */
    public function getRowNum()
    {
        return $this->container['row_num'];
    }

    /**
     * Sets row_num
     *
     * @param int|null $row_num row_num
     *
     * @return self
     */
    public function setRowNum($row_num)
    {
        if (is_null($row_num)) {
            throw new \InvalidArgumentException('non-nullable row_num cannot be null');
        }
        $this->container['row_num'] = $row_num;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string|null $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        if (is_null($project_id)) {
            throw new \InvalidArgumentException('non-nullable project_id cannot be null');
        }
        if ((mb_strlen($project_id) > 25)) {
            throw new \InvalidArgumentException('invalid length for $project_id when calling PurchaseOrderRow., must be smaller than or equal to 25.');
        }
        if ((mb_strlen($project_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $project_id when calling PurchaseOrderRow., must be bigger than or equal to 0.');
        }

        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets cost_center_code
     *
     * @return string|null
     */
    public function getCostCenterCode()
    {
        return $this->container['cost_center_code'];
    }

    /**
     * Sets cost_center_code
     *
     * @param string|null $cost_center_code cost_center_code
     *
     * @return self
     */
    public function setCostCenterCode($cost_center_code)
    {
        if (is_null($cost_center_code)) {
            throw new \InvalidArgumentException('non-nullable cost_center_code cannot be null');
        }
        if ((mb_strlen($cost_center_code) > 25)) {
            throw new \InvalidArgumentException('invalid length for $cost_center_code when calling PurchaseOrderRow., must be smaller than or equal to 25.');
        }
        if ((mb_strlen($cost_center_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $cost_center_code when calling PurchaseOrderRow., must be bigger than or equal to 0.');
        }

        $this->container['cost_center_code'] = $cost_center_code;

        return $this;
    }

    /**
     * Gets remaining_ordered_quantity
     *
     * @return float
     */
    public function getRemainingOrderedQuantity()
    {
        return $this->container['remaining_ordered_quantity'];
    }

    /**
     * Sets remaining_ordered_quantity
     *
     * @param float $remaining_ordered_quantity remaining_ordered_quantity
     *
     * @return self
     */
    public function setRemainingOrderedQuantity($remaining_ordered_quantity)
    {
        if (is_null($remaining_ordered_quantity)) {
            throw new \InvalidArgumentException('non-nullable remaining_ordered_quantity cannot be null');
        }

        if (($remaining_ordered_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $remaining_ordered_quantity when calling PurchaseOrderRow., must be bigger than or equal to 0.');
        }

        $this->container['remaining_ordered_quantity'] = $remaining_ordered_quantity;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        if ((mb_strlen($currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling PurchaseOrderRow., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($currency_code) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling PurchaseOrderRow., must be bigger than or equal to 3.');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }

        if (($price < 0)) {
            throw new \InvalidArgumentException('invalid value for $price when calling PurchaseOrderRow., must be bigger than or equal to 0.');
        }

        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets received_quantity
     *
     * @return float|null
     */
    public function getReceivedQuantity()
    {
        return $this->container['received_quantity'];
    }

    /**
     * Sets received_quantity
     *
     * @param float|null $received_quantity received_quantity
     *
     * @return self
     */
    public function setReceivedQuantity($received_quantity)
    {
        if (is_null($received_quantity)) {
            throw new \InvalidArgumentException('non-nullable received_quantity cannot be null');
        }
        $this->container['received_quantity'] = $received_quantity;

        return $this;
    }

    /**
     * Gets back_order_quantity
     *
     * @return float|null
     */
    public function getBackOrderQuantity()
    {
        return $this->container['back_order_quantity'];
    }

    /**
     * Sets back_order_quantity
     *
     * @param float|null $back_order_quantity back_order_quantity
     *
     * @return self
     */
    public function setBackOrderQuantity($back_order_quantity)
    {
        if (is_null($back_order_quantity)) {
            throw new \InvalidArgumentException('non-nullable back_order_quantity cannot be null');
        }
        $this->container['back_order_quantity'] = $back_order_quantity;

        return $this;
    }

    /**
     * Gets stock_point_id
     *
     * @return string|null
     */
    public function getStockPointId()
    {
        return $this->container['stock_point_id'];
    }

    /**
     * Sets stock_point_id
     *
     * @param string|null $stock_point_id stock_point_id
     *
     * @return self
     */
    public function setStockPointId($stock_point_id)
    {
        if (is_null($stock_point_id)) {
            throw new \InvalidArgumentException('non-nullable stock_point_id cannot be null');
        }
        $this->container['stock_point_id'] = $stock_point_id;

        return $this;
    }

    /**
     * Gets stock_location_id
     *
     * @return string|null
     */
    public function getStockLocationId()
    {
        return $this->container['stock_location_id'];
    }

    /**
     * Sets stock_location_id
     *
     * @param string|null $stock_location_id stock_location_id
     *
     * @return self
     */
    public function setStockLocationId($stock_location_id)
    {
        if (is_null($stock_location_id)) {
            throw new \InvalidArgumentException('non-nullable stock_location_id cannot be null');
        }
        $this->container['stock_location_id'] = $stock_location_id;

        return $this;
    }

    /**
     * Gets stock_point_code
     *
     * @return string|null
     */
    public function getStockPointCode()
    {
        return $this->container['stock_point_code'];
    }

    /**
     * Sets stock_point_code
     *
     * @param string|null $stock_point_code stock_point_code
     *
     * @return self
     */
    public function setStockPointCode($stock_point_code)
    {
        if (is_null($stock_point_code)) {
            throw new \InvalidArgumentException('non-nullable stock_point_code cannot be null');
        }
        $this->container['stock_point_code'] = $stock_point_code;

        return $this;
    }

    /**
     * Gets stock_point_name
     *
     * @return string|null
     */
    public function getStockPointName()
    {
        return $this->container['stock_point_name'];
    }

    /**
     * Sets stock_point_name
     *
     * @param string|null $stock_point_name stock_point_name
     *
     * @return self
     */
    public function setStockPointName($stock_point_name)
    {
        if (is_null($stock_point_name)) {
            throw new \InvalidArgumentException('non-nullable stock_point_name cannot be null');
        }
        $this->container['stock_point_name'] = $stock_point_name;

        return $this;
    }

    /**
     * Gets stock_location_code
     *
     * @return string|null
     */
    public function getStockLocationCode()
    {
        return $this->container['stock_location_code'];
    }

    /**
     * Sets stock_location_code
     *
     * @param string|null $stock_location_code stock_location_code
     *
     * @return self
     */
    public function setStockLocationCode($stock_location_code)
    {
        if (is_null($stock_location_code)) {
            throw new \InvalidArgumentException('non-nullable stock_location_code cannot be null');
        }
        $this->container['stock_location_code'] = $stock_location_code;

        return $this;
    }

    /**
     * Gets stock_location_name
     *
     * @return string|null
     */
    public function getStockLocationName()
    {
        return $this->container['stock_location_name'];
    }

    /**
     * Sets stock_location_name
     *
     * @param string|null $stock_location_name stock_location_name
     *
     * @return self
     */
    public function setStockLocationName($stock_location_name)
    {
        if (is_null($stock_location_name)) {
            throw new \InvalidArgumentException('non-nullable stock_location_name cannot be null');
        }
        $this->container['stock_location_name'] = $stock_location_name;

        return $this;
    }

    /**
     * Gets is_stock_item
     *
     * @return bool|null
     */
    public function getIsStockItem()
    {
        return $this->container['is_stock_item'];
    }

    /**
     * Sets is_stock_item
     *
     * @param bool|null $is_stock_item is_stock_item
     *
     * @return self
     */
    public function setIsStockItem($is_stock_item)
    {
        if (is_null($is_stock_item)) {
            throw new \InvalidArgumentException('non-nullable is_stock_item cannot be null');
        }
        $this->container['is_stock_item'] = $is_stock_item;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return \FortnoxApi\Model\PurchaseOrderRowNote[]|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param \FortnoxApi\Model\PurchaseOrderRowNote[]|null $notes notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


