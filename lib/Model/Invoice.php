<?php
/**
 * Invoice
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [Guides & Good to Know section](https://www.fortnox.se/developer/guides-and-good-to-know/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit per access-token is 25 requests per 5 seconds. This equals to 300 requests per minute.  [Read more about this here.](https://www.fortnox.se/developer/guides-and-good-to-know/rate-limits-for-fortnox-api/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://www.fortnox.se/developer/guides-and-good-to-know/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Invoice Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Invoice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'at_url' => 'string',
        'at_url_tax_reduction_list' => 'string',
        'administration_fee' => 'float',
        'administration_fee_vat' => 'float',
        'address1' => 'string',
        'address2' => 'string',
        'balance' => 'float',
        'basis_tax_reduction' => 'float',
        'booked' => 'bool',
        'cancelled' => 'bool',
        'city' => 'string',
        'comments' => 'string',
        'contract_reference' => 'int',
        'contribution_percent' => 'float',
        'contribution_value' => 'float',
        'country' => 'string',
        'cost_center' => 'string',
        'credit' => 'string',
        'credit_invoice_reference' => 'string',
        'currency' => 'string',
        'currency_rate' => 'float',
        'currency_unit' => 'int',
        'customer_name' => 'string',
        'customer_number' => 'string',
        'delivery_address1' => 'string',
        'delivery_address2' => 'string',
        'delivery_city' => 'string',
        'delivery_country' => 'string',
        'delivery_date' => '\DateTime',
        'delivery_name' => 'string',
        'delivery_zip_code' => 'string',
        'document_number' => 'string',
        'due_date' => '\DateTime',
        'edi_information' => '\OpenAPI\Client\Model\InvoiceEDIInformation',
        'email_information' => '\OpenAPI\Client\Model\InvoiceEmailInformation',
        'eu_quarterly_report' => 'bool',
        'external_invoice_reference1' => 'string',
        'external_invoice_reference2' => 'string',
        'freight' => 'float',
        'freight_vat' => 'float',
        'gross' => 'float',
        'house_work' => 'bool',
        'invoice_date' => '\DateTime',
        'invoice_period_start' => '\DateTime',
        'invoice_period_end' => '\DateTime',
        'invoice_period_reference' => 'string',
        'invoice_rows' => '\OpenAPI\Client\Model\InvoiceInvoiceRow[]',
        'invoice_type' => 'string',
        'labels' => '\OpenAPI\Client\Model\InvoiceLabel[]',
        'language' => 'string',
        'last_remind_date' => '\DateTime',
        'net' => 'float',
        'not_completed' => 'bool',
        'nox_finans' => 'bool',
        'ocr' => 'string',
        'offer_reference' => 'string',
        'order_reference' => 'string',
        'organisation_number' => 'string',
        'our_reference' => 'string',
        'payment_way' => 'string',
        'phone1' => 'string',
        'phone2' => 'string',
        'price_list' => 'string',
        'print_template' => 'string',
        'project' => 'string',
        'warehouse_ready' => 'bool',
        'outbound_date' => '\DateTime',
        'remarks' => 'string',
        'reminders' => 'int',
        'round_off' => 'float',
        'sent' => 'bool',
        'tax_reduction' => 'int',
        'terms_of_delivery' => 'string',
        'terms_of_payment' => 'string',
        'time_basis_reference' => 'int',
        'total' => 'float',
        'total_to_pay' => 'float',
        'total_vat' => 'float',
        'vat_included' => 'bool',
        'voucher_number' => 'int',
        'voucher_series' => 'string',
        'voucher_year' => 'int',
        'way_of_delivery' => 'string',
        'your_order_number' => 'string',
        'your_reference' => 'string',
        'zip_code' => 'string',
        'accounting_method' => 'string',
        'tax_reduction_type' => 'string',
        'final_pay_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'at_url' => null,
        'at_url_tax_reduction_list' => null,
        'administration_fee' => 'double',
        'administration_fee_vat' => 'double',
        'address1' => null,
        'address2' => null,
        'balance' => 'double',
        'basis_tax_reduction' => 'double',
        'booked' => null,
        'cancelled' => null,
        'city' => null,
        'comments' => null,
        'contract_reference' => 'int32',
        'contribution_percent' => 'double',
        'contribution_value' => 'double',
        'country' => null,
        'cost_center' => null,
        'credit' => null,
        'credit_invoice_reference' => null,
        'currency' => null,
        'currency_rate' => 'double',
        'currency_unit' => 'int32',
        'customer_name' => null,
        'customer_number' => null,
        'delivery_address1' => null,
        'delivery_address2' => null,
        'delivery_city' => null,
        'delivery_country' => null,
        'delivery_date' => 'date',
        'delivery_name' => null,
        'delivery_zip_code' => null,
        'document_number' => null,
        'due_date' => 'date',
        'edi_information' => null,
        'email_information' => null,
        'eu_quarterly_report' => null,
        'external_invoice_reference1' => null,
        'external_invoice_reference2' => null,
        'freight' => 'double',
        'freight_vat' => 'double',
        'gross' => 'double',
        'house_work' => null,
        'invoice_date' => 'date',
        'invoice_period_start' => 'date',
        'invoice_period_end' => 'date',
        'invoice_period_reference' => null,
        'invoice_rows' => null,
        'invoice_type' => null,
        'labels' => null,
        'language' => null,
        'last_remind_date' => 'date',
        'net' => 'double',
        'not_completed' => null,
        'nox_finans' => null,
        'ocr' => null,
        'offer_reference' => null,
        'order_reference' => null,
        'organisation_number' => null,
        'our_reference' => null,
        'payment_way' => null,
        'phone1' => null,
        'phone2' => null,
        'price_list' => null,
        'print_template' => null,
        'project' => null,
        'warehouse_ready' => null,
        'outbound_date' => 'date',
        'remarks' => null,
        'reminders' => 'int32',
        'round_off' => 'double',
        'sent' => null,
        'tax_reduction' => 'int32',
        'terms_of_delivery' => null,
        'terms_of_payment' => null,
        'time_basis_reference' => 'int32',
        'total' => 'double',
        'total_to_pay' => 'double',
        'total_vat' => 'double',
        'vat_included' => null,
        'voucher_number' => 'int32',
        'voucher_series' => null,
        'voucher_year' => 'int32',
        'way_of_delivery' => null,
        'your_order_number' => null,
        'your_reference' => null,
        'zip_code' => null,
        'accounting_method' => null,
        'tax_reduction_type' => null,
        'final_pay_date' => 'date'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'at_url' => false,
		'at_url_tax_reduction_list' => false,
		'administration_fee' => false,
		'administration_fee_vat' => false,
		'address1' => false,
		'address2' => false,
		'balance' => false,
		'basis_tax_reduction' => false,
		'booked' => false,
		'cancelled' => false,
		'city' => false,
		'comments' => false,
		'contract_reference' => false,
		'contribution_percent' => false,
		'contribution_value' => false,
		'country' => false,
		'cost_center' => false,
		'credit' => false,
		'credit_invoice_reference' => false,
		'currency' => false,
		'currency_rate' => false,
		'currency_unit' => false,
		'customer_name' => false,
		'customer_number' => false,
		'delivery_address1' => false,
		'delivery_address2' => false,
		'delivery_city' => false,
		'delivery_country' => false,
		'delivery_date' => false,
		'delivery_name' => false,
		'delivery_zip_code' => false,
		'document_number' => false,
		'due_date' => false,
		'edi_information' => false,
		'email_information' => false,
		'eu_quarterly_report' => false,
		'external_invoice_reference1' => false,
		'external_invoice_reference2' => false,
		'freight' => false,
		'freight_vat' => false,
		'gross' => false,
		'house_work' => false,
		'invoice_date' => false,
		'invoice_period_start' => false,
		'invoice_period_end' => false,
		'invoice_period_reference' => false,
		'invoice_rows' => false,
		'invoice_type' => false,
		'labels' => false,
		'language' => false,
		'last_remind_date' => false,
		'net' => false,
		'not_completed' => false,
		'nox_finans' => false,
		'ocr' => false,
		'offer_reference' => false,
		'order_reference' => false,
		'organisation_number' => false,
		'our_reference' => false,
		'payment_way' => false,
		'phone1' => false,
		'phone2' => false,
		'price_list' => false,
		'print_template' => false,
		'project' => false,
		'warehouse_ready' => false,
		'outbound_date' => false,
		'remarks' => false,
		'reminders' => false,
		'round_off' => false,
		'sent' => false,
		'tax_reduction' => false,
		'terms_of_delivery' => false,
		'terms_of_payment' => false,
		'time_basis_reference' => false,
		'total' => false,
		'total_to_pay' => false,
		'total_vat' => false,
		'vat_included' => false,
		'voucher_number' => false,
		'voucher_series' => false,
		'voucher_year' => false,
		'way_of_delivery' => false,
		'your_order_number' => false,
		'your_reference' => false,
		'zip_code' => false,
		'accounting_method' => false,
		'tax_reduction_type' => false,
		'final_pay_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'at_url' => '@url',
        'at_url_tax_reduction_list' => '@urlTaxReductionList',
        'administration_fee' => 'AdministrationFee',
        'administration_fee_vat' => 'AdministrationFeeVAT',
        'address1' => 'Address1',
        'address2' => 'Address2',
        'balance' => 'Balance',
        'basis_tax_reduction' => 'BasisTaxReduction',
        'booked' => 'Booked',
        'cancelled' => 'Cancelled',
        'city' => 'City',
        'comments' => 'Comments',
        'contract_reference' => 'ContractReference',
        'contribution_percent' => 'ContributionPercent',
        'contribution_value' => 'ContributionValue',
        'country' => 'Country',
        'cost_center' => 'CostCenter',
        'credit' => 'Credit',
        'credit_invoice_reference' => 'CreditInvoiceReference',
        'currency' => 'Currency',
        'currency_rate' => 'CurrencyRate',
        'currency_unit' => 'CurrencyUnit',
        'customer_name' => 'CustomerName',
        'customer_number' => 'CustomerNumber',
        'delivery_address1' => 'DeliveryAddress1',
        'delivery_address2' => 'DeliveryAddress2',
        'delivery_city' => 'DeliveryCity',
        'delivery_country' => 'DeliveryCountry',
        'delivery_date' => 'DeliveryDate',
        'delivery_name' => 'DeliveryName',
        'delivery_zip_code' => 'DeliveryZipCode',
        'document_number' => 'DocumentNumber',
        'due_date' => 'DueDate',
        'edi_information' => 'EDIInformation',
        'email_information' => 'EmailInformation',
        'eu_quarterly_report' => 'EUQuarterlyReport',
        'external_invoice_reference1' => 'ExternalInvoiceReference1',
        'external_invoice_reference2' => 'ExternalInvoiceReference2',
        'freight' => 'Freight',
        'freight_vat' => 'FreightVAT',
        'gross' => 'Gross',
        'house_work' => 'HouseWork',
        'invoice_date' => 'InvoiceDate',
        'invoice_period_start' => 'InvoicePeriodStart',
        'invoice_period_end' => 'InvoicePeriodEnd',
        'invoice_period_reference' => 'InvoicePeriodReference',
        'invoice_rows' => 'InvoiceRows',
        'invoice_type' => 'InvoiceType',
        'labels' => 'Labels',
        'language' => 'Language',
        'last_remind_date' => 'LastRemindDate',
        'net' => 'Net',
        'not_completed' => 'NotCompleted',
        'nox_finans' => 'NoxFinans',
        'ocr' => 'OCR',
        'offer_reference' => 'OfferReference',
        'order_reference' => 'OrderReference',
        'organisation_number' => 'OrganisationNumber',
        'our_reference' => 'OurReference',
        'payment_way' => 'PaymentWay',
        'phone1' => 'Phone1',
        'phone2' => 'Phone2',
        'price_list' => 'PriceList',
        'print_template' => 'PrintTemplate',
        'project' => 'Project',
        'warehouse_ready' => 'WarehouseReady',
        'outbound_date' => 'OutboundDate',
        'remarks' => 'Remarks',
        'reminders' => 'Reminders',
        'round_off' => 'RoundOff',
        'sent' => 'Sent',
        'tax_reduction' => 'TaxReduction',
        'terms_of_delivery' => 'TermsOfDelivery',
        'terms_of_payment' => 'TermsOfPayment',
        'time_basis_reference' => 'TimeBasisReference',
        'total' => 'Total',
        'total_to_pay' => 'TotalToPay',
        'total_vat' => 'TotalVAT',
        'vat_included' => 'VATIncluded',
        'voucher_number' => 'VoucherNumber',
        'voucher_series' => 'VoucherSeries',
        'voucher_year' => 'VoucherYear',
        'way_of_delivery' => 'WayOfDelivery',
        'your_order_number' => 'YourOrderNumber',
        'your_reference' => 'YourReference',
        'zip_code' => 'ZipCode',
        'accounting_method' => 'AccountingMethod',
        'tax_reduction_type' => 'TaxReductionType',
        'final_pay_date' => 'FinalPayDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'at_url' => 'setAtUrl',
        'at_url_tax_reduction_list' => 'setAtUrlTaxReductionList',
        'administration_fee' => 'setAdministrationFee',
        'administration_fee_vat' => 'setAdministrationFeeVat',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'balance' => 'setBalance',
        'basis_tax_reduction' => 'setBasisTaxReduction',
        'booked' => 'setBooked',
        'cancelled' => 'setCancelled',
        'city' => 'setCity',
        'comments' => 'setComments',
        'contract_reference' => 'setContractReference',
        'contribution_percent' => 'setContributionPercent',
        'contribution_value' => 'setContributionValue',
        'country' => 'setCountry',
        'cost_center' => 'setCostCenter',
        'credit' => 'setCredit',
        'credit_invoice_reference' => 'setCreditInvoiceReference',
        'currency' => 'setCurrency',
        'currency_rate' => 'setCurrencyRate',
        'currency_unit' => 'setCurrencyUnit',
        'customer_name' => 'setCustomerName',
        'customer_number' => 'setCustomerNumber',
        'delivery_address1' => 'setDeliveryAddress1',
        'delivery_address2' => 'setDeliveryAddress2',
        'delivery_city' => 'setDeliveryCity',
        'delivery_country' => 'setDeliveryCountry',
        'delivery_date' => 'setDeliveryDate',
        'delivery_name' => 'setDeliveryName',
        'delivery_zip_code' => 'setDeliveryZipCode',
        'document_number' => 'setDocumentNumber',
        'due_date' => 'setDueDate',
        'edi_information' => 'setEdiInformation',
        'email_information' => 'setEmailInformation',
        'eu_quarterly_report' => 'setEuQuarterlyReport',
        'external_invoice_reference1' => 'setExternalInvoiceReference1',
        'external_invoice_reference2' => 'setExternalInvoiceReference2',
        'freight' => 'setFreight',
        'freight_vat' => 'setFreightVat',
        'gross' => 'setGross',
        'house_work' => 'setHouseWork',
        'invoice_date' => 'setInvoiceDate',
        'invoice_period_start' => 'setInvoicePeriodStart',
        'invoice_period_end' => 'setInvoicePeriodEnd',
        'invoice_period_reference' => 'setInvoicePeriodReference',
        'invoice_rows' => 'setInvoiceRows',
        'invoice_type' => 'setInvoiceType',
        'labels' => 'setLabels',
        'language' => 'setLanguage',
        'last_remind_date' => 'setLastRemindDate',
        'net' => 'setNet',
        'not_completed' => 'setNotCompleted',
        'nox_finans' => 'setNoxFinans',
        'ocr' => 'setOcr',
        'offer_reference' => 'setOfferReference',
        'order_reference' => 'setOrderReference',
        'organisation_number' => 'setOrganisationNumber',
        'our_reference' => 'setOurReference',
        'payment_way' => 'setPaymentWay',
        'phone1' => 'setPhone1',
        'phone2' => 'setPhone2',
        'price_list' => 'setPriceList',
        'print_template' => 'setPrintTemplate',
        'project' => 'setProject',
        'warehouse_ready' => 'setWarehouseReady',
        'outbound_date' => 'setOutboundDate',
        'remarks' => 'setRemarks',
        'reminders' => 'setReminders',
        'round_off' => 'setRoundOff',
        'sent' => 'setSent',
        'tax_reduction' => 'setTaxReduction',
        'terms_of_delivery' => 'setTermsOfDelivery',
        'terms_of_payment' => 'setTermsOfPayment',
        'time_basis_reference' => 'setTimeBasisReference',
        'total' => 'setTotal',
        'total_to_pay' => 'setTotalToPay',
        'total_vat' => 'setTotalVat',
        'vat_included' => 'setVatIncluded',
        'voucher_number' => 'setVoucherNumber',
        'voucher_series' => 'setVoucherSeries',
        'voucher_year' => 'setVoucherYear',
        'way_of_delivery' => 'setWayOfDelivery',
        'your_order_number' => 'setYourOrderNumber',
        'your_reference' => 'setYourReference',
        'zip_code' => 'setZipCode',
        'accounting_method' => 'setAccountingMethod',
        'tax_reduction_type' => 'setTaxReductionType',
        'final_pay_date' => 'setFinalPayDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'at_url' => 'getAtUrl',
        'at_url_tax_reduction_list' => 'getAtUrlTaxReductionList',
        'administration_fee' => 'getAdministrationFee',
        'administration_fee_vat' => 'getAdministrationFeeVat',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'balance' => 'getBalance',
        'basis_tax_reduction' => 'getBasisTaxReduction',
        'booked' => 'getBooked',
        'cancelled' => 'getCancelled',
        'city' => 'getCity',
        'comments' => 'getComments',
        'contract_reference' => 'getContractReference',
        'contribution_percent' => 'getContributionPercent',
        'contribution_value' => 'getContributionValue',
        'country' => 'getCountry',
        'cost_center' => 'getCostCenter',
        'credit' => 'getCredit',
        'credit_invoice_reference' => 'getCreditInvoiceReference',
        'currency' => 'getCurrency',
        'currency_rate' => 'getCurrencyRate',
        'currency_unit' => 'getCurrencyUnit',
        'customer_name' => 'getCustomerName',
        'customer_number' => 'getCustomerNumber',
        'delivery_address1' => 'getDeliveryAddress1',
        'delivery_address2' => 'getDeliveryAddress2',
        'delivery_city' => 'getDeliveryCity',
        'delivery_country' => 'getDeliveryCountry',
        'delivery_date' => 'getDeliveryDate',
        'delivery_name' => 'getDeliveryName',
        'delivery_zip_code' => 'getDeliveryZipCode',
        'document_number' => 'getDocumentNumber',
        'due_date' => 'getDueDate',
        'edi_information' => 'getEdiInformation',
        'email_information' => 'getEmailInformation',
        'eu_quarterly_report' => 'getEuQuarterlyReport',
        'external_invoice_reference1' => 'getExternalInvoiceReference1',
        'external_invoice_reference2' => 'getExternalInvoiceReference2',
        'freight' => 'getFreight',
        'freight_vat' => 'getFreightVat',
        'gross' => 'getGross',
        'house_work' => 'getHouseWork',
        'invoice_date' => 'getInvoiceDate',
        'invoice_period_start' => 'getInvoicePeriodStart',
        'invoice_period_end' => 'getInvoicePeriodEnd',
        'invoice_period_reference' => 'getInvoicePeriodReference',
        'invoice_rows' => 'getInvoiceRows',
        'invoice_type' => 'getInvoiceType',
        'labels' => 'getLabels',
        'language' => 'getLanguage',
        'last_remind_date' => 'getLastRemindDate',
        'net' => 'getNet',
        'not_completed' => 'getNotCompleted',
        'nox_finans' => 'getNoxFinans',
        'ocr' => 'getOcr',
        'offer_reference' => 'getOfferReference',
        'order_reference' => 'getOrderReference',
        'organisation_number' => 'getOrganisationNumber',
        'our_reference' => 'getOurReference',
        'payment_way' => 'getPaymentWay',
        'phone1' => 'getPhone1',
        'phone2' => 'getPhone2',
        'price_list' => 'getPriceList',
        'print_template' => 'getPrintTemplate',
        'project' => 'getProject',
        'warehouse_ready' => 'getWarehouseReady',
        'outbound_date' => 'getOutboundDate',
        'remarks' => 'getRemarks',
        'reminders' => 'getReminders',
        'round_off' => 'getRoundOff',
        'sent' => 'getSent',
        'tax_reduction' => 'getTaxReduction',
        'terms_of_delivery' => 'getTermsOfDelivery',
        'terms_of_payment' => 'getTermsOfPayment',
        'time_basis_reference' => 'getTimeBasisReference',
        'total' => 'getTotal',
        'total_to_pay' => 'getTotalToPay',
        'total_vat' => 'getTotalVat',
        'vat_included' => 'getVatIncluded',
        'voucher_number' => 'getVoucherNumber',
        'voucher_series' => 'getVoucherSeries',
        'voucher_year' => 'getVoucherYear',
        'way_of_delivery' => 'getWayOfDelivery',
        'your_order_number' => 'getYourOrderNumber',
        'your_reference' => 'getYourReference',
        'zip_code' => 'getZipCode',
        'accounting_method' => 'getAccountingMethod',
        'tax_reduction_type' => 'getTaxReductionType',
        'final_pay_date' => 'getFinalPayDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const INVOICE_TYPE_INVOICE = 'INVOICE';
    public const INVOICE_TYPE_AGREEMENTINVOICE = 'AGREEMENTINVOICE';
    public const INVOICE_TYPE_INTRESTINVOICE = 'INTRESTINVOICE';
    public const INVOICE_TYPE_SUMMARYINVOICE = 'SUMMARYINVOICE';
    public const INVOICE_TYPE_CASHINVOICE = 'CASHINVOICE';
    public const LANGUAGE_SV = 'SV';
    public const LANGUAGE_EN = 'EN';
    public const PAYMENT_WAY_CASH = 'CASH';
    public const PAYMENT_WAY_CARD = 'CARD';
    public const PAYMENT_WAY_AG = 'AG';
    public const ACCOUNTING_METHOD_ACCRUAL = 'ACCRUAL';
    public const ACCOUNTING_METHOD_CASH = 'CASH';
    public const TAX_REDUCTION_TYPE_NONE = 'none';
    public const TAX_REDUCTION_TYPE_ROT = 'rot';
    public const TAX_REDUCTION_TYPE_RUT = 'rut';
    public const TAX_REDUCTION_TYPE_GREEN = 'green';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoiceTypeAllowableValues()
    {
        return [
            self::INVOICE_TYPE_INVOICE,
            self::INVOICE_TYPE_AGREEMENTINVOICE,
            self::INVOICE_TYPE_INTRESTINVOICE,
            self::INVOICE_TYPE_SUMMARYINVOICE,
            self::INVOICE_TYPE_CASHINVOICE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLanguageAllowableValues()
    {
        return [
            self::LANGUAGE_SV,
            self::LANGUAGE_EN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentWayAllowableValues()
    {
        return [
            self::PAYMENT_WAY_CASH,
            self::PAYMENT_WAY_CARD,
            self::PAYMENT_WAY_AG,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountingMethodAllowableValues()
    {
        return [
            self::ACCOUNTING_METHOD_ACCRUAL,
            self::ACCOUNTING_METHOD_CASH,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxReductionTypeAllowableValues()
    {
        return [
            self::TAX_REDUCTION_TYPE_NONE,
            self::TAX_REDUCTION_TYPE_ROT,
            self::TAX_REDUCTION_TYPE_RUT,
            self::TAX_REDUCTION_TYPE_GREEN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('at_url', $data ?? [], null);
        $this->setIfExists('at_url_tax_reduction_list', $data ?? [], null);
        $this->setIfExists('administration_fee', $data ?? [], null);
        $this->setIfExists('administration_fee_vat', $data ?? [], null);
        $this->setIfExists('address1', $data ?? [], null);
        $this->setIfExists('address2', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('basis_tax_reduction', $data ?? [], null);
        $this->setIfExists('booked', $data ?? [], null);
        $this->setIfExists('cancelled', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('contract_reference', $data ?? [], null);
        $this->setIfExists('contribution_percent', $data ?? [], null);
        $this->setIfExists('contribution_value', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('cost_center', $data ?? [], null);
        $this->setIfExists('credit', $data ?? [], null);
        $this->setIfExists('credit_invoice_reference', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('currency_rate', $data ?? [], null);
        $this->setIfExists('currency_unit', $data ?? [], null);
        $this->setIfExists('customer_name', $data ?? [], null);
        $this->setIfExists('customer_number', $data ?? [], null);
        $this->setIfExists('delivery_address1', $data ?? [], null);
        $this->setIfExists('delivery_address2', $data ?? [], null);
        $this->setIfExists('delivery_city', $data ?? [], null);
        $this->setIfExists('delivery_country', $data ?? [], null);
        $this->setIfExists('delivery_date', $data ?? [], null);
        $this->setIfExists('delivery_name', $data ?? [], null);
        $this->setIfExists('delivery_zip_code', $data ?? [], null);
        $this->setIfExists('document_number', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('edi_information', $data ?? [], null);
        $this->setIfExists('email_information', $data ?? [], null);
        $this->setIfExists('eu_quarterly_report', $data ?? [], null);
        $this->setIfExists('external_invoice_reference1', $data ?? [], null);
        $this->setIfExists('external_invoice_reference2', $data ?? [], null);
        $this->setIfExists('freight', $data ?? [], null);
        $this->setIfExists('freight_vat', $data ?? [], null);
        $this->setIfExists('gross', $data ?? [], null);
        $this->setIfExists('house_work', $data ?? [], null);
        $this->setIfExists('invoice_date', $data ?? [], null);
        $this->setIfExists('invoice_period_start', $data ?? [], null);
        $this->setIfExists('invoice_period_end', $data ?? [], null);
        $this->setIfExists('invoice_period_reference', $data ?? [], null);
        $this->setIfExists('invoice_rows', $data ?? [], null);
        $this->setIfExists('invoice_type', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('last_remind_date', $data ?? [], null);
        $this->setIfExists('net', $data ?? [], null);
        $this->setIfExists('not_completed', $data ?? [], null);
        $this->setIfExists('nox_finans', $data ?? [], null);
        $this->setIfExists('ocr', $data ?? [], null);
        $this->setIfExists('offer_reference', $data ?? [], null);
        $this->setIfExists('order_reference', $data ?? [], null);
        $this->setIfExists('organisation_number', $data ?? [], null);
        $this->setIfExists('our_reference', $data ?? [], null);
        $this->setIfExists('payment_way', $data ?? [], null);
        $this->setIfExists('phone1', $data ?? [], null);
        $this->setIfExists('phone2', $data ?? [], null);
        $this->setIfExists('price_list', $data ?? [], null);
        $this->setIfExists('print_template', $data ?? [], null);
        $this->setIfExists('project', $data ?? [], null);
        $this->setIfExists('warehouse_ready', $data ?? [], null);
        $this->setIfExists('outbound_date', $data ?? [], null);
        $this->setIfExists('remarks', $data ?? [], null);
        $this->setIfExists('reminders', $data ?? [], null);
        $this->setIfExists('round_off', $data ?? [], null);
        $this->setIfExists('sent', $data ?? [], null);
        $this->setIfExists('tax_reduction', $data ?? [], null);
        $this->setIfExists('terms_of_delivery', $data ?? [], null);
        $this->setIfExists('terms_of_payment', $data ?? [], null);
        $this->setIfExists('time_basis_reference', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('total_to_pay', $data ?? [], null);
        $this->setIfExists('total_vat', $data ?? [], null);
        $this->setIfExists('vat_included', $data ?? [], null);
        $this->setIfExists('voucher_number', $data ?? [], null);
        $this->setIfExists('voucher_series', $data ?? [], null);
        $this->setIfExists('voucher_year', $data ?? [], null);
        $this->setIfExists('way_of_delivery', $data ?? [], null);
        $this->setIfExists('your_order_number', $data ?? [], null);
        $this->setIfExists('your_reference', $data ?? [], null);
        $this->setIfExists('zip_code', $data ?? [], null);
        $this->setIfExists('accounting_method', $data ?? [], null);
        $this->setIfExists('tax_reduction_type', $data ?? [], null);
        $this->setIfExists('final_pay_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 1024)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) < 0)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) > 1024)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) < 0)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['customer_number'] === null) {
            $invalidProperties[] = "'customer_number' can't be null";
        }
        if (!is_null($this->container['delivery_address1']) && (mb_strlen($this->container['delivery_address1']) > 1024)) {
            $invalidProperties[] = "invalid value for 'delivery_address1', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['delivery_address1']) && (mb_strlen($this->container['delivery_address1']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_address1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_address2']) && (mb_strlen($this->container['delivery_address2']) > 1024)) {
            $invalidProperties[] = "invalid value for 'delivery_address2', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['delivery_address2']) && (mb_strlen($this->container['delivery_address2']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_address2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_city']) && (mb_strlen($this->container['delivery_city']) > 1024)) {
            $invalidProperties[] = "invalid value for 'delivery_city', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['delivery_city']) && (mb_strlen($this->container['delivery_city']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_name']) && (mb_strlen($this->container['delivery_name']) > 1024)) {
            $invalidProperties[] = "invalid value for 'delivery_name', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['delivery_name']) && (mb_strlen($this->container['delivery_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_zip_code']) && (mb_strlen($this->container['delivery_zip_code']) > 1024)) {
            $invalidProperties[] = "invalid value for 'delivery_zip_code', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['delivery_zip_code']) && (mb_strlen($this->container['delivery_zip_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_zip_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['external_invoice_reference1']) && (mb_strlen($this->container['external_invoice_reference1']) > 80)) {
            $invalidProperties[] = "invalid value for 'external_invoice_reference1', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['external_invoice_reference1']) && (mb_strlen($this->container['external_invoice_reference1']) < 0)) {
            $invalidProperties[] = "invalid value for 'external_invoice_reference1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['external_invoice_reference2']) && (mb_strlen($this->container['external_invoice_reference2']) > 80)) {
            $invalidProperties[] = "invalid value for 'external_invoice_reference2', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['external_invoice_reference2']) && (mb_strlen($this->container['external_invoice_reference2']) < 0)) {
            $invalidProperties[] = "invalid value for 'external_invoice_reference2', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (!is_null($this->container['invoice_type']) && !in_array($this->container['invoice_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'invoice_type', must be one of '%s'",
                $this->container['invoice_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($this->container['language']) && !in_array($this->container['language'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'language', must be one of '%s'",
                $this->container['language'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['our_reference']) && (mb_strlen($this->container['our_reference']) > 50)) {
            $invalidProperties[] = "invalid value for 'our_reference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['our_reference']) && (mb_strlen($this->container['our_reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'our_reference', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getPaymentWayAllowableValues();
        if (!is_null($this->container['payment_way']) && !in_array($this->container['payment_way'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_way', must be one of '%s'",
                $this->container['payment_way'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['phone1']) && (mb_strlen($this->container['phone1']) > 1024)) {
            $invalidProperties[] = "invalid value for 'phone1', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['phone1']) && (mb_strlen($this->container['phone1']) < 0)) {
            $invalidProperties[] = "invalid value for 'phone1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['phone2']) && (mb_strlen($this->container['phone2']) > 1024)) {
            $invalidProperties[] = "invalid value for 'phone2', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['phone2']) && (mb_strlen($this->container['phone2']) < 0)) {
            $invalidProperties[] = "invalid value for 'phone2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['remarks']) && (mb_strlen($this->container['remarks']) > 1024)) {
            $invalidProperties[] = "invalid value for 'remarks', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['remarks']) && (mb_strlen($this->container['remarks']) < 0)) {
            $invalidProperties[] = "invalid value for 'remarks', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['your_order_number']) && (mb_strlen($this->container['your_order_number']) > 75)) {
            $invalidProperties[] = "invalid value for 'your_order_number', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['your_order_number']) && (mb_strlen($this->container['your_order_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'your_order_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['your_reference']) && (mb_strlen($this->container['your_reference']) > 50)) {
            $invalidProperties[] = "invalid value for 'your_reference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['your_reference']) && (mb_strlen($this->container['your_reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'your_reference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['zip_code']) && (mb_strlen($this->container['zip_code']) > 1024)) {
            $invalidProperties[] = "invalid value for 'zip_code', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['zip_code']) && (mb_strlen($this->container['zip_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'zip_code', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getAccountingMethodAllowableValues();
        if (!is_null($this->container['accounting_method']) && !in_array($this->container['accounting_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'accounting_method', must be one of '%s'",
                $this->container['accounting_method'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTaxReductionTypeAllowableValues();
        if (!is_null($this->container['tax_reduction_type']) && !in_array($this->container['tax_reduction_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tax_reduction_type', must be one of '%s'",
                $this->container['tax_reduction_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets at_url
     *
     * @return string|null
     */
    public function getAtUrl()
    {
        return $this->container['at_url'];
    }

    /**
     * Sets at_url
     *
     * @param string|null $at_url at_url
     *
     * @return self
     */
    public function setAtUrl($at_url)
    {
        if (is_null($at_url)) {
            throw new \InvalidArgumentException('non-nullable at_url cannot be null');
        }
        $this->container['at_url'] = $at_url;

        return $this;
    }

    /**
     * Gets at_url_tax_reduction_list
     *
     * @return string|null
     */
    public function getAtUrlTaxReductionList()
    {
        return $this->container['at_url_tax_reduction_list'];
    }

    /**
     * Sets at_url_tax_reduction_list
     *
     * @param string|null $at_url_tax_reduction_list at_url_tax_reduction_list
     *
     * @return self
     */
    public function setAtUrlTaxReductionList($at_url_tax_reduction_list)
    {
        if (is_null($at_url_tax_reduction_list)) {
            throw new \InvalidArgumentException('non-nullable at_url_tax_reduction_list cannot be null');
        }
        $this->container['at_url_tax_reduction_list'] = $at_url_tax_reduction_list;

        return $this;
    }

    /**
     * Gets administration_fee
     *
     * @return float|null
     */
    public function getAdministrationFee()
    {
        return $this->container['administration_fee'];
    }

    /**
     * Sets administration_fee
     *
     * @param float|null $administration_fee administration_fee
     *
     * @return self
     */
    public function setAdministrationFee($administration_fee)
    {
        if (is_null($administration_fee)) {
            throw new \InvalidArgumentException('non-nullable administration_fee cannot be null');
        }
        $this->container['administration_fee'] = $administration_fee;

        return $this;
    }

    /**
     * Gets administration_fee_vat
     *
     * @return float|null
     */
    public function getAdministrationFeeVat()
    {
        return $this->container['administration_fee_vat'];
    }

    /**
     * Sets administration_fee_vat
     *
     * @param float|null $administration_fee_vat administration_fee_vat
     *
     * @return self
     */
    public function setAdministrationFeeVat($administration_fee_vat)
    {
        if (is_null($administration_fee_vat)) {
            throw new \InvalidArgumentException('non-nullable administration_fee_vat cannot be null');
        }
        $this->container['administration_fee_vat'] = $administration_fee_vat;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string|null
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string|null $address1 address1
     *
     * @return self
     */
    public function setAddress1($address1)
    {
        if (is_null($address1)) {
            throw new \InvalidArgumentException('non-nullable address1 cannot be null');
        }
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 address2
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        if (is_null($address2)) {
            throw new \InvalidArgumentException('non-nullable address2 cannot be null');
        }
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets basis_tax_reduction
     *
     * @return float|null
     */
    public function getBasisTaxReduction()
    {
        return $this->container['basis_tax_reduction'];
    }

    /**
     * Sets basis_tax_reduction
     *
     * @param float|null $basis_tax_reduction basis_tax_reduction
     *
     * @return self
     */
    public function setBasisTaxReduction($basis_tax_reduction)
    {
        if (is_null($basis_tax_reduction)) {
            throw new \InvalidArgumentException('non-nullable basis_tax_reduction cannot be null');
        }
        $this->container['basis_tax_reduction'] = $basis_tax_reduction;

        return $this;
    }

    /**
     * Gets booked
     *
     * @return bool|null
     */
    public function getBooked()
    {
        return $this->container['booked'];
    }

    /**
     * Sets booked
     *
     * @param bool|null $booked booked
     *
     * @return self
     */
    public function setBooked($booked)
    {
        if (is_null($booked)) {
            throw new \InvalidArgumentException('non-nullable booked cannot be null');
        }
        $this->container['booked'] = $booked;

        return $this;
    }

    /**
     * Gets cancelled
     *
     * @return bool|null
     */
    public function getCancelled()
    {
        return $this->container['cancelled'];
    }

    /**
     * Sets cancelled
     *
     * @param bool|null $cancelled cancelled
     *
     * @return self
     */
    public function setCancelled($cancelled)
    {
        if (is_null($cancelled)) {
            throw new \InvalidArgumentException('non-nullable cancelled cannot be null');
        }
        $this->container['cancelled'] = $cancelled;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        if ((mb_strlen($city) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Invoice., must be smaller than or equal to 1024.');
        }
        if ((mb_strlen($city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        if ((mb_strlen($comments) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling Invoice., must be smaller than or equal to 1024.');
        }
        if ((mb_strlen($comments) < 0)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets contract_reference
     *
     * @return int|null
     */
    public function getContractReference()
    {
        return $this->container['contract_reference'];
    }

    /**
     * Sets contract_reference
     *
     * @param int|null $contract_reference contract_reference
     *
     * @return self
     */
    public function setContractReference($contract_reference)
    {
        if (is_null($contract_reference)) {
            throw new \InvalidArgumentException('non-nullable contract_reference cannot be null');
        }
        $this->container['contract_reference'] = $contract_reference;

        return $this;
    }

    /**
     * Gets contribution_percent
     *
     * @return float|null
     */
    public function getContributionPercent()
    {
        return $this->container['contribution_percent'];
    }

    /**
     * Sets contribution_percent
     *
     * @param float|null $contribution_percent contribution_percent
     *
     * @return self
     */
    public function setContributionPercent($contribution_percent)
    {
        if (is_null($contribution_percent)) {
            throw new \InvalidArgumentException('non-nullable contribution_percent cannot be null');
        }
        $this->container['contribution_percent'] = $contribution_percent;

        return $this;
    }

    /**
     * Gets contribution_value
     *
     * @return float|null
     */
    public function getContributionValue()
    {
        return $this->container['contribution_value'];
    }

    /**
     * Sets contribution_value
     *
     * @param float|null $contribution_value contribution_value
     *
     * @return self
     */
    public function setContributionValue($contribution_value)
    {
        if (is_null($contribution_value)) {
            throw new \InvalidArgumentException('non-nullable contribution_value cannot be null');
        }
        $this->container['contribution_value'] = $contribution_value;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets cost_center
     *
     * @return string|null
     */
    public function getCostCenter()
    {
        return $this->container['cost_center'];
    }

    /**
     * Sets cost_center
     *
     * @param string|null $cost_center cost_center
     *
     * @return self
     */
    public function setCostCenter($cost_center)
    {
        if (is_null($cost_center)) {
            throw new \InvalidArgumentException('non-nullable cost_center cannot be null');
        }
        $this->container['cost_center'] = $cost_center;

        return $this;
    }

    /**
     * Gets credit
     *
     * @return string|null
     */
    public function getCredit()
    {
        return $this->container['credit'];
    }

    /**
     * Sets credit
     *
     * @param string|null $credit credit
     *
     * @return self
     */
    public function setCredit($credit)
    {
        if (is_null($credit)) {
            throw new \InvalidArgumentException('non-nullable credit cannot be null');
        }
        $this->container['credit'] = $credit;

        return $this;
    }

    /**
     * Gets credit_invoice_reference
     *
     * @return string|null
     */
    public function getCreditInvoiceReference()
    {
        return $this->container['credit_invoice_reference'];
    }

    /**
     * Sets credit_invoice_reference
     *
     * @param string|null $credit_invoice_reference credit_invoice_reference
     *
     * @return self
     */
    public function setCreditInvoiceReference($credit_invoice_reference)
    {
        if (is_null($credit_invoice_reference)) {
            throw new \InvalidArgumentException('non-nullable credit_invoice_reference cannot be null');
        }
        $this->container['credit_invoice_reference'] = $credit_invoice_reference;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets currency_rate
     *
     * @return float|null
     */
    public function getCurrencyRate()
    {
        return $this->container['currency_rate'];
    }

    /**
     * Sets currency_rate
     *
     * @param float|null $currency_rate currency_rate
     *
     * @return self
     */
    public function setCurrencyRate($currency_rate)
    {
        if (is_null($currency_rate)) {
            throw new \InvalidArgumentException('non-nullable currency_rate cannot be null');
        }
        $this->container['currency_rate'] = $currency_rate;

        return $this;
    }

    /**
     * Gets currency_unit
     *
     * @return int|null
     */
    public function getCurrencyUnit()
    {
        return $this->container['currency_unit'];
    }

    /**
     * Sets currency_unit
     *
     * @param int|null $currency_unit currency_unit
     *
     * @return self
     */
    public function setCurrencyUnit($currency_unit)
    {
        if (is_null($currency_unit)) {
            throw new \InvalidArgumentException('non-nullable currency_unit cannot be null');
        }
        $this->container['currency_unit'] = $currency_unit;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string|null
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string|null $customer_name customer_name
     *
     * @return self
     */
    public function setCustomerName($customer_name)
    {
        if (is_null($customer_name)) {
            throw new \InvalidArgumentException('non-nullable customer_name cannot be null');
        }
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return string
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string $customer_number customer_number
     *
     * @return self
     */
    public function setCustomerNumber($customer_number)
    {
        if (is_null($customer_number)) {
            throw new \InvalidArgumentException('non-nullable customer_number cannot be null');
        }
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets delivery_address1
     *
     * @return string|null
     */
    public function getDeliveryAddress1()
    {
        return $this->container['delivery_address1'];
    }

    /**
     * Sets delivery_address1
     *
     * @param string|null $delivery_address1 delivery_address1
     *
     * @return self
     */
    public function setDeliveryAddress1($delivery_address1)
    {
        if (is_null($delivery_address1)) {
            throw new \InvalidArgumentException('non-nullable delivery_address1 cannot be null');
        }
        if ((mb_strlen($delivery_address1) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address1 when calling Invoice., must be smaller than or equal to 1024.');
        }
        if ((mb_strlen($delivery_address1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address1 when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['delivery_address1'] = $delivery_address1;

        return $this;
    }

    /**
     * Gets delivery_address2
     *
     * @return string|null
     */
    public function getDeliveryAddress2()
    {
        return $this->container['delivery_address2'];
    }

    /**
     * Sets delivery_address2
     *
     * @param string|null $delivery_address2 delivery_address2
     *
     * @return self
     */
    public function setDeliveryAddress2($delivery_address2)
    {
        if (is_null($delivery_address2)) {
            throw new \InvalidArgumentException('non-nullable delivery_address2 cannot be null');
        }
        if ((mb_strlen($delivery_address2) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address2 when calling Invoice., must be smaller than or equal to 1024.');
        }
        if ((mb_strlen($delivery_address2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address2 when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['delivery_address2'] = $delivery_address2;

        return $this;
    }

    /**
     * Gets delivery_city
     *
     * @return string|null
     */
    public function getDeliveryCity()
    {
        return $this->container['delivery_city'];
    }

    /**
     * Sets delivery_city
     *
     * @param string|null $delivery_city delivery_city
     *
     * @return self
     */
    public function setDeliveryCity($delivery_city)
    {
        if (is_null($delivery_city)) {
            throw new \InvalidArgumentException('non-nullable delivery_city cannot be null');
        }
        if ((mb_strlen($delivery_city) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $delivery_city when calling Invoice., must be smaller than or equal to 1024.');
        }
        if ((mb_strlen($delivery_city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_city when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['delivery_city'] = $delivery_city;

        return $this;
    }

    /**
     * Gets delivery_country
     *
     * @return string|null
     */
    public function getDeliveryCountry()
    {
        return $this->container['delivery_country'];
    }

    /**
     * Sets delivery_country
     *
     * @param string|null $delivery_country delivery_country
     *
     * @return self
     */
    public function setDeliveryCountry($delivery_country)
    {
        if (is_null($delivery_country)) {
            throw new \InvalidArgumentException('non-nullable delivery_country cannot be null');
        }
        $this->container['delivery_country'] = $delivery_country;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return \DateTime|null
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param \DateTime|null $delivery_date delivery_date
     *
     * @return self
     */
    public function setDeliveryDate($delivery_date)
    {
        if (is_null($delivery_date)) {
            throw new \InvalidArgumentException('non-nullable delivery_date cannot be null');
        }
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets delivery_name
     *
     * @return string|null
     */
    public function getDeliveryName()
    {
        return $this->container['delivery_name'];
    }

    /**
     * Sets delivery_name
     *
     * @param string|null $delivery_name delivery_name
     *
     * @return self
     */
    public function setDeliveryName($delivery_name)
    {
        if (is_null($delivery_name)) {
            throw new \InvalidArgumentException('non-nullable delivery_name cannot be null');
        }
        if ((mb_strlen($delivery_name) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $delivery_name when calling Invoice., must be smaller than or equal to 1024.');
        }
        if ((mb_strlen($delivery_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_name when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['delivery_name'] = $delivery_name;

        return $this;
    }

    /**
     * Gets delivery_zip_code
     *
     * @return string|null
     */
    public function getDeliveryZipCode()
    {
        return $this->container['delivery_zip_code'];
    }

    /**
     * Sets delivery_zip_code
     *
     * @param string|null $delivery_zip_code delivery_zip_code
     *
     * @return self
     */
    public function setDeliveryZipCode($delivery_zip_code)
    {
        if (is_null($delivery_zip_code)) {
            throw new \InvalidArgumentException('non-nullable delivery_zip_code cannot be null');
        }
        if ((mb_strlen($delivery_zip_code) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $delivery_zip_code when calling Invoice., must be smaller than or equal to 1024.');
        }
        if ((mb_strlen($delivery_zip_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_zip_code when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['delivery_zip_code'] = $delivery_zip_code;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string|null
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string|null $document_number document_number
     *
     * @return self
     */
    public function setDocumentNumber($document_number)
    {
        if (is_null($document_number)) {
            throw new \InvalidArgumentException('non-nullable document_number cannot be null');
        }
        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date due_date
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets edi_information
     *
     * @return \OpenAPI\Client\Model\InvoiceEDIInformation|null
     */
    public function getEdiInformation()
    {
        return $this->container['edi_information'];
    }

    /**
     * Sets edi_information
     *
     * @param \OpenAPI\Client\Model\InvoiceEDIInformation|null $edi_information edi_information
     *
     * @return self
     */
    public function setEdiInformation($edi_information)
    {
        if (is_null($edi_information)) {
            throw new \InvalidArgumentException('non-nullable edi_information cannot be null');
        }
        $this->container['edi_information'] = $edi_information;

        return $this;
    }

    /**
     * Gets email_information
     *
     * @return \OpenAPI\Client\Model\InvoiceEmailInformation|null
     */
    public function getEmailInformation()
    {
        return $this->container['email_information'];
    }

    /**
     * Sets email_information
     *
     * @param \OpenAPI\Client\Model\InvoiceEmailInformation|null $email_information email_information
     *
     * @return self
     */
    public function setEmailInformation($email_information)
    {
        if (is_null($email_information)) {
            throw new \InvalidArgumentException('non-nullable email_information cannot be null');
        }
        $this->container['email_information'] = $email_information;

        return $this;
    }

    /**
     * Gets eu_quarterly_report
     *
     * @return bool|null
     */
    public function getEuQuarterlyReport()
    {
        return $this->container['eu_quarterly_report'];
    }

    /**
     * Sets eu_quarterly_report
     *
     * @param bool|null $eu_quarterly_report eu_quarterly_report
     *
     * @return self
     */
    public function setEuQuarterlyReport($eu_quarterly_report)
    {
        if (is_null($eu_quarterly_report)) {
            throw new \InvalidArgumentException('non-nullable eu_quarterly_report cannot be null');
        }
        $this->container['eu_quarterly_report'] = $eu_quarterly_report;

        return $this;
    }

    /**
     * Gets external_invoice_reference1
     *
     * @return string|null
     */
    public function getExternalInvoiceReference1()
    {
        return $this->container['external_invoice_reference1'];
    }

    /**
     * Sets external_invoice_reference1
     *
     * @param string|null $external_invoice_reference1 external_invoice_reference1
     *
     * @return self
     */
    public function setExternalInvoiceReference1($external_invoice_reference1)
    {
        if (is_null($external_invoice_reference1)) {
            throw new \InvalidArgumentException('non-nullable external_invoice_reference1 cannot be null');
        }
        if ((mb_strlen($external_invoice_reference1) > 80)) {
            throw new \InvalidArgumentException('invalid length for $external_invoice_reference1 when calling Invoice., must be smaller than or equal to 80.');
        }
        if ((mb_strlen($external_invoice_reference1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $external_invoice_reference1 when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['external_invoice_reference1'] = $external_invoice_reference1;

        return $this;
    }

    /**
     * Gets external_invoice_reference2
     *
     * @return string|null
     */
    public function getExternalInvoiceReference2()
    {
        return $this->container['external_invoice_reference2'];
    }

    /**
     * Sets external_invoice_reference2
     *
     * @param string|null $external_invoice_reference2 external_invoice_reference2
     *
     * @return self
     */
    public function setExternalInvoiceReference2($external_invoice_reference2)
    {
        if (is_null($external_invoice_reference2)) {
            throw new \InvalidArgumentException('non-nullable external_invoice_reference2 cannot be null');
        }
        if ((mb_strlen($external_invoice_reference2) > 80)) {
            throw new \InvalidArgumentException('invalid length for $external_invoice_reference2 when calling Invoice., must be smaller than or equal to 80.');
        }
        if ((mb_strlen($external_invoice_reference2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $external_invoice_reference2 when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['external_invoice_reference2'] = $external_invoice_reference2;

        return $this;
    }

    /**
     * Gets freight
     *
     * @return float|null
     */
    public function getFreight()
    {
        return $this->container['freight'];
    }

    /**
     * Sets freight
     *
     * @param float|null $freight freight
     *
     * @return self
     */
    public function setFreight($freight)
    {
        if (is_null($freight)) {
            throw new \InvalidArgumentException('non-nullable freight cannot be null');
        }
        $this->container['freight'] = $freight;

        return $this;
    }

    /**
     * Gets freight_vat
     *
     * @return float|null
     */
    public function getFreightVat()
    {
        return $this->container['freight_vat'];
    }

    /**
     * Sets freight_vat
     *
     * @param float|null $freight_vat freight_vat
     *
     * @return self
     */
    public function setFreightVat($freight_vat)
    {
        if (is_null($freight_vat)) {
            throw new \InvalidArgumentException('non-nullable freight_vat cannot be null');
        }
        $this->container['freight_vat'] = $freight_vat;

        return $this;
    }

    /**
     * Gets gross
     *
     * @return float|null
     */
    public function getGross()
    {
        return $this->container['gross'];
    }

    /**
     * Sets gross
     *
     * @param float|null $gross gross
     *
     * @return self
     */
    public function setGross($gross)
    {
        if (is_null($gross)) {
            throw new \InvalidArgumentException('non-nullable gross cannot be null');
        }
        $this->container['gross'] = $gross;

        return $this;
    }

    /**
     * Gets house_work
     *
     * @return bool|null
     */
    public function getHouseWork()
    {
        return $this->container['house_work'];
    }

    /**
     * Sets house_work
     *
     * @param bool|null $house_work house_work
     *
     * @return self
     */
    public function setHouseWork($house_work)
    {
        if (is_null($house_work)) {
            throw new \InvalidArgumentException('non-nullable house_work cannot be null');
        }
        $this->container['house_work'] = $house_work;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime|null
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime|null $invoice_date invoice_date
     *
     * @return self
     */
    public function setInvoiceDate($invoice_date)
    {
        if (is_null($invoice_date)) {
            throw new \InvalidArgumentException('non-nullable invoice_date cannot be null');
        }
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets invoice_period_start
     *
     * @return \DateTime|null
     */
    public function getInvoicePeriodStart()
    {
        return $this->container['invoice_period_start'];
    }

    /**
     * Sets invoice_period_start
     *
     * @param \DateTime|null $invoice_period_start invoice_period_start
     *
     * @return self
     */
    public function setInvoicePeriodStart($invoice_period_start)
    {
        if (is_null($invoice_period_start)) {
            throw new \InvalidArgumentException('non-nullable invoice_period_start cannot be null');
        }
        $this->container['invoice_period_start'] = $invoice_period_start;

        return $this;
    }

    /**
     * Gets invoice_period_end
     *
     * @return \DateTime|null
     */
    public function getInvoicePeriodEnd()
    {
        return $this->container['invoice_period_end'];
    }

    /**
     * Sets invoice_period_end
     *
     * @param \DateTime|null $invoice_period_end invoice_period_end
     *
     * @return self
     */
    public function setInvoicePeriodEnd($invoice_period_end)
    {
        if (is_null($invoice_period_end)) {
            throw new \InvalidArgumentException('non-nullable invoice_period_end cannot be null');
        }
        $this->container['invoice_period_end'] = $invoice_period_end;

        return $this;
    }

    /**
     * Gets invoice_period_reference
     *
     * @return string|null
     */
    public function getInvoicePeriodReference()
    {
        return $this->container['invoice_period_reference'];
    }

    /**
     * Sets invoice_period_reference
     *
     * @param string|null $invoice_period_reference invoice_period_reference
     *
     * @return self
     */
    public function setInvoicePeriodReference($invoice_period_reference)
    {
        if (is_null($invoice_period_reference)) {
            throw new \InvalidArgumentException('non-nullable invoice_period_reference cannot be null');
        }
        $this->container['invoice_period_reference'] = $invoice_period_reference;

        return $this;
    }

    /**
     * Gets invoice_rows
     *
     * @return \OpenAPI\Client\Model\InvoiceInvoiceRow[]|null
     */
    public function getInvoiceRows()
    {
        return $this->container['invoice_rows'];
    }

    /**
     * Sets invoice_rows
     *
     * @param \OpenAPI\Client\Model\InvoiceInvoiceRow[]|null $invoice_rows invoice_rows
     *
     * @return self
     */
    public function setInvoiceRows($invoice_rows)
    {
        if (is_null($invoice_rows)) {
            throw new \InvalidArgumentException('non-nullable invoice_rows cannot be null');
        }
        $this->container['invoice_rows'] = $invoice_rows;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return string|null
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param string|null $invoice_type invoice_type
     *
     * @return self
     */
    public function setInvoiceType($invoice_type)
    {
        if (is_null($invoice_type)) {
            throw new \InvalidArgumentException('non-nullable invoice_type cannot be null');
        }
        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (!in_array($invoice_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'invoice_type', must be one of '%s'",
                    $invoice_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \OpenAPI\Client\Model\InvoiceLabel[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \OpenAPI\Client\Model\InvoiceLabel[]|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $allowedValues = $this->getLanguageAllowableValues();
        if (!in_array($language, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'language', must be one of '%s'",
                    $language,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets last_remind_date
     *
     * @return \DateTime|null
     */
    public function getLastRemindDate()
    {
        return $this->container['last_remind_date'];
    }

    /**
     * Sets last_remind_date
     *
     * @param \DateTime|null $last_remind_date last_remind_date
     *
     * @return self
     */
    public function setLastRemindDate($last_remind_date)
    {
        if (is_null($last_remind_date)) {
            throw new \InvalidArgumentException('non-nullable last_remind_date cannot be null');
        }
        $this->container['last_remind_date'] = $last_remind_date;

        return $this;
    }

    /**
     * Gets net
     *
     * @return float|null
     */
    public function getNet()
    {
        return $this->container['net'];
    }

    /**
     * Sets net
     *
     * @param float|null $net net
     *
     * @return self
     */
    public function setNet($net)
    {
        if (is_null($net)) {
            throw new \InvalidArgumentException('non-nullable net cannot be null');
        }
        $this->container['net'] = $net;

        return $this;
    }

    /**
     * Gets not_completed
     *
     * @return bool|null
     */
    public function getNotCompleted()
    {
        return $this->container['not_completed'];
    }

    /**
     * Sets not_completed
     *
     * @param bool|null $not_completed not_completed
     *
     * @return self
     */
    public function setNotCompleted($not_completed)
    {
        if (is_null($not_completed)) {
            throw new \InvalidArgumentException('non-nullable not_completed cannot be null');
        }
        $this->container['not_completed'] = $not_completed;

        return $this;
    }

    /**
     * Gets nox_finans
     *
     * @return bool|null
     */
    public function getNoxFinans()
    {
        return $this->container['nox_finans'];
    }

    /**
     * Sets nox_finans
     *
     * @param bool|null $nox_finans nox_finans
     *
     * @return self
     */
    public function setNoxFinans($nox_finans)
    {
        if (is_null($nox_finans)) {
            throw new \InvalidArgumentException('non-nullable nox_finans cannot be null');
        }
        $this->container['nox_finans'] = $nox_finans;

        return $this;
    }

    /**
     * Gets ocr
     *
     * @return string|null
     */
    public function getOcr()
    {
        return $this->container['ocr'];
    }

    /**
     * Sets ocr
     *
     * @param string|null $ocr ocr
     *
     * @return self
     */
    public function setOcr($ocr)
    {
        if (is_null($ocr)) {
            throw new \InvalidArgumentException('non-nullable ocr cannot be null');
        }
        $this->container['ocr'] = $ocr;

        return $this;
    }

    /**
     * Gets offer_reference
     *
     * @return string|null
     */
    public function getOfferReference()
    {
        return $this->container['offer_reference'];
    }

    /**
     * Sets offer_reference
     *
     * @param string|null $offer_reference offer_reference
     *
     * @return self
     */
    public function setOfferReference($offer_reference)
    {
        if (is_null($offer_reference)) {
            throw new \InvalidArgumentException('non-nullable offer_reference cannot be null');
        }
        $this->container['offer_reference'] = $offer_reference;

        return $this;
    }

    /**
     * Gets order_reference
     *
     * @return string|null
     */
    public function getOrderReference()
    {
        return $this->container['order_reference'];
    }

    /**
     * Sets order_reference
     *
     * @param string|null $order_reference order_reference
     *
     * @return self
     */
    public function setOrderReference($order_reference)
    {
        if (is_null($order_reference)) {
            throw new \InvalidArgumentException('non-nullable order_reference cannot be null');
        }
        $this->container['order_reference'] = $order_reference;

        return $this;
    }

    /**
     * Gets organisation_number
     *
     * @return string|null
     */
    public function getOrganisationNumber()
    {
        return $this->container['organisation_number'];
    }

    /**
     * Sets organisation_number
     *
     * @param string|null $organisation_number organisation_number
     *
     * @return self
     */
    public function setOrganisationNumber($organisation_number)
    {
        if (is_null($organisation_number)) {
            throw new \InvalidArgumentException('non-nullable organisation_number cannot be null');
        }
        $this->container['organisation_number'] = $organisation_number;

        return $this;
    }

    /**
     * Gets our_reference
     *
     * @return string|null
     */
    public function getOurReference()
    {
        return $this->container['our_reference'];
    }

    /**
     * Sets our_reference
     *
     * @param string|null $our_reference our_reference
     *
     * @return self
     */
    public function setOurReference($our_reference)
    {
        if (is_null($our_reference)) {
            throw new \InvalidArgumentException('non-nullable our_reference cannot be null');
        }
        if ((mb_strlen($our_reference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $our_reference when calling Invoice., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($our_reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $our_reference when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['our_reference'] = $our_reference;

        return $this;
    }

    /**
     * Gets payment_way
     *
     * @return string|null
     */
    public function getPaymentWay()
    {
        return $this->container['payment_way'];
    }

    /**
     * Sets payment_way
     *
     * @param string|null $payment_way payment_way
     *
     * @return self
     */
    public function setPaymentWay($payment_way)
    {
        if (is_null($payment_way)) {
            throw new \InvalidArgumentException('non-nullable payment_way cannot be null');
        }
        $allowedValues = $this->getPaymentWayAllowableValues();
        if (!in_array($payment_way, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_way', must be one of '%s'",
                    $payment_way,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_way'] = $payment_way;

        return $this;
    }

    /**
     * Gets phone1
     *
     * @return string|null
     */
    public function getPhone1()
    {
        return $this->container['phone1'];
    }

    /**
     * Sets phone1
     *
     * @param string|null $phone1 phone1
     *
     * @return self
     */
    public function setPhone1($phone1)
    {
        if (is_null($phone1)) {
            throw new \InvalidArgumentException('non-nullable phone1 cannot be null');
        }
        if ((mb_strlen($phone1) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $phone1 when calling Invoice., must be smaller than or equal to 1024.');
        }
        if ((mb_strlen($phone1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone1 when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['phone1'] = $phone1;

        return $this;
    }

    /**
     * Gets phone2
     *
     * @return string|null
     */
    public function getPhone2()
    {
        return $this->container['phone2'];
    }

    /**
     * Sets phone2
     *
     * @param string|null $phone2 phone2
     *
     * @return self
     */
    public function setPhone2($phone2)
    {
        if (is_null($phone2)) {
            throw new \InvalidArgumentException('non-nullable phone2 cannot be null');
        }
        if ((mb_strlen($phone2) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $phone2 when calling Invoice., must be smaller than or equal to 1024.');
        }
        if ((mb_strlen($phone2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone2 when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['phone2'] = $phone2;

        return $this;
    }

    /**
     * Gets price_list
     *
     * @return string|null
     */
    public function getPriceList()
    {
        return $this->container['price_list'];
    }

    /**
     * Sets price_list
     *
     * @param string|null $price_list price_list
     *
     * @return self
     */
    public function setPriceList($price_list)
    {
        if (is_null($price_list)) {
            throw new \InvalidArgumentException('non-nullable price_list cannot be null');
        }
        $this->container['price_list'] = $price_list;

        return $this;
    }

    /**
     * Gets print_template
     *
     * @return string|null
     */
    public function getPrintTemplate()
    {
        return $this->container['print_template'];
    }

    /**
     * Sets print_template
     *
     * @param string|null $print_template print_template
     *
     * @return self
     */
    public function setPrintTemplate($print_template)
    {
        if (is_null($print_template)) {
            throw new \InvalidArgumentException('non-nullable print_template cannot be null');
        }
        $this->container['print_template'] = $print_template;

        return $this;
    }

    /**
     * Gets project
     *
     * @return string|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param string|null $project project
     *
     * @return self
     */
    public function setProject($project)
    {
        if (is_null($project)) {
            throw new \InvalidArgumentException('non-nullable project cannot be null');
        }
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets warehouse_ready
     *
     * @return bool|null
     */
    public function getWarehouseReady()
    {
        return $this->container['warehouse_ready'];
    }

    /**
     * Sets warehouse_ready
     *
     * @param bool|null $warehouse_ready warehouse_ready
     *
     * @return self
     */
    public function setWarehouseReady($warehouse_ready)
    {
        if (is_null($warehouse_ready)) {
            throw new \InvalidArgumentException('non-nullable warehouse_ready cannot be null');
        }
        $this->container['warehouse_ready'] = $warehouse_ready;

        return $this;
    }

    /**
     * Gets outbound_date
     *
     * @return \DateTime|null
     */
    public function getOutboundDate()
    {
        return $this->container['outbound_date'];
    }

    /**
     * Sets outbound_date
     *
     * @param \DateTime|null $outbound_date outbound_date
     *
     * @return self
     */
    public function setOutboundDate($outbound_date)
    {
        if (is_null($outbound_date)) {
            throw new \InvalidArgumentException('non-nullable outbound_date cannot be null');
        }
        $this->container['outbound_date'] = $outbound_date;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string|null
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string|null $remarks remarks
     *
     * @return self
     */
    public function setRemarks($remarks)
    {
        if (is_null($remarks)) {
            throw new \InvalidArgumentException('non-nullable remarks cannot be null');
        }
        if ((mb_strlen($remarks) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $remarks when calling Invoice., must be smaller than or equal to 1024.');
        }
        if ((mb_strlen($remarks) < 0)) {
            throw new \InvalidArgumentException('invalid length for $remarks when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets reminders
     *
     * @return int|null
     */
    public function getReminders()
    {
        return $this->container['reminders'];
    }

    /**
     * Sets reminders
     *
     * @param int|null $reminders reminders
     *
     * @return self
     */
    public function setReminders($reminders)
    {
        if (is_null($reminders)) {
            throw new \InvalidArgumentException('non-nullable reminders cannot be null');
        }
        $this->container['reminders'] = $reminders;

        return $this;
    }

    /**
     * Gets round_off
     *
     * @return float|null
     */
    public function getRoundOff()
    {
        return $this->container['round_off'];
    }

    /**
     * Sets round_off
     *
     * @param float|null $round_off round_off
     *
     * @return self
     */
    public function setRoundOff($round_off)
    {
        if (is_null($round_off)) {
            throw new \InvalidArgumentException('non-nullable round_off cannot be null');
        }
        $this->container['round_off'] = $round_off;

        return $this;
    }

    /**
     * Gets sent
     *
     * @return bool|null
     */
    public function getSent()
    {
        return $this->container['sent'];
    }

    /**
     * Sets sent
     *
     * @param bool|null $sent sent
     *
     * @return self
     */
    public function setSent($sent)
    {
        if (is_null($sent)) {
            throw new \InvalidArgumentException('non-nullable sent cannot be null');
        }
        $this->container['sent'] = $sent;

        return $this;
    }

    /**
     * Gets tax_reduction
     *
     * @return int|null
     */
    public function getTaxReduction()
    {
        return $this->container['tax_reduction'];
    }

    /**
     * Sets tax_reduction
     *
     * @param int|null $tax_reduction tax_reduction
     *
     * @return self
     */
    public function setTaxReduction($tax_reduction)
    {
        if (is_null($tax_reduction)) {
            throw new \InvalidArgumentException('non-nullable tax_reduction cannot be null');
        }
        $this->container['tax_reduction'] = $tax_reduction;

        return $this;
    }

    /**
     * Gets terms_of_delivery
     *
     * @return string|null
     */
    public function getTermsOfDelivery()
    {
        return $this->container['terms_of_delivery'];
    }

    /**
     * Sets terms_of_delivery
     *
     * @param string|null $terms_of_delivery terms_of_delivery
     *
     * @return self
     */
    public function setTermsOfDelivery($terms_of_delivery)
    {
        if (is_null($terms_of_delivery)) {
            throw new \InvalidArgumentException('non-nullable terms_of_delivery cannot be null');
        }
        $this->container['terms_of_delivery'] = $terms_of_delivery;

        return $this;
    }

    /**
     * Gets terms_of_payment
     *
     * @return string|null
     */
    public function getTermsOfPayment()
    {
        return $this->container['terms_of_payment'];
    }

    /**
     * Sets terms_of_payment
     *
     * @param string|null $terms_of_payment terms_of_payment
     *
     * @return self
     */
    public function setTermsOfPayment($terms_of_payment)
    {
        if (is_null($terms_of_payment)) {
            throw new \InvalidArgumentException('non-nullable terms_of_payment cannot be null');
        }
        $this->container['terms_of_payment'] = $terms_of_payment;

        return $this;
    }

    /**
     * Gets time_basis_reference
     *
     * @return int|null
     */
    public function getTimeBasisReference()
    {
        return $this->container['time_basis_reference'];
    }

    /**
     * Sets time_basis_reference
     *
     * @param int|null $time_basis_reference time_basis_reference
     *
     * @return self
     */
    public function setTimeBasisReference($time_basis_reference)
    {
        if (is_null($time_basis_reference)) {
            throw new \InvalidArgumentException('non-nullable time_basis_reference cannot be null');
        }
        $this->container['time_basis_reference'] = $time_basis_reference;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float|null $total total
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets total_to_pay
     *
     * @return float|null
     */
    public function getTotalToPay()
    {
        return $this->container['total_to_pay'];
    }

    /**
     * Sets total_to_pay
     *
     * @param float|null $total_to_pay total_to_pay
     *
     * @return self
     */
    public function setTotalToPay($total_to_pay)
    {
        if (is_null($total_to_pay)) {
            throw new \InvalidArgumentException('non-nullable total_to_pay cannot be null');
        }
        $this->container['total_to_pay'] = $total_to_pay;

        return $this;
    }

    /**
     * Gets total_vat
     *
     * @return float|null
     */
    public function getTotalVat()
    {
        return $this->container['total_vat'];
    }

    /**
     * Sets total_vat
     *
     * @param float|null $total_vat total_vat
     *
     * @return self
     */
    public function setTotalVat($total_vat)
    {
        if (is_null($total_vat)) {
            throw new \InvalidArgumentException('non-nullable total_vat cannot be null');
        }
        $this->container['total_vat'] = $total_vat;

        return $this;
    }

    /**
     * Gets vat_included
     *
     * @return bool|null
     */
    public function getVatIncluded()
    {
        return $this->container['vat_included'];
    }

    /**
     * Sets vat_included
     *
     * @param bool|null $vat_included vat_included
     *
     * @return self
     */
    public function setVatIncluded($vat_included)
    {
        if (is_null($vat_included)) {
            throw new \InvalidArgumentException('non-nullable vat_included cannot be null');
        }
        $this->container['vat_included'] = $vat_included;

        return $this;
    }

    /**
     * Gets voucher_number
     *
     * @return int|null
     */
    public function getVoucherNumber()
    {
        return $this->container['voucher_number'];
    }

    /**
     * Sets voucher_number
     *
     * @param int|null $voucher_number voucher_number
     *
     * @return self
     */
    public function setVoucherNumber($voucher_number)
    {
        if (is_null($voucher_number)) {
            throw new \InvalidArgumentException('non-nullable voucher_number cannot be null');
        }
        $this->container['voucher_number'] = $voucher_number;

        return $this;
    }

    /**
     * Gets voucher_series
     *
     * @return string|null
     */
    public function getVoucherSeries()
    {
        return $this->container['voucher_series'];
    }

    /**
     * Sets voucher_series
     *
     * @param string|null $voucher_series voucher_series
     *
     * @return self
     */
    public function setVoucherSeries($voucher_series)
    {
        if (is_null($voucher_series)) {
            throw new \InvalidArgumentException('non-nullable voucher_series cannot be null');
        }
        $this->container['voucher_series'] = $voucher_series;

        return $this;
    }

    /**
     * Gets voucher_year
     *
     * @return int|null
     */
    public function getVoucherYear()
    {
        return $this->container['voucher_year'];
    }

    /**
     * Sets voucher_year
     *
     * @param int|null $voucher_year voucher_year
     *
     * @return self
     */
    public function setVoucherYear($voucher_year)
    {
        if (is_null($voucher_year)) {
            throw new \InvalidArgumentException('non-nullable voucher_year cannot be null');
        }
        $this->container['voucher_year'] = $voucher_year;

        return $this;
    }

    /**
     * Gets way_of_delivery
     *
     * @return string|null
     */
    public function getWayOfDelivery()
    {
        return $this->container['way_of_delivery'];
    }

    /**
     * Sets way_of_delivery
     *
     * @param string|null $way_of_delivery way_of_delivery
     *
     * @return self
     */
    public function setWayOfDelivery($way_of_delivery)
    {
        if (is_null($way_of_delivery)) {
            throw new \InvalidArgumentException('non-nullable way_of_delivery cannot be null');
        }
        $this->container['way_of_delivery'] = $way_of_delivery;

        return $this;
    }

    /**
     * Gets your_order_number
     *
     * @return string|null
     */
    public function getYourOrderNumber()
    {
        return $this->container['your_order_number'];
    }

    /**
     * Sets your_order_number
     *
     * @param string|null $your_order_number your_order_number
     *
     * @return self
     */
    public function setYourOrderNumber($your_order_number)
    {
        if (is_null($your_order_number)) {
            throw new \InvalidArgumentException('non-nullable your_order_number cannot be null');
        }
        if ((mb_strlen($your_order_number) > 75)) {
            throw new \InvalidArgumentException('invalid length for $your_order_number when calling Invoice., must be smaller than or equal to 75.');
        }
        if ((mb_strlen($your_order_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $your_order_number when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['your_order_number'] = $your_order_number;

        return $this;
    }

    /**
     * Gets your_reference
     *
     * @return string|null
     */
    public function getYourReference()
    {
        return $this->container['your_reference'];
    }

    /**
     * Sets your_reference
     *
     * @param string|null $your_reference your_reference
     *
     * @return self
     */
    public function setYourReference($your_reference)
    {
        if (is_null($your_reference)) {
            throw new \InvalidArgumentException('non-nullable your_reference cannot be null');
        }
        if ((mb_strlen($your_reference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $your_reference when calling Invoice., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($your_reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $your_reference when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['your_reference'] = $your_reference;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string|null $zip_code zip_code
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        if (is_null($zip_code)) {
            throw new \InvalidArgumentException('non-nullable zip_code cannot be null');
        }
        if ((mb_strlen($zip_code) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $zip_code when calling Invoice., must be smaller than or equal to 1024.');
        }
        if ((mb_strlen($zip_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $zip_code when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets accounting_method
     *
     * @return string|null
     */
    public function getAccountingMethod()
    {
        return $this->container['accounting_method'];
    }

    /**
     * Sets accounting_method
     *
     * @param string|null $accounting_method accounting_method
     *
     * @return self
     */
    public function setAccountingMethod($accounting_method)
    {
        if (is_null($accounting_method)) {
            throw new \InvalidArgumentException('non-nullable accounting_method cannot be null');
        }
        $allowedValues = $this->getAccountingMethodAllowableValues();
        if (!in_array($accounting_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'accounting_method', must be one of '%s'",
                    $accounting_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accounting_method'] = $accounting_method;

        return $this;
    }

    /**
     * Gets tax_reduction_type
     *
     * @return string|null
     */
    public function getTaxReductionType()
    {
        return $this->container['tax_reduction_type'];
    }

    /**
     * Sets tax_reduction_type
     *
     * @param string|null $tax_reduction_type tax_reduction_type
     *
     * @return self
     */
    public function setTaxReductionType($tax_reduction_type)
    {
        if (is_null($tax_reduction_type)) {
            throw new \InvalidArgumentException('non-nullable tax_reduction_type cannot be null');
        }
        $allowedValues = $this->getTaxReductionTypeAllowableValues();
        if (!in_array($tax_reduction_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tax_reduction_type', must be one of '%s'",
                    $tax_reduction_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_reduction_type'] = $tax_reduction_type;

        return $this;
    }

    /**
     * Gets final_pay_date
     *
     * @return \DateTime|null
     */
    public function getFinalPayDate()
    {
        return $this->container['final_pay_date'];
    }

    /**
     * Sets final_pay_date
     *
     * @param \DateTime|null $final_pay_date final_pay_date
     *
     * @return self
     */
    public function setFinalPayDate($final_pay_date)
    {
        if (is_null($final_pay_date)) {
            throw new \InvalidArgumentException('non-nullable final_pay_date cannot be null');
        }
        $this->container['final_pay_date'] = $final_pay_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


