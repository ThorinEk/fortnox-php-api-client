<?php
/**
 * PurchaseOrderResourceApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  FortnoxApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [Guides & Good to Know section](https://www.fortnox.se/developer/guides-and-good-to-know/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit per access-token is 25 requests per 5 seconds. This equals to 300 requests per minute.  [Read more about this here.](https://www.fortnox.se/developer/guides-and-good-to-know/rate-limits-for-fortnox-api/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://www.fortnox.se/developer/guides-and-good-to-know/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace FortnoxApi\Test\Api;

use \FortnoxApi\Configuration;
use \FortnoxApi\ApiException;
use \FortnoxApi\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * PurchaseOrderResourceApiTest Class Doc Comment
 *
 * @category Class
 * @package  FortnoxApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PurchaseOrderResourceApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for batchUpdateResponseState
     *
     * Update response states.
     *
     */
    public function testBatchUpdateResponseState()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createPurchaseOrderResource
     *
     * Create Purchase Order.
     *
     */
    public function testCreatePurchaseOrderResource()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllPurchaseOrderResource
     *
     * List Purchase Orders.
     *
     */
    public function testGetAllPurchaseOrderResource()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAttachedNotes
     *
     * Get notes.
     *
     */
    public function testGetAttachedNotes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCsvReport
     *
     * Get CSV list of Purchase Orders.
     *
     */
    public function testGetCsvReport()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getMatchedDocuments
     *
     * List matched documents.
     *
     */
    public function testGetMatchedDocuments()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPurchaseOrderResource
     *
     * Get Purchase Order.
     *
     */
    public function testGetPurchaseOrderResource()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendPurchaseOrder
     *
     * Send purchase order via email.
     *
     */
    public function testSendPurchaseOrder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendPurchaseOrders
     *
     * Sends multiple purchase orders via email.
     *
     */
    public function testSendPurchaseOrders()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setDropshipManuallyCompleted
     *
     * Manually complete dropship order.
     *
     */
    public function testSetDropshipManuallyCompleted()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setManuallyCompleted
     *
     * Manually complete Purchase Order.
     *
     */
    public function testSetManuallyCompleted()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updatePurchaseOrderResource
     *
     * Update Purchase Order.
     *
     */
    public function testUpdatePurchaseOrderResource()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateResponseState
     *
     * Update response state.
     *
     */
    public function testUpdateResponseState()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for voidDocumentPurchaseOrderResource
     *
     * Void Purchase Order.
     *
     */
    public function testVoidDocumentPurchaseOrderResource()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
