<?php
/**
 * InvoicesResourceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  FortnoxApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [Guides & Good to Know section](https://www.fortnox.se/developer/guides-and-good-to-know/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit per access-token is 25 requests per 5 seconds. This equals to 300 requests per minute.  [Read more about this here.](https://www.fortnox.se/developer/guides-and-good-to-know/rate-limits-for-fortnox-api/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://www.fortnox.se/developer/guides-and-good-to-know/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FortnoxApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FortnoxApi\ApiException;
use FortnoxApi\Configuration;
use FortnoxApi\HeaderSelector;
use FortnoxApi\ObjectSerializer;

/**
 * InvoicesResourceApi Class Doc Comment
 *
 * @category Class
 * @package  FortnoxApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InvoicesResourceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'bookkeepInvoicesResource' => [
            'application/json',
        ],
        'callPrint' => [
            'application/json',
        ],
        'cancel' => [
            'application/json',
        ],
        'createInvoicesResource' => [
            'application/json',
        ],
        'credit' => [
            'application/json',
        ],
        'eInvoice' => [
            'application/json',
        ],
        'ePrint' => [
            'application/json',
        ],
        'email' => [
            'application/json',
        ],
        'externalPrint' => [
            'application/json',
        ],
        'getInvoicesResource' => [
            'application/json',
        ],
        'listInvoicesResource' => [
            'application/json',
        ],
        'preview' => [
            'application/json',
        ],
        'printReminder' => [
            'application/json',
        ],
        'updateInvoicesResource' => [
            'application/json',
        ],
        'warehouseReady' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bookkeepInvoicesResource
     *
     * Bookkeep an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookkeepInvoicesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\InvoiceWrap
     */
    public function bookkeepInvoicesResource($document_number, string $contentType = self::contentTypes['bookkeepInvoicesResource'][0])
    {
        list($response) = $this->bookkeepInvoicesResourceWithHttpInfo($document_number, $contentType);
        return $response;
    }

    /**
     * Operation bookkeepInvoicesResourceWithHttpInfo
     *
     * Bookkeep an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookkeepInvoicesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\InvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function bookkeepInvoicesResourceWithHttpInfo($document_number, string $contentType = self::contentTypes['bookkeepInvoicesResource'][0])
    {
        $request = $this->bookkeepInvoicesResourceRequest($document_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\InvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\InvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\InvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\InvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\InvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bookkeepInvoicesResourceAsync
     *
     * Bookkeep an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookkeepInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookkeepInvoicesResourceAsync($document_number, string $contentType = self::contentTypes['bookkeepInvoicesResource'][0])
    {
        return $this->bookkeepInvoicesResourceAsyncWithHttpInfo($document_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookkeepInvoicesResourceAsyncWithHttpInfo
     *
     * Bookkeep an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookkeepInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookkeepInvoicesResourceAsyncWithHttpInfo($document_number, string $contentType = self::contentTypes['bookkeepInvoicesResource'][0])
    {
        $returnType = '\FortnoxApi\Model\InvoiceWrap';
        $request = $this->bookkeepInvoicesResourceRequest($document_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bookkeepInvoicesResource'
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookkeepInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bookkeepInvoicesResourceRequest($document_number, string $contentType = self::contentTypes['bookkeepInvoicesResource'][0])
    {

        // verify the required parameter 'document_number' is set
        if ($document_number === null || (is_array($document_number) && count($document_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_number when calling bookkeepInvoicesResource'
            );
        }


        $resourcePath = '/3/invoices/{DocumentNumber}/bookkeep';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_number !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentNumber' . '}',
                ObjectSerializer::toPathValue($document_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callPrint
     *
     * Print an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['callPrint'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function callPrint($document_number, string $contentType = self::contentTypes['callPrint'][0])
    {
        list($response) = $this->callPrintWithHttpInfo($document_number, $contentType);
        return $response;
    }

    /**
     * Operation callPrintWithHttpInfo
     *
     * Print an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['callPrint'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function callPrintWithHttpInfo($document_number, string $contentType = self::contentTypes['callPrint'][0])
    {
        $request = $this->callPrintRequest($document_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callPrintAsync
     *
     * Print an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['callPrint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callPrintAsync($document_number, string $contentType = self::contentTypes['callPrint'][0])
    {
        return $this->callPrintAsyncWithHttpInfo($document_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callPrintAsyncWithHttpInfo
     *
     * Print an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['callPrint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callPrintAsyncWithHttpInfo($document_number, string $contentType = self::contentTypes['callPrint'][0])
    {
        $returnType = 'string';
        $request = $this->callPrintRequest($document_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callPrint'
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['callPrint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function callPrintRequest($document_number, string $contentType = self::contentTypes['callPrint'][0])
    {

        // verify the required parameter 'document_number' is set
        if ($document_number === null || (is_array($document_number) && count($document_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_number when calling callPrint'
            );
        }


        $resourcePath = '/3/invoices/{DocumentNumber}/print';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_number !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentNumber' . '}',
                ObjectSerializer::toPathValue($document_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancel
     *
     * Cancel an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancel'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\InvoiceWrap
     */
    public function cancel($document_number, string $contentType = self::contentTypes['cancel'][0])
    {
        list($response) = $this->cancelWithHttpInfo($document_number, $contentType);
        return $response;
    }

    /**
     * Operation cancelWithHttpInfo
     *
     * Cancel an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancel'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\InvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelWithHttpInfo($document_number, string $contentType = self::contentTypes['cancel'][0])
    {
        $request = $this->cancelRequest($document_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\InvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\InvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\InvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\InvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\InvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelAsync
     *
     * Cancel an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelAsync($document_number, string $contentType = self::contentTypes['cancel'][0])
    {
        return $this->cancelAsyncWithHttpInfo($document_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelAsyncWithHttpInfo
     *
     * Cancel an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelAsyncWithHttpInfo($document_number, string $contentType = self::contentTypes['cancel'][0])
    {
        $returnType = '\FortnoxApi\Model\InvoiceWrap';
        $request = $this->cancelRequest($document_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancel'
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelRequest($document_number, string $contentType = self::contentTypes['cancel'][0])
    {

        // verify the required parameter 'document_number' is set
        if ($document_number === null || (is_array($document_number) && count($document_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_number when calling cancel'
            );
        }


        $resourcePath = '/3/invoices/{DocumentNumber}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_number !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentNumber' . '}',
                ObjectSerializer::toPathValue($document_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createInvoicesResource
     *
     * Create an invoice
     *
     * @param  \FortnoxApi\Model\InvoicePayloadWrap $invoice_payload payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInvoicesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\InvoiceWrap
     */
    public function createInvoicesResource($invoice_payload = null, string $contentType = self::contentTypes['createInvoicesResource'][0])
    {
        list($response) = $this->createInvoicesResourceWithHttpInfo($invoice_payload, $contentType);
        return $response;
    }

    /**
     * Operation createInvoicesResourceWithHttpInfo
     *
     * Create an invoice
     *
     * @param  \FortnoxApi\Model\InvoicePayloadWrap $invoice_payload payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInvoicesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\InvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function createInvoicesResourceWithHttpInfo($invoice_payload = null, string $contentType = self::contentTypes['createInvoicesResource'][0])
    {
        $request = $this->createInvoicesResourceRequest($invoice_payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\InvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\InvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\InvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\InvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\InvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createInvoicesResourceAsync
     *
     * Create an invoice
     *
     * @param  \FortnoxApi\Model\InvoicePayloadWrap $invoice_payload payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInvoicesResourceAsync($invoice_payload = null, string $contentType = self::contentTypes['createInvoicesResource'][0])
    {
        return $this->createInvoicesResourceAsyncWithHttpInfo($invoice_payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInvoicesResourceAsyncWithHttpInfo
     *
     * Create an invoice
     *
     * @param  \FortnoxApi\Model\InvoicePayloadWrap $invoice_payload payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInvoicesResourceAsyncWithHttpInfo($invoice_payload = null, string $contentType = self::contentTypes['createInvoicesResource'][0])
    {
        $returnType = '\FortnoxApi\Model\InvoiceWrap';
        $request = $this->createInvoicesResourceRequest($invoice_payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInvoicesResource'
     *
     * @param  \FortnoxApi\Model\InvoicePayloadWrap $invoice_payload payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createInvoicesResourceRequest($invoice_payload = null, string $contentType = self::contentTypes['createInvoicesResource'][0])
    {



        $resourcePath = '/3/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($invoice_payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($invoice_payload));
            } else {
                $httpBody = $invoice_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation credit
     *
     * Credit an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['credit'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\InvoiceWrap
     */
    public function credit($document_number, string $contentType = self::contentTypes['credit'][0])
    {
        list($response) = $this->creditWithHttpInfo($document_number, $contentType);
        return $response;
    }

    /**
     * Operation creditWithHttpInfo
     *
     * Credit an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['credit'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\InvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditWithHttpInfo($document_number, string $contentType = self::contentTypes['credit'][0])
    {
        $request = $this->creditRequest($document_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\InvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\InvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\InvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\InvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\InvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditAsync
     *
     * Credit an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['credit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditAsync($document_number, string $contentType = self::contentTypes['credit'][0])
    {
        return $this->creditAsyncWithHttpInfo($document_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditAsyncWithHttpInfo
     *
     * Credit an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['credit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditAsyncWithHttpInfo($document_number, string $contentType = self::contentTypes['credit'][0])
    {
        $returnType = '\FortnoxApi\Model\InvoiceWrap';
        $request = $this->creditRequest($document_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'credit'
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['credit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function creditRequest($document_number, string $contentType = self::contentTypes['credit'][0])
    {

        // verify the required parameter 'document_number' is set
        if ($document_number === null || (is_array($document_number) && count($document_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_number when calling credit'
            );
        }


        $resourcePath = '/3/invoices/{DocumentNumber}/credit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_number !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentNumber' . '}',
                ObjectSerializer::toPathValue($document_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eInvoice
     *
     * Send an invoice as e-invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['eInvoice'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\InvoiceWrap
     */
    public function eInvoice($document_number, string $contentType = self::contentTypes['eInvoice'][0])
    {
        list($response) = $this->eInvoiceWithHttpInfo($document_number, $contentType);
        return $response;
    }

    /**
     * Operation eInvoiceWithHttpInfo
     *
     * Send an invoice as e-invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['eInvoice'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\InvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function eInvoiceWithHttpInfo($document_number, string $contentType = self::contentTypes['eInvoice'][0])
    {
        $request = $this->eInvoiceRequest($document_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\InvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\InvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\InvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\InvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\InvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation eInvoiceAsync
     *
     * Send an invoice as e-invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['eInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eInvoiceAsync($document_number, string $contentType = self::contentTypes['eInvoice'][0])
    {
        return $this->eInvoiceAsyncWithHttpInfo($document_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eInvoiceAsyncWithHttpInfo
     *
     * Send an invoice as e-invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['eInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eInvoiceAsyncWithHttpInfo($document_number, string $contentType = self::contentTypes['eInvoice'][0])
    {
        $returnType = '\FortnoxApi\Model\InvoiceWrap';
        $request = $this->eInvoiceRequest($document_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eInvoice'
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['eInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function eInvoiceRequest($document_number, string $contentType = self::contentTypes['eInvoice'][0])
    {

        // verify the required parameter 'document_number' is set
        if ($document_number === null || (is_array($document_number) && count($document_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_number when calling eInvoice'
            );
        }


        $resourcePath = '/3/invoices/{DocumentNumber}/einvoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_number !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentNumber' . '}',
                ObjectSerializer::toPathValue($document_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ePrint
     *
     * Send an invoice as e-print
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ePrint'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\InvoiceWrap
     */
    public function ePrint($document_number, string $contentType = self::contentTypes['ePrint'][0])
    {
        list($response) = $this->ePrintWithHttpInfo($document_number, $contentType);
        return $response;
    }

    /**
     * Operation ePrintWithHttpInfo
     *
     * Send an invoice as e-print
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ePrint'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\InvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function ePrintWithHttpInfo($document_number, string $contentType = self::contentTypes['ePrint'][0])
    {
        $request = $this->ePrintRequest($document_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\InvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\InvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\InvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\InvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\InvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ePrintAsync
     *
     * Send an invoice as e-print
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ePrint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ePrintAsync($document_number, string $contentType = self::contentTypes['ePrint'][0])
    {
        return $this->ePrintAsyncWithHttpInfo($document_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ePrintAsyncWithHttpInfo
     *
     * Send an invoice as e-print
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ePrint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ePrintAsyncWithHttpInfo($document_number, string $contentType = self::contentTypes['ePrint'][0])
    {
        $returnType = '\FortnoxApi\Model\InvoiceWrap';
        $request = $this->ePrintRequest($document_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ePrint'
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ePrint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ePrintRequest($document_number, string $contentType = self::contentTypes['ePrint'][0])
    {

        // verify the required parameter 'document_number' is set
        if ($document_number === null || (is_array($document_number) && count($document_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_number when calling ePrint'
            );
        }


        $resourcePath = '/3/invoices/{DocumentNumber}/eprint';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_number !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentNumber' . '}',
                ObjectSerializer::toPathValue($document_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation email
     *
     * Send an invoice as email
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['email'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\InvoiceWrap
     */
    public function email($document_number, string $contentType = self::contentTypes['email'][0])
    {
        list($response) = $this->emailWithHttpInfo($document_number, $contentType);
        return $response;
    }

    /**
     * Operation emailWithHttpInfo
     *
     * Send an invoice as email
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['email'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\InvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailWithHttpInfo($document_number, string $contentType = self::contentTypes['email'][0])
    {
        $request = $this->emailRequest($document_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\InvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\InvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\InvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\InvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\InvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailAsync
     *
     * Send an invoice as email
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['email'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailAsync($document_number, string $contentType = self::contentTypes['email'][0])
    {
        return $this->emailAsyncWithHttpInfo($document_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailAsyncWithHttpInfo
     *
     * Send an invoice as email
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['email'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailAsyncWithHttpInfo($document_number, string $contentType = self::contentTypes['email'][0])
    {
        $returnType = '\FortnoxApi\Model\InvoiceWrap';
        $request = $this->emailRequest($document_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'email'
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['email'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function emailRequest($document_number, string $contentType = self::contentTypes['email'][0])
    {

        // verify the required parameter 'document_number' is set
        if ($document_number === null || (is_array($document_number) && count($document_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_number when calling email'
            );
        }


        $resourcePath = '/3/invoices/{DocumentNumber}/email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_number !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentNumber' . '}',
                ObjectSerializer::toPathValue($document_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation externalPrint
     *
     * Set an invoice as sent
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalPrint'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\InvoiceWrap
     */
    public function externalPrint($document_number, string $contentType = self::contentTypes['externalPrint'][0])
    {
        list($response) = $this->externalPrintWithHttpInfo($document_number, $contentType);
        return $response;
    }

    /**
     * Operation externalPrintWithHttpInfo
     *
     * Set an invoice as sent
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalPrint'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\InvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function externalPrintWithHttpInfo($document_number, string $contentType = self::contentTypes['externalPrint'][0])
    {
        $request = $this->externalPrintRequest($document_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\InvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\InvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\InvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\InvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\InvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation externalPrintAsync
     *
     * Set an invoice as sent
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalPrint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function externalPrintAsync($document_number, string $contentType = self::contentTypes['externalPrint'][0])
    {
        return $this->externalPrintAsyncWithHttpInfo($document_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation externalPrintAsyncWithHttpInfo
     *
     * Set an invoice as sent
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalPrint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function externalPrintAsyncWithHttpInfo($document_number, string $contentType = self::contentTypes['externalPrint'][0])
    {
        $returnType = '\FortnoxApi\Model\InvoiceWrap';
        $request = $this->externalPrintRequest($document_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'externalPrint'
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalPrint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function externalPrintRequest($document_number, string $contentType = self::contentTypes['externalPrint'][0])
    {

        // verify the required parameter 'document_number' is set
        if ($document_number === null || (is_array($document_number) && count($document_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_number when calling externalPrint'
            );
        }


        $resourcePath = '/3/invoices/{DocumentNumber}/externalprint';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_number !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentNumber' . '}',
                ObjectSerializer::toPathValue($document_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoicesResource
     *
     * Retrieve a single invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoicesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\InvoiceWrap
     */
    public function getInvoicesResource($document_number, string $contentType = self::contentTypes['getInvoicesResource'][0])
    {
        list($response) = $this->getInvoicesResourceWithHttpInfo($document_number, $contentType);
        return $response;
    }

    /**
     * Operation getInvoicesResourceWithHttpInfo
     *
     * Retrieve a single invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoicesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\InvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoicesResourceWithHttpInfo($document_number, string $contentType = self::contentTypes['getInvoicesResource'][0])
    {
        $request = $this->getInvoicesResourceRequest($document_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\InvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\InvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\InvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\InvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\InvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoicesResourceAsync
     *
     * Retrieve a single invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoicesResourceAsync($document_number, string $contentType = self::contentTypes['getInvoicesResource'][0])
    {
        return $this->getInvoicesResourceAsyncWithHttpInfo($document_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoicesResourceAsyncWithHttpInfo
     *
     * Retrieve a single invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoicesResourceAsyncWithHttpInfo($document_number, string $contentType = self::contentTypes['getInvoicesResource'][0])
    {
        $returnType = '\FortnoxApi\Model\InvoiceWrap';
        $request = $this->getInvoicesResourceRequest($document_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoicesResource'
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInvoicesResourceRequest($document_number, string $contentType = self::contentTypes['getInvoicesResource'][0])
    {

        // verify the required parameter 'document_number' is set
        if ($document_number === null || (is_array($document_number) && count($document_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_number when calling getInvoicesResource'
            );
        }


        $resourcePath = '/3/invoices/{DocumentNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_number !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentNumber' . '}',
                ObjectSerializer::toPathValue($document_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listInvoicesResource
     *
     * Retrieve a list of invoices
     *
     * @param  string $filter possibility to filter invoices (optional)
     * @param  string $costcenter costcenter (optional)
     * @param  string $customername customername (optional)
     * @param  string $customernumber customernumber (optional)
     * @param  string $label label (optional)
     * @param  string $documentnumber documentnumber (optional)
     * @param  string $fromdate fromdate (optional)
     * @param  string $todate todate (optional)
     * @param  string $fromfinalpaydate fromfinalpaydate (optional)
     * @param  string $tofinalpaydate tofinalpaydate (optional)
     * @param  string $lastmodified lastmodified (optional)
     * @param  string $notcompleted notcompleted (optional)
     * @param  string $ocr ocr (optional)
     * @param  string $ourreference ourreference (optional)
     * @param  string $project project (optional)
     * @param  string $sent sent (optional)
     * @param  string $externalinvoicereference1 externalinvoicereference1 (optional)
     * @param  string $externalinvoicereference2 externalinvoicereference2 (optional)
     * @param  string $yourreference yourreference (optional)
     * @param  string $invoicetype invoicetype (optional)
     * @param  string $articlenumber articlenumber (optional)
     * @param  string $articledescription articledescription (optional)
     * @param  string $currency currency (optional)
     * @param  string $accountnumberfrom accountnumberfrom (optional)
     * @param  string $accountnumberto accountnumberto (optional)
     * @param  string $yourordernumber yourordernumber (optional)
     * @param  string $credit credit (optional)
     * @param  string $sortby field to sort returned list on (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInvoicesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\InvoiceListItemWrap
     */
    public function listInvoicesResource($filter = null, $costcenter = null, $customername = null, $customernumber = null, $label = null, $documentnumber = null, $fromdate = null, $todate = null, $fromfinalpaydate = null, $tofinalpaydate = null, $lastmodified = null, $notcompleted = null, $ocr = null, $ourreference = null, $project = null, $sent = null, $externalinvoicereference1 = null, $externalinvoicereference2 = null, $yourreference = null, $invoicetype = null, $articlenumber = null, $articledescription = null, $currency = null, $accountnumberfrom = null, $accountnumberto = null, $yourordernumber = null, $credit = null, $sortby = null, string $contentType = self::contentTypes['listInvoicesResource'][0])
    {
        list($response) = $this->listInvoicesResourceWithHttpInfo($filter, $costcenter, $customername, $customernumber, $label, $documentnumber, $fromdate, $todate, $fromfinalpaydate, $tofinalpaydate, $lastmodified, $notcompleted, $ocr, $ourreference, $project, $sent, $externalinvoicereference1, $externalinvoicereference2, $yourreference, $invoicetype, $articlenumber, $articledescription, $currency, $accountnumberfrom, $accountnumberto, $yourordernumber, $credit, $sortby, $contentType);
        return $response;
    }

    /**
     * Operation listInvoicesResourceWithHttpInfo
     *
     * Retrieve a list of invoices
     *
     * @param  string $filter possibility to filter invoices (optional)
     * @param  string $costcenter (optional)
     * @param  string $customername (optional)
     * @param  string $customernumber (optional)
     * @param  string $label (optional)
     * @param  string $documentnumber (optional)
     * @param  string $fromdate (optional)
     * @param  string $todate (optional)
     * @param  string $fromfinalpaydate (optional)
     * @param  string $tofinalpaydate (optional)
     * @param  string $lastmodified (optional)
     * @param  string $notcompleted (optional)
     * @param  string $ocr (optional)
     * @param  string $ourreference (optional)
     * @param  string $project (optional)
     * @param  string $sent (optional)
     * @param  string $externalinvoicereference1 (optional)
     * @param  string $externalinvoicereference2 (optional)
     * @param  string $yourreference (optional)
     * @param  string $invoicetype (optional)
     * @param  string $articlenumber (optional)
     * @param  string $articledescription (optional)
     * @param  string $currency (optional)
     * @param  string $accountnumberfrom (optional)
     * @param  string $accountnumberto (optional)
     * @param  string $yourordernumber (optional)
     * @param  string $credit (optional)
     * @param  string $sortby field to sort returned list on (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInvoicesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\InvoiceListItemWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function listInvoicesResourceWithHttpInfo($filter = null, $costcenter = null, $customername = null, $customernumber = null, $label = null, $documentnumber = null, $fromdate = null, $todate = null, $fromfinalpaydate = null, $tofinalpaydate = null, $lastmodified = null, $notcompleted = null, $ocr = null, $ourreference = null, $project = null, $sent = null, $externalinvoicereference1 = null, $externalinvoicereference2 = null, $yourreference = null, $invoicetype = null, $articlenumber = null, $articledescription = null, $currency = null, $accountnumberfrom = null, $accountnumberto = null, $yourordernumber = null, $credit = null, $sortby = null, string $contentType = self::contentTypes['listInvoicesResource'][0])
    {
        $request = $this->listInvoicesResourceRequest($filter, $costcenter, $customername, $customernumber, $label, $documentnumber, $fromdate, $todate, $fromfinalpaydate, $tofinalpaydate, $lastmodified, $notcompleted, $ocr, $ourreference, $project, $sent, $externalinvoicereference1, $externalinvoicereference2, $yourreference, $invoicetype, $articlenumber, $articledescription, $currency, $accountnumberfrom, $accountnumberto, $yourordernumber, $credit, $sortby, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\InvoiceListItemWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\InvoiceListItemWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\InvoiceListItemWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\InvoiceListItemWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\InvoiceListItemWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listInvoicesResourceAsync
     *
     * Retrieve a list of invoices
     *
     * @param  string $filter possibility to filter invoices (optional)
     * @param  string $costcenter (optional)
     * @param  string $customername (optional)
     * @param  string $customernumber (optional)
     * @param  string $label (optional)
     * @param  string $documentnumber (optional)
     * @param  string $fromdate (optional)
     * @param  string $todate (optional)
     * @param  string $fromfinalpaydate (optional)
     * @param  string $tofinalpaydate (optional)
     * @param  string $lastmodified (optional)
     * @param  string $notcompleted (optional)
     * @param  string $ocr (optional)
     * @param  string $ourreference (optional)
     * @param  string $project (optional)
     * @param  string $sent (optional)
     * @param  string $externalinvoicereference1 (optional)
     * @param  string $externalinvoicereference2 (optional)
     * @param  string $yourreference (optional)
     * @param  string $invoicetype (optional)
     * @param  string $articlenumber (optional)
     * @param  string $articledescription (optional)
     * @param  string $currency (optional)
     * @param  string $accountnumberfrom (optional)
     * @param  string $accountnumberto (optional)
     * @param  string $yourordernumber (optional)
     * @param  string $credit (optional)
     * @param  string $sortby field to sort returned list on (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInvoicesResourceAsync($filter = null, $costcenter = null, $customername = null, $customernumber = null, $label = null, $documentnumber = null, $fromdate = null, $todate = null, $fromfinalpaydate = null, $tofinalpaydate = null, $lastmodified = null, $notcompleted = null, $ocr = null, $ourreference = null, $project = null, $sent = null, $externalinvoicereference1 = null, $externalinvoicereference2 = null, $yourreference = null, $invoicetype = null, $articlenumber = null, $articledescription = null, $currency = null, $accountnumberfrom = null, $accountnumberto = null, $yourordernumber = null, $credit = null, $sortby = null, string $contentType = self::contentTypes['listInvoicesResource'][0])
    {
        return $this->listInvoicesResourceAsyncWithHttpInfo($filter, $costcenter, $customername, $customernumber, $label, $documentnumber, $fromdate, $todate, $fromfinalpaydate, $tofinalpaydate, $lastmodified, $notcompleted, $ocr, $ourreference, $project, $sent, $externalinvoicereference1, $externalinvoicereference2, $yourreference, $invoicetype, $articlenumber, $articledescription, $currency, $accountnumberfrom, $accountnumberto, $yourordernumber, $credit, $sortby, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInvoicesResourceAsyncWithHttpInfo
     *
     * Retrieve a list of invoices
     *
     * @param  string $filter possibility to filter invoices (optional)
     * @param  string $costcenter (optional)
     * @param  string $customername (optional)
     * @param  string $customernumber (optional)
     * @param  string $label (optional)
     * @param  string $documentnumber (optional)
     * @param  string $fromdate (optional)
     * @param  string $todate (optional)
     * @param  string $fromfinalpaydate (optional)
     * @param  string $tofinalpaydate (optional)
     * @param  string $lastmodified (optional)
     * @param  string $notcompleted (optional)
     * @param  string $ocr (optional)
     * @param  string $ourreference (optional)
     * @param  string $project (optional)
     * @param  string $sent (optional)
     * @param  string $externalinvoicereference1 (optional)
     * @param  string $externalinvoicereference2 (optional)
     * @param  string $yourreference (optional)
     * @param  string $invoicetype (optional)
     * @param  string $articlenumber (optional)
     * @param  string $articledescription (optional)
     * @param  string $currency (optional)
     * @param  string $accountnumberfrom (optional)
     * @param  string $accountnumberto (optional)
     * @param  string $yourordernumber (optional)
     * @param  string $credit (optional)
     * @param  string $sortby field to sort returned list on (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInvoicesResourceAsyncWithHttpInfo($filter = null, $costcenter = null, $customername = null, $customernumber = null, $label = null, $documentnumber = null, $fromdate = null, $todate = null, $fromfinalpaydate = null, $tofinalpaydate = null, $lastmodified = null, $notcompleted = null, $ocr = null, $ourreference = null, $project = null, $sent = null, $externalinvoicereference1 = null, $externalinvoicereference2 = null, $yourreference = null, $invoicetype = null, $articlenumber = null, $articledescription = null, $currency = null, $accountnumberfrom = null, $accountnumberto = null, $yourordernumber = null, $credit = null, $sortby = null, string $contentType = self::contentTypes['listInvoicesResource'][0])
    {
        $returnType = '\FortnoxApi\Model\InvoiceListItemWrap';
        $request = $this->listInvoicesResourceRequest($filter, $costcenter, $customername, $customernumber, $label, $documentnumber, $fromdate, $todate, $fromfinalpaydate, $tofinalpaydate, $lastmodified, $notcompleted, $ocr, $ourreference, $project, $sent, $externalinvoicereference1, $externalinvoicereference2, $yourreference, $invoicetype, $articlenumber, $articledescription, $currency, $accountnumberfrom, $accountnumberto, $yourordernumber, $credit, $sortby, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listInvoicesResource'
     *
     * @param  string $filter possibility to filter invoices (optional)
     * @param  string $costcenter (optional)
     * @param  string $customername (optional)
     * @param  string $customernumber (optional)
     * @param  string $label (optional)
     * @param  string $documentnumber (optional)
     * @param  string $fromdate (optional)
     * @param  string $todate (optional)
     * @param  string $fromfinalpaydate (optional)
     * @param  string $tofinalpaydate (optional)
     * @param  string $lastmodified (optional)
     * @param  string $notcompleted (optional)
     * @param  string $ocr (optional)
     * @param  string $ourreference (optional)
     * @param  string $project (optional)
     * @param  string $sent (optional)
     * @param  string $externalinvoicereference1 (optional)
     * @param  string $externalinvoicereference2 (optional)
     * @param  string $yourreference (optional)
     * @param  string $invoicetype (optional)
     * @param  string $articlenumber (optional)
     * @param  string $articledescription (optional)
     * @param  string $currency (optional)
     * @param  string $accountnumberfrom (optional)
     * @param  string $accountnumberto (optional)
     * @param  string $yourordernumber (optional)
     * @param  string $credit (optional)
     * @param  string $sortby field to sort returned list on (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listInvoicesResourceRequest($filter = null, $costcenter = null, $customername = null, $customernumber = null, $label = null, $documentnumber = null, $fromdate = null, $todate = null, $fromfinalpaydate = null, $tofinalpaydate = null, $lastmodified = null, $notcompleted = null, $ocr = null, $ourreference = null, $project = null, $sent = null, $externalinvoicereference1 = null, $externalinvoicereference2 = null, $yourreference = null, $invoicetype = null, $articlenumber = null, $articledescription = null, $currency = null, $accountnumberfrom = null, $accountnumberto = null, $yourordernumber = null, $credit = null, $sortby = null, string $contentType = self::contentTypes['listInvoicesResource'][0])
    {






























        $resourcePath = '/3/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $costcenter,
            'costcenter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customername,
            'customername', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customernumber,
            'customernumber', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $label,
            'label', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentnumber,
            'documentnumber', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromdate,
            'fromdate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $todate,
            'todate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromfinalpaydate,
            'fromfinalpaydate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tofinalpaydate,
            'tofinalpaydate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lastmodified,
            'lastmodified', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $notcompleted,
            'notcompleted', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ocr,
            'ocr', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ourreference,
            'ourreference', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $project,
            'project', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sent,
            'sent', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $externalinvoicereference1,
            'externalinvoicereference1', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $externalinvoicereference2,
            'externalinvoicereference2', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $yourreference,
            'yourreference', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $invoicetype,
            'invoicetype', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $articlenumber,
            'articlenumber', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $articledescription,
            'articledescription', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accountnumberfrom,
            'accountnumberfrom', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accountnumberto,
            'accountnumberto', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $yourordernumber,
            'yourordernumber', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $credit,
            'credit', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sortby,
            'sortby', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation preview
     *
     * Preview an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['preview'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function preview($document_number, string $contentType = self::contentTypes['preview'][0])
    {
        list($response) = $this->previewWithHttpInfo($document_number, $contentType);
        return $response;
    }

    /**
     * Operation previewWithHttpInfo
     *
     * Preview an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['preview'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function previewWithHttpInfo($document_number, string $contentType = self::contentTypes['preview'][0])
    {
        $request = $this->previewRequest($document_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation previewAsync
     *
     * Preview an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['preview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function previewAsync($document_number, string $contentType = self::contentTypes['preview'][0])
    {
        return $this->previewAsyncWithHttpInfo($document_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation previewAsyncWithHttpInfo
     *
     * Preview an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['preview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function previewAsyncWithHttpInfo($document_number, string $contentType = self::contentTypes['preview'][0])
    {
        $returnType = 'string';
        $request = $this->previewRequest($document_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'preview'
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['preview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function previewRequest($document_number, string $contentType = self::contentTypes['preview'][0])
    {

        // verify the required parameter 'document_number' is set
        if ($document_number === null || (is_array($document_number) && count($document_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_number when calling preview'
            );
        }


        $resourcePath = '/3/invoices/{DocumentNumber}/preview';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_number !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentNumber' . '}',
                ObjectSerializer::toPathValue($document_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation printReminder
     *
     * Print an invoice as reminder
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['printReminder'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function printReminder($document_number, string $contentType = self::contentTypes['printReminder'][0])
    {
        list($response) = $this->printReminderWithHttpInfo($document_number, $contentType);
        return $response;
    }

    /**
     * Operation printReminderWithHttpInfo
     *
     * Print an invoice as reminder
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['printReminder'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function printReminderWithHttpInfo($document_number, string $contentType = self::contentTypes['printReminder'][0])
    {
        $request = $this->printReminderRequest($document_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation printReminderAsync
     *
     * Print an invoice as reminder
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['printReminder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function printReminderAsync($document_number, string $contentType = self::contentTypes['printReminder'][0])
    {
        return $this->printReminderAsyncWithHttpInfo($document_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation printReminderAsyncWithHttpInfo
     *
     * Print an invoice as reminder
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['printReminder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function printReminderAsyncWithHttpInfo($document_number, string $contentType = self::contentTypes['printReminder'][0])
    {
        $returnType = 'string';
        $request = $this->printReminderRequest($document_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'printReminder'
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['printReminder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function printReminderRequest($document_number, string $contentType = self::contentTypes['printReminder'][0])
    {

        // verify the required parameter 'document_number' is set
        if ($document_number === null || (is_array($document_number) && count($document_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_number when calling printReminder'
            );
        }


        $resourcePath = '/3/invoices/{DocumentNumber}/printreminder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_number !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentNumber' . '}',
                ObjectSerializer::toPathValue($document_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateInvoicesResource
     *
     * Update an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  \FortnoxApi\Model\InvoicePayloadWrap $invoice_payload payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInvoicesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\InvoiceWrap
     */
    public function updateInvoicesResource($document_number, $invoice_payload = null, string $contentType = self::contentTypes['updateInvoicesResource'][0])
    {
        list($response) = $this->updateInvoicesResourceWithHttpInfo($document_number, $invoice_payload, $contentType);
        return $response;
    }

    /**
     * Operation updateInvoicesResourceWithHttpInfo
     *
     * Update an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  \FortnoxApi\Model\InvoicePayloadWrap $invoice_payload payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInvoicesResource'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\InvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateInvoicesResourceWithHttpInfo($document_number, $invoice_payload = null, string $contentType = self::contentTypes['updateInvoicesResource'][0])
    {
        $request = $this->updateInvoicesResourceRequest($document_number, $invoice_payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\InvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\InvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\InvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\InvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\InvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateInvoicesResourceAsync
     *
     * Update an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  \FortnoxApi\Model\InvoicePayloadWrap $invoice_payload payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInvoicesResourceAsync($document_number, $invoice_payload = null, string $contentType = self::contentTypes['updateInvoicesResource'][0])
    {
        return $this->updateInvoicesResourceAsyncWithHttpInfo($document_number, $invoice_payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateInvoicesResourceAsyncWithHttpInfo
     *
     * Update an invoice
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  \FortnoxApi\Model\InvoicePayloadWrap $invoice_payload payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInvoicesResourceAsyncWithHttpInfo($document_number, $invoice_payload = null, string $contentType = self::contentTypes['updateInvoicesResource'][0])
    {
        $returnType = '\FortnoxApi\Model\InvoiceWrap';
        $request = $this->updateInvoicesResourceRequest($document_number, $invoice_payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateInvoicesResource'
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  \FortnoxApi\Model\InvoicePayloadWrap $invoice_payload payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInvoicesResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateInvoicesResourceRequest($document_number, $invoice_payload = null, string $contentType = self::contentTypes['updateInvoicesResource'][0])
    {

        // verify the required parameter 'document_number' is set
        if ($document_number === null || (is_array($document_number) && count($document_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_number when calling updateInvoicesResource'
            );
        }



        $resourcePath = '/3/invoices/{DocumentNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_number !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentNumber' . '}',
                ObjectSerializer::toPathValue($document_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($invoice_payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($invoice_payload));
            } else {
                $httpBody = $invoice_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warehouseReady
     *
     * Set an invoice as done
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseReady'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FortnoxApi\Model\InvoiceWrap
     */
    public function warehouseReady($document_number, string $contentType = self::contentTypes['warehouseReady'][0])
    {
        list($response) = $this->warehouseReadyWithHttpInfo($document_number, $contentType);
        return $response;
    }

    /**
     * Operation warehouseReadyWithHttpInfo
     *
     * Set an invoice as done
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseReady'] to see the possible values for this operation
     *
     * @throws \FortnoxApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FortnoxApi\Model\InvoiceWrap, HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseReadyWithHttpInfo($document_number, string $contentType = self::contentTypes['warehouseReady'][0])
    {
        $request = $this->warehouseReadyRequest($document_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FortnoxApi\Model\InvoiceWrap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FortnoxApi\Model\InvoiceWrap' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FortnoxApi\Model\InvoiceWrap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FortnoxApi\Model\InvoiceWrap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FortnoxApi\Model\InvoiceWrap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation warehouseReadyAsync
     *
     * Set an invoice as done
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseReady'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseReadyAsync($document_number, string $contentType = self::contentTypes['warehouseReady'][0])
    {
        return $this->warehouseReadyAsyncWithHttpInfo($document_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseReadyAsyncWithHttpInfo
     *
     * Set an invoice as done
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseReady'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseReadyAsyncWithHttpInfo($document_number, string $contentType = self::contentTypes['warehouseReady'][0])
    {
        $returnType = '\FortnoxApi\Model\InvoiceWrap';
        $request = $this->warehouseReadyRequest($document_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseReady'
     *
     * @param  string $document_number identifies the invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseReady'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function warehouseReadyRequest($document_number, string $contentType = self::contentTypes['warehouseReady'][0])
    {

        // verify the required parameter 'document_number' is set
        if ($document_number === null || (is_array($document_number) && count($document_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_number when calling warehouseReady'
            );
        }


        $resourcePath = '/3/invoices/{DocumentNumber}/warehouseready';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_number !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentNumber' . '}',
                ObjectSerializer::toPathValue($document_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
